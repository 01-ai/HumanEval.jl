### Step-by-Step Outline

1. **Identify Consecutive Spaces**: Loop through the string to identify consecutive spaces. This step involves checking each character and the one following it to see if they are both spaces.

2. **Replace Consecutive Spaces**: Once consecutive spaces are identified, replace them with a single '-'. This might involve creating a new string or modifying the existing one in place (if the language allows).

3. **Replace Single Spaces**: After handling consecutive spaces, replace all remaining single spaces with underscores '_'. This can be done in a separate pass to simplify logic and ensure that spaces that were originally part of consecutive spaces (and now replaced with '-') are not incorrectly replaced.

4. **Return the Modified String**: After all replacements, return the modified string.

### Julia Code Implementation

```julia
function fix_spaces(s::String)::String
    # Step 1 & 2: Replace consecutive spaces with '-'
    modified_s = replace(s, r"\s{2,}" => "-")  # Using regex to identify two or more spaces and replace them with '-'
    
    # Step 3: Replace remaining single spaces with '_'
    modified_s = replace(modified_s, " " => "_")
    
    return modified_s
end
```

This implementation uses regular expressions (`regex`) to simplify the identification and replacement of consecutive spaces, which allows for a more concise and efficient solution. The `replace` function in Julia is quite powerful and can handle these patterns effectively.