 Here's the implementation of the `move_one_ball` function in Julia:

```julia
function move_one_ball(xs::Vector{Int})::Bool
    # If the array is empty, return true
    if isempty(xs)
        return true
    end

    # Create a sorted version of the array
    sorted_xs = sort(xs)

    # Check if the array can be sorted by right shifting
    for i in 1:length(xs)
        # Rotate the array by i positions
        rotated_xs = circshift(xs, i)
        # Check if the rotated array is sorted
        if rotated_xs == sorted_xs
            return true
        end
    end

    # If no rotation results in a sorted array, return false
    return false
end
```

This function first checks if the input array is empty and returns `true` if it is. Then, it creates a sorted version of the array and checks if any right shift of the original array matches this sorted version. If a match is found, it returns `true`; otherwise, it returns `false` after checking all possible shifts.