 Certainly! Below is the implementation of the `reverse_string` function in Julia based on the given docstring:

```julia
"""
    reverse_string(s::String)::String

You are given a string `s`. If `s[i]` is a letter, reverse its case from lower
to upper or vise versa, otherwise keep it as it is.  If the string contains no
letters, reverse the string. The function should return the resulted string.

# Examples

```jldoctest
julia> reverse_string("1234")
"4321"

julia> reverse_string("ab")
"AB"

julia> reverse_string("#a@C")
"#A@c"
```
"""
function reverse_string(s::String)::String
    has_letter = false
    result = []

    for c in s
        if isletter(c)
            has_letter = true
            if islowercase(c)
                push!(result, uppercase(c))
            else
                push!(result, lowercase(c))
            end
        else
            push!(result, c)
        end
    end

    if has_letter
        return join(result)
    else
        return reverse(s)
    end
end
```

This function iterates through each character in the input string `s`. If the character is a letter, it changes its case (lower to upper or upper to lower). If the character is not a letter, it remains unchanged. If the string contains no letters, the function returns the reversed string. Otherwise, it returns the modified string with the case changes.