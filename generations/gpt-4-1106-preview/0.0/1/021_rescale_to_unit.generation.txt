Certainly! Below is the Julia function `rescale_to_unit` that takes a vector of `Float64` numbers and rescales them so that the smallest number becomes 0 and the largest becomes 1.

```julia
function rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}
    # Check if the vector has at least two elements
    if length(numbers) < 2
        error("The input vector must have at least two elements.")
    end

    # Find the minimum and maximum values in the vector
    min_val = minimum(numbers)
    max_val = maximum(numbers)

    # Check if all numbers are the same, which would cause division by zero
    if min_val == max_val
        error("All numbers in the vector are the same. Rescaling is not possible.")
    end

    # Apply the linear transformation to rescale the numbers
    return (numbers .- min_val) ./ (max_val - min_val)
end

# Example usage
println(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))
```

This function first checks if the input vector has at least two elements. It then finds the minimum and maximum values in the vector. If all numbers are the same, it raises an error because rescaling would not be meaningful. Finally, it applies a linear transformation to rescale the numbers so that the smallest becomes 0 and the largest becomes 1.