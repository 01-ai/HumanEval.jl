Here is the Julia function that implements the `smallest_change` function based on the provided docstring:
```julia
function smallest_change(xs::Vector{Int})::Int
    n = length(xs)
    count = 0
    for i in 1:div(n, 2)
        if xs[i] != xs[n-i+1]
            count += 1
        end
    end
    return count
end
```
Here's an explanation of the code:

1. We first get the length of the input array `xs` and store it in `n`.
2. We initialize a counter `count` to 0, which will keep track of the minimum number of elements that need to be changed.
3. We loop through the first half of the array (up to the middle index `div(n, 2)`).
4. For each index `i` in the first half, we check if the element at index `i` is not equal to the element at the corresponding index from the end of the array (`n-i+1`).
5. If the elements are not equal, we increment the `count` variable by 1.
6. Finally, we return the total count of elements that need to be changed.

You can test this function with the examples provided in the docstring to verify its correctness. Let me know if you have any further questions!