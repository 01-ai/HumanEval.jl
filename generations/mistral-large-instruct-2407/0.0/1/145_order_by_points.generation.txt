 Certainly! Below is the implementation of the `order_by_points` function in Julia, which sorts a list of integers in ascending order according to the sum of their digits. If there are several items with similar sums of their digits, it orders them based on their index in the original list.

```julia
"""
    order_by_points(nums::Vector{Int})::Vector{Int}

Write a function which sorts the given list of integers in ascending order
according to the sum of their digits. Note: if there are several items with
similar sum of their digits, order them based on their index in original list.

# Examples

```jldoctest
julia> order_by_points([1, 11, -1, -11, -12])
5-element Vector{Int64}:
  -1
 -11
   1
 -12
  11

julia> order_by_points(Int[])
Int64[]
```
"""
function order_by_points(nums::Vector{Int})::Vector{Int}
    # Helper function to calculate the sum of digits of a number
    function sum_of_digits(n::Int)::Int
        n = abs(n)  # Consider the absolute value for digit sum
        sum = 0
        while n > 0
            sum += n % 10
            n รท= 10
        end
        return sum
    end

    # Create a vector of tuples (sum_of_digits, original_index, value)
    indexed_nums = [(sum_of_digits(num), i, num) for (i, num) in enumerate(nums)]

    # Sort the vector of tuples by sum_of_digits and then by original_index
    sort!(indexed_nums, by = x -> (x[1], x[2]))

    # Extract the sorted values
    sorted_nums = [num for (_, _, num) in indexed_nums]

    return sorted_nums
end

# Examples
println(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]
println(order_by_points(Int[]))  # Output: Int64[]
```

This function first defines a helper function `sum_of_digits` to calculate the sum of the digits of a number. It then creates a vector of tuples containing the sum of digits, the original index, and the value of each number. This vector is sorted first by the sum of digits and then by the original index. Finally, the sorted values are extracted and returned.