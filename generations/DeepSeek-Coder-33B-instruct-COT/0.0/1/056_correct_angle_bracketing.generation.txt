Here is a step-by-step outline of the function:

1. Initialize a variable `count` to 0. This variable will keep track of the number of unmatched opening brackets.
2. Iterate over the characters in the string `brackets`.
3. If the character is "<", increment `count` by 1.
4. If the character is ">", decrement `count` by 1.
5. If at any point `count` becomes negative, return false because there is a closing bracket without a corresponding opening bracket.
6. After the loop, if `count` is not 0, return false because there are unmatched opening brackets.
7. If none of the above conditions are met, return true.

Here is the Julia code implementing the above steps:

```julia
function correct_angle_bracketing(brackets::String)::Bool
    count = 0
    for bracket in brackets
        if bracket == '<'
            count += 1
        elseif bracket == '>'
            count -= 1
        end
        if count < 0
            return false
        end
    end
    return count == 0
end
```

This function works by keeping track of the number of unmatched opening brackets. Whenever it encounters an opening bracket, it increments the count. Whenever it encounters a closing bracket, it decrements the count. If at any point the count becomes negative, it means there is a closing bracket without a corresponding opening bracket, so it returns false. After the loop, if the count is not 0, it means there are unmatched opening brackets, so it returns false. If none of the above conditions are met, it returns true.
