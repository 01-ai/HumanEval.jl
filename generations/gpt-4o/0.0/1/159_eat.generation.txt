Sure, let's implement the `eat` function in Julia based on the provided docstring.

```julia
function eat(number::Int, need::Int, remaining::Int)::Vector{Int}
    # Calculate the total number of carrots eaten after the meal
    total_eaten = number + min(need, remaining)
    
    # Calculate the number of carrots left after the meal
    carrots_left = max(remaining - need, 0)
    
    return [total_eaten, carrots_left]
end
```

Let's break down the function:

1. **Calculate the total number of carrots eaten after the meal**:
   - If the remaining carrots are more than or equal to the needed carrots, the rabbit will eat all the needed carrots.
   - If the remaining carrots are less than the needed carrots, the rabbit will eat all the remaining carrots.
   - This is achieved using `min(need, remaining)`.

2. **Calculate the number of carrots left after the meal**:
   - If the remaining carrots are more than or equal to the needed carrots, the remaining carrots will be reduced by the needed amount.
   - If the remaining carrots are less than the needed carrots, there will be no carrots left.
   - This is achieved using `max(remaining - need, 0)`.

3. **Return the results**:
   - The function returns a vector containing the total number of carrots eaten and the number of carrots left.

You can test the function with the provided examples to ensure it works correctly.