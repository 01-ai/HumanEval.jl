To implement the `filter_by_substring` function, we will follow these steps:

1. Define the function `filter_by_substring` that takes two arguments: `strings`, a vector of strings, and `substring`, a string.
2. Use the `filter` function to iterate over each element in `strings`.
3. For each element, check if the `substring` is contained within the string using the `occursin` function.
4. Return the filtered list of strings that contain the `substring`.

Now, let's write the code for the function:

```julia
"""
    filter_by_substring(strings::Vector{String}, substring::AbstractString)::Vector{String}

Filter an input list of `strings` only for ones that contain given `substring`.

# Examples

```jldoctest
julia> filter_by_substring(String[], "a")
String[]

julia> filter_by_substring(["abc", "bacd", "cde", "array"], "a")
3-element Vector{String}:
 "abc"
 "bacd"
 "array"
```
"""
function filter_by_substring(strings::Vector{String}, substring::AbstractString)::Vector{String}
    # Use the filter function to return strings that contain the substring
    return filter(str -> occursin(substring, str), strings)
end
```

This function will return a new vector containing only the strings from the input `strings` vector that have the `substring` within them.