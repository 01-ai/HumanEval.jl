To implement the `file_name_check` function in Julia, we need to follow the specified conditions for a valid file name. Here's the implementation:

```julia
function file_name_check(file_name::String)::String
    # Check if the file name contains exactly one dot
    if count(==('.'), file_name) != 1
        return "No"
    end
    
    # Split the file name into the part before and after the dot
    parts = split(file_name, '.')
    if length(parts) != 2
        return "No"
    end
    
    before_dot, after_dot = parts[1], parts[2]
    
    # Check if the substring before the dot is not empty and starts with a letter
    if isempty(before_dot) || !startswith(before_dot, r"^[a-zA-Z]")
        return "No"
    end
    
    # Check if the substring after the dot is one of the allowed extensions
    valid_extensions = ["txt", "exe", "dll"]
    if after_dot âˆ‰ valid_extensions
        return "No"
    end
    
    # Check if there are more than three digits in the file name
    digit_count = count(c -> isdigit(c), file_name)
    if digit_count > 3
        return "No"
    end
    
    return "Yes"
end

# Examples
println(file_name_check("example.txt"))  # "Yes"
println(file_name_check("1example.dll"))  # "No"
```

### Explanation:
1. **Dot Check**: We first check if there is exactly one dot in the file name using `count(==('.'), file_name)`.
2. **Splitting**: We split the file name into two parts using `split(file_name, '.')` and ensure there are exactly two parts.
3. **Before Dot Check**: We check if the part before the dot is not empty and starts with a letter using a regular expression `r"^[a-zA-Z]"`.
4. **Extension Check**: We verify if the part after the dot is one of the allowed extensions (`"txt"`, `"exe"`, `"dll"`).
5. **Digit Count**: We count the number of digits in the entire file name using `count(c -> isdigit(c), file_name)` and ensure it does not exceed three.

This function should correctly determine if a given file name is valid based on the specified rules.