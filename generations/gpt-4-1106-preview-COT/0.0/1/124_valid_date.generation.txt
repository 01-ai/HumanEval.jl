### Step-by-Step Outline:

1. Check if the date string is not empty.
2. Verify the format of the date string is `mm-dd-yyyy` using a regular expression.
3. Split the date string into month, day, and year components.
4. Convert the month, day, and year strings into integers.
5. Check if the month is between 1 and 12.
6. Define the maximum number of days for each month, taking into account leap years for February.
7. Check if the day is within the valid range for the given month.
8. Return `true` if all checks pass, otherwise return `false`.

### Julia Code:

```julia
function valid_date(date::String)::Bool
    # Step 1: Check if the date string is not empty
    if isempty(date)
        return false
    end

    # Step 2: Verify the format of the date string
    if !occursin(r"^\d{2}-\d{2}-\d{4}$", date)
        return false
    end

    # Step 3: Split the date string into components
    parts = split(date, "-")
    month_str, day_str, year_str = parts...

    # Step 4: Convert strings to integers
    month = parse(Int, month_str)
    day = parse(Int, day_str)
    year = parse(Int, year_str)

    # Step 5: Check if the month is valid
    if month < 1 || month > 12
        return false
    end

    # Step 6: Define the maximum number of days for each month
    max_days = [31, isleapyear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    # Step 7: Check if the day is within the valid range
    if day < 1 || day > max_days[month]
        return false
    end

    # If all checks pass, the date is valid
    return true
end
```

Now, let's implement the function in Julia.