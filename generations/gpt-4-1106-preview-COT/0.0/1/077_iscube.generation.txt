To implement the `iscube` function, we can follow these steps:

1. Check if the input `a` is 0. If it is, return `true` because 0 is the cube of 0.
2. If `a` is negative, convert it to a positive number for the cube root calculation.
3. Calculate the cube root of the absolute value of `a`.
4. Round the cube root to the nearest integer to get the potential integer that, when cubed, would result in `a`.
5. Cube the rounded integer and compare it to the absolute value of `a`.
6. If the cubed value equals the absolute value of `a`, return `true`.
7. Otherwise, return `false`.

Now, let's write the code for the `iscube` function in Julia:

```julia
function iscube(a::Int)::Bool
    # Step 1: Check if `a` is 0
    if a == 0
        return true
    end
    
    # Step 2: Convert `a` to a positive number if it is negative
    abs_a = abs(a)
    
    # Step 3: Calculate the cube root of the absolute value of `a`
    cube_root = cbrt(abs_a)
    
    # Step 4: Round the cube root to the nearest integer
    rounded = round(Int, cube_root)
    
    # Step 5: Cube the rounded integer and compare it to `abs_a`
    if rounded^3 == abs_a
        # Step 6: If they are equal, return `true`
        return true
    else
        # Step 7: Otherwise, return `false`
        return false
    end
end
```

Let's test the function with the provided examples:

```julia
println(iscube(1))    # true
println(iscube(2))    # false
println(iscube(-1))   # true
println(iscube(64))   # true
println(iscube(0))    # true
println(iscube(180))  # false
```

This function should work correctly for all the given examples.