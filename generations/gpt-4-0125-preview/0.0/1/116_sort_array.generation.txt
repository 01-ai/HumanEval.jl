To implement the `sort_array` function as described, we can follow these steps:

1. Convert each integer in the array to its binary representation.
2. Count the number of ones in each binary representation.
3. Sort the array based on the number of ones in the binary representation. If two numbers have the same number of ones, sort them based on their decimal value.

Here's how you can implement this in Julia:

```julia
function sort_array(arr::Vector{Int})::Vector{Int}
    # Sort the array based on a custom sorting criteria
    # First criteria: Number of ones in the binary representation
    # Second criteria: The integer value itself for tie-breaking
    sort(arr, by=x -> (count_ones(x), x))
end

# Helper function to count the number of ones in the binary representation of an integer
function count_ones(x::Int)::Int
    count = 0
    while x != 0
        count += x & 1
        x >>= 1
    end
    return count
end

# Example usage
println(sort_array([1, 5, 2, 3, 4]))  # Output: [1, 2, 4, 3, 5]
println(sort_array([1, 0, 2, 3, 4]))  # Output: [0, 1, 2, 4, 3]
```

This implementation uses the `sort` function with a custom sorting criterion. The `by` argument is a function that takes an integer `x` and returns a tuple `(count_ones(x), x)`. This tuple is used to sort the array, where the primary sorting criterion is the number of ones in the binary representation, and the secondary criterion (for tie-breaking) is the integer value itself.