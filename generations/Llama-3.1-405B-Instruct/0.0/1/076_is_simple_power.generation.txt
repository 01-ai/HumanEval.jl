Here is a Julia function that implements the `is_simple_power` functionality based on the provided docstring:
```julia
"""
    is_simple_power(x::Number, n::Number)::Bool

Your task is to write a function that returns `true` if a number `x` is a simple
power of `n` and `false` in other cases. `x` is a simple power of `n` if n ^
int = x.

# Examples:

```jldoctest
julia> is_simple_power(1, 4)
true

julia> is_simple_power(2, 2)
true

julia> is_simple_power(8, 2)
true

julia> is_simple_power(3, 2)
false

julia> is_simple_power(3, 1)
false

julia> is_simple_power(5, 3)
false
```
"""
function is_simple_power(x::Number, n::Number)::Bool
    if n == 1
        return x == 1
    elseif n == 0
        return x == 1
    elseif x == 1
        return true
    elseif x < 1
        return false
    else
        exp = log(x) / log(n)
        return isinteger(exp) && n ^ round(Int, exp) == x
    end
end
```
Here's an explanation of the implementation:

1. We first handle the edge cases where `n` is 1 or 0, and `x` is 1.
2. If `x` is less than 1, we immediately return `false`, since a simple power of `n` cannot be less than 1.
3. We calculate the exponent `exp` by taking the logarithm of `x` and dividing it by the logarithm of `n`. This gives us an approximate value of the exponent.
4. We check if `exp` is an integer using the `isinteger` function. If it is, we round it to the nearest integer using `round(Int, exp)`.
5. We then check if `n` raised to the power of the rounded exponent is equal to `x`. If it is, we return `true`, indicating that `x` is a simple power of `n`.

You can test this function using the examples provided in the docstring.