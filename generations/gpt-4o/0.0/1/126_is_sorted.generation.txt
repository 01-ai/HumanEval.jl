Here's the implementation of the `is_sorted` function in Julia:

```julia
function is_sorted(xs::Vector{Int})::Bool
    # Check for duplicates
    counts = Dict{Int, Int}()
    for x in xs
        if haskey(counts, x)
            counts[x] += 1
            if counts[x] > 1
                return false
            end
        else
            counts[x] = 1
        end
    end

    # Check if the list is sorted
    for i in 2:length(xs)
        if xs[i] < xs[i-1]
            return false
        end
    end

    return true
end
```

This function first checks for duplicates by using a dictionary to count occurrences of each number. If any number appears more than once, it returns `false`. Then, it checks if the list is sorted in ascending order by comparing each element with the previous one. If any element is smaller than the previous one, it returns `false`. If both checks pass, it returns `true`.

Let's test the function with the provided examples:

```julia
println(is_sorted([5]))  # true
println(is_sorted([1, 2, 3, 4, 5]))  # true
println(is_sorted([1, 3, 2, 4, 5]))  # false
println(is_sorted([1, 2, 3, 4, 5, 6]))  # true
println(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # true
println(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # false
println(is_sorted([1, 2, 2, 3, 3, 4]))  # false
println(is_sorted([1, 2, 2, 2, 3, 4]))  # false
```

This should produce the expected results as described in the docstring.