
```julia
function largest_prime_factor(n::Int)::Int
    if n <= 1
        throw(DomainError(n, "Input must be greater than 1"))
    end

    # Initialize the largest prime factor
    largest_factor = 0

    # Check if 2 is the largest prime factor
    while n % 2 == 0
        largest_factor = 2
        n = n รท 2
    end

    # Check for odd numbers starting from 3
    for i = 3:2:floor(Int, sqrt(n))
        while n % i == 0
            largest_factor = i
            n = n รท i
        end
    end

    # Check if n itself is prime
    if n > 2
        largest_factor = n
    end

    return largest_factor
end
```

This function first checks if the input is greater than 1. If it is not, it throws a `DomainError`. If the input is greater than 1, it initializes the largest prime factor to 0. It then checks if 2 is the largest prime factor by dividing the input by 2 until it is no longer divisible by 2. If it is divisible by 2, it updates the largest prime factor to 2. It then checks for odd numbers starting from 3 and divides the input by each odd number until it is no longer divisible by that number. If it is divisible by an odd number, it updates the largest prime factor to that odd number. Finally, it checks if the input itself is prime and if it is, it updates the largest prime factor to the input. The function returns the largest prime factor.