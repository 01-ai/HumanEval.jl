 Certainly! Below is the implementation of the `words_string` function in Julia based on the given doc string:

```julia
"""
    words_string(s::String)::Vector{String}

You will be given a string of words separated by commas or spaces. Your task is
to split the string into words and return an array of the words. Results
shouldn't contain empty string.

# Example

```jldoctest
julia> words_string("Hi, my name is John")
5-element Vector{String}:
 "Hi"
 "my"
 "name"
 "is"
 "John"

julia> words_string("One, two, three, four, five, six")
6-element Vector{String}:
 "One"
 "two"
 "three"
 "four"
 "five"
 "six"
```
"""
function words_string(s::String)::Vector{String}
    # Replace commas with spaces and then split by spaces
    words = split(replace(s, "," => " "), r"\s+")
    # Filter out any empty strings
    return filter(!isempty, words)
end
```

### Explanation:
1. **Replace Commas with Spaces**: The `replace(s, "," => " ")` function call replaces all commas in the string with spaces.
2. **Split by Spaces**: The `split(..., r"\s+")` function call splits the string by one or more whitespace characters.
3. **Filter Empty Strings**: The `filter(!isempty, words)` function call removes any empty strings from the resulting array.

This implementation ensures that the function correctly handles strings separated by commas or spaces and returns a vector of non-empty words.