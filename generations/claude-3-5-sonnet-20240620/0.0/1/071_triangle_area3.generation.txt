Here's a Julia function that calculates the area of a triangle given the lengths of its three sides, following the specifications you provided:

```julia
function triangle_area3(a::Number, b::Number, c::Number)::Number
    # Check if the sides form a valid triangle
    if a + b <= c || a + c <= b || b + c <= a
        return -1
    end
    
    # Calculate semi-perimeter
    s = (a + b + c) / 2
    
    # Calculate area using Heron's formula
    area = sqrt(s * (s - a) * (s - b) * (s - c))
    
    # Round to 2 decimal points
    return round(area, digits=2)
end
```

This function does the following:

1. First, it checks if the given side lengths form a valid triangle. This is done by checking if the sum of any two sides is greater than the third side. If this condition is not met, the function returns -1.

2. If the triangle is valid, it calculates the semi-perimeter `s` as `(a + b + c) / 2`.

3. It then uses Heron's formula to calculate the area of the triangle: 
   `âˆš(s * (s-a) * (s-b) * (s-c))`, where `s` is the semi-perimeter.

4. Finally, it rounds the result to 2 decimal points using the `round()` function with the `digits` parameter set to 2.

This function will work correctly for the given examples:

```julia
julia> triangle_area3(3, 4, 5)
6.0

julia> triangle_area3(1, 2, 10)
-1
```

It will also work for other valid and invalid triangles, always returning the area rounded to 2 decimal places for valid triangles, and -1 for invalid ones.