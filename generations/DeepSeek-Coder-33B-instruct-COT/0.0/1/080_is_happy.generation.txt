Here is a step-by-step outline of the function:

1. Check if the length of the string is less than 3. If it is, return false.
2. Iterate over the string, taking every 3 consecutive letters at a time.
3. Check if the 3 letters are distinct. If they are not, return false.
4. If all 3-letter combinations are distinct, return true.

Here is the Julia code implementing the above steps:

```julia
function is_happy(s::String)::Bool
    if length(s) < 3
        return false
    end

    for i in 1:(length(s)-2)
        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]
            return false
        end
    end

    return true
end
```

This function works by first checking if the length of the string is less than 3. If it is, it immediately returns false, as a string of length less than 3 cannot be happy.

Then, it iterates over the string, taking every 3 consecutive letters at a time. For each set of 3 letters, it checks if any two of them are the same. If they are, it immediately returns false, as the string is not happy.

If it goes through all the sets of 3 letters without finding any that are the same, it returns true, indicating that the string is happy.
