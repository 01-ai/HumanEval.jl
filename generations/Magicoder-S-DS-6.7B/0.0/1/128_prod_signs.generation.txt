Here is a Julia function that implements the `prod_signs` function as described in the problem:

```julia
function prod_signs(xs::Vector{Int})::Union{Nothing,Int}
    if isempty(xs)
        return nothing
    end

    sign_product = 1
    sum_magnitudes = 0

    for x in xs
        if x < 0
            sign_product *= -1
        elseif x > 0
            sign_product *= 1
        end
        sum_magnitudes += abs(x)
    end

    return sign_product * sum_magnitudes
end
```

This function first checks if the input array `xs` is empty. If it is, the function returns `nothing`.

If the array is not empty, the function initializes `sign_product` to 1 and `sum_magnitudes` to 0. It then iterates over each element `x` in the array. If `x` is negative, it multiplies `sign_product` by -1. If `x` is positive, it leaves `sign_product` unchanged. It also adds the absolute value of `x` to `sum_magnitudes`.

Finally, the function returns the product of `sign_product` and `sum_magnitudes`.