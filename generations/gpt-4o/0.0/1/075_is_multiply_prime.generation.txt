To implement the `is_multiply_prime` function, we need to check if the given number can be expressed as the product of exactly three prime numbers. Here's how we can do it:

1. Generate a list of prime numbers less than 100.
2. Iterate through all possible combinations of three primes.
3. Check if the product of any combination equals the given number.

Here's the implementation in Julia:

```julia
function is_multiply_prime(a::Int)::Bool
    # List of prime numbers less than 100
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    
    # Iterate through all combinations of three primes
    for i in 1:length(primes)
        for j in i+1:length(primes)
            for k in j+1:length(primes)
                if primes[i] * primes[j] * primes[k] == a
                    return true
                end
            end
        end
    end
    
    return false
end

# Example usage
println(is_multiply_prime(30))  # Should print true
```

This function first creates a list of all prime numbers less than 100. It then uses three nested loops to iterate through all possible combinations of three different primes. If the product of any combination matches the input number `a`, the function returns `true`. If no such combination is found, it returns `false`.