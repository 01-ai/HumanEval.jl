To implement the `numerical_letter_grade` function in Julia, we need to map each GPA to its corresponding letter grade based on the provided table. We can achieve this by iterating through the list of GPAs and using conditional checks to determine the appropriate letter grade for each GPA.

Here's the implementation of the function:

```julia
function numerical_letter_grade(grades::Vector{Float64})::Vector{String}
    letter_grades = String[]
    for gpa in grades
        if gpa > 4.0
            push!(letter_grades, "A+")
        elseif gpa > 3.7
            push!(letter_grades, "A")
        elseif gpa > 3.3
            push!(letter_grades, "A-")
        elseif gpa > 3.0
            push!(letter_grades, "B+")
        elseif gpa > 2.7
            push!(letter_grades, "B")
        elseif gpa > 2.3
            push!(letter_grades, "B-")
        elseif gpa > 2.0
            push!(letter_grades, "C+")
        elseif gpa > 1.7
            push!(letter_grades, "C")
        elseif gpa > 1.3
            push!(letter_grades, "C-")
        elseif gpa > 1.0
            push!(letter_grades, "D+")
        elseif gpa > 0.7
            push!(letter_grades, "D")
        elseif gpa > 0.0
            push!(letter_grades, "D-")
        else
            push!(letter_grades, "E")
        end
    end
    return letter_grades
end
```

### Explanation:
1. **Initialization**: We initialize an empty vector `letter_grades` to store the resulting letter grades.
2. **Iteration**: We iterate over each GPA in the input `grades` vector.
3. **Conditional Checks**: For each GPA, we use a series of `if-elseif` statements to determine the corresponding letter grade based on the provided table.
4. **Appending Results**: We use the `push!` function to append the determined letter grade to the `letter_grades` vector.
5. **Return**: Finally, we return the `letter_grades` vector containing the letter grades for all the input GPAs