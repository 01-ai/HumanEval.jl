Here's the implementation of the `is_prime` function in Julia:

```julia
function is_prime(n::Int)
    if n <= 1
        return false
    elseif n <= 3
        return true
    elseif n % 2 == 0 || n % 3 == 0
        return false
    end
    i = 5
    while i * i <= n
        if n % i == 0 || n % (i + 2) == 0
            return false
        end
        i += 6
    end
    return true
end
```

This function checks if a number `n` is prime by first handling the special cases (numbers less than 2, and numbers 2 and 3). It then checks divisibility by 2 and 3. For numbers greater than 3, it uses a loop to check divisibility starting from 5, incrementing by 6 each time (checking `i` and `i + 2` in each iteration), which efficiently covers all potential prime factors up to the square root of `n`.