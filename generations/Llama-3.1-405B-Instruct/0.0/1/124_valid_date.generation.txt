Here is a Julia function that implements the `valid_date` function as described in the docstring:
```julia
function valid_date(date::String)::Bool
    # Check if the date string is not empty
    if isempty(date)
        return false
    end

    # Split the date string into month, day, and year
    parts = split(date, '-')
    if length(parts) != 3
        return false
    end

    # Parse the month, day, and year into integers
    month, day, year = tryparse.(Int, parts)
    if any(isnothing, [month, day, year])
        return false
    end

    # Check if the month is valid
    if month < 1 || month > 12
        return false
    end

    # Check if the day is valid based on the month
    if month in [1, 3, 5, 7, 8, 10, 12]
        if day < 1 || day > 31
            return false
        end
    elseif month in [4, 6, 9, 11]
        if day < 1 || day > 30
            return false
        end
    elseif month == 2
        if day < 1 || day > 29
            return false
        end
    end

    # If all checks pass, the date is valid
    return true
end
```
Here's an explanation of the implementation:

1. We first check if the input date string is not empty. If it is, we immediately return `false`.
2. We split the date string into three parts using the `-` character as a delimiter. If the resulting array does not have exactly three elements, we return `false`.
3. We attempt to parse each part into an integer using `tryparse`. If any of the parses fail, we return `false`.
4. We check if the month is within the valid range of 1 to 12. If not, we return `false`.
5. We check if the day is within the valid range based on the month. If not, we return `false`.
6. If all checks pass, we return `true`, indicating that the date is valid.

You can test this function using the examples provided in the docstring:
```julia
println(valid_date("03-11-2000"))  # true
println(valid_date("15-01-2012"))  # false
println(valid_date("04-0-2040"))   # false
println(valid_date("06-04-2020"))  # true
println(valid_date("06/04/2020"))  # false
```