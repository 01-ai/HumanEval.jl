 Certainly! Below is the implementation of the `count_up_to` function in Julia, which returns an array of the first `n` integers that are prime numbers and less than `n`.

```julia
"""
    count_up_to(n::Int)::Vector{Int}

Implement a function that takes an non-negative integer and returns an array of
the first n integers that are prime numbers and less than n.

# Example

```jldoctest
julia> count_up_to(5)
2-element Vector{Int64}:
 2
 3

julia> count_up_to(11)
4-element Vector{Int64}:
 2
 3
 5
 7

julia> count_up_to(0)
Int64[]

julia> count_up_to(20)
8-element Vector{Int64}:
  2
  3
  5
  7
 11
 13
 17
 19

julia> count_up_to(1)
Int64[]

julia> count_up_to(18)
7-element Vector{Int64}:
  2
  3
  5
  7
 11
 13
 17
```
"""
function count_up_to(n::Int)::Vector{Int}
    function is_prime(num::Int)::Bool
        if num <= 1
            return false
        end
        for i in 2:isqrt(num)
            if num % i == 0
                return false
            end
        end
        return true
    end

    primes = Int[]
    for i in 2:(n-1)
        if is_prime(i)
            push!(primes, i)
        end
    end
    return primes
end
```

### Explanation:
1. **is_prime Function**: This helper function checks if a number is prime. It returns `false` for numbers less than or equal to 1. For other numbers, it checks divisibility from 2 up to the square root of the number.
2. **count_up_to Function**: This function initializes an empty array `primes`. It then iterates from 2 to `n-1`, checking each number for primality using the `is_prime` function. If a number is prime, it is added to the `primes` array.
3. **Return Value**: The function returns the array of prime numbers that are less than `n`.

This implementation ensures that the function behaves as expected according to the provided examples.