Here is a Julia function that implements the required functionality:

```julia
function encode_swap(message::String)::String
    vowels = "aeiou"
    encoded_message = ""
    for char in message
        if isletter(char)
            if char in vowels
                char = char == 'u' ? 'a' : Char(Int(char) + 2)
                char = isuppercase(char) ? uppercase(char) : lowercase(char)
            else
                char = isuppercase(char) ? lowercase(char) : uppercase(char)
            end
        end
        encoded_message *= string(char)
    end
    return encoded_message
end
```

This function works by iterating over each character in the input message. If the character is a letter, it checks if it is a vowel. If it is, it finds the character that appears 2 places after it in the alphabet, and if the original character was uppercase, it converts the new character to uppercase. If the original character was lowercase, it converts the new character to lowercase. If the character is not a vowel, it simply swaps its case. The encoded character is then added to the encoded message.

The function finally returns the encoded message.
