Here's a Julia function that implements the described behavior:

```julia
function sorted_list_sum(xs::Vector{String})::Vector{String}
    # Filter out strings with odd lengths
    even_length_strings = filter(x -> iseven(length(x)), xs)
    
    # Sort the filtered list first by length, then alphabetically
    sorted_strings = sort(even_length_strings, by = x -> (length(x), x))
    
    return sorted_strings
end
```

Let's break down the function:

1. **Filtering Strings with Odd Lengths**:
   - We use the `filter` function to keep only the strings with even lengths. The predicate `x -> iseven(length(x))` checks if the length of each string `x` is even.

2. **Sorting the Filtered List**:
   - We use the `sort` function with a custom sorting key `by = x -> (length(x), x)`. This sorts the strings first by their length and then alphabetically for strings of the same length.

3. **Returning the Result**:
   - The sorted list of strings is returned.

### Examples

Let's test the function with the provided examples:

```julia
println(sorted_list_sum(["aa", "a", "aaa"]))  # Output: ["aa"]
println(sorted_list_sum(["ab", "a", "aaa", "cd"]))  # Output: ["ab", "cd"]
```

This function should work correctly for the given problem statement.