Here is a Julia function that implements the specified behavior:
```julia
"""
    n_digits_in_binary(N::Int)::String

Given a positive integer N, return the total sum of its digits in binary.

@N integer Constraints: 0 â‰¤ N â‰¤ 10000.

# Examples

```jldoctest
julia> n_digits_in_binary(1000)
"1"

julia> n_digits_in_binary(150)
"110"

julia> n_digits_in_binary(147)
"1100"
```
"""
function n_digits_in_binary(N::Int)::String
    # Convert the integer to binary and remove the '0b' prefix
    binary_str = string(N, base = 2)
    
    # Calculate the sum of the digits in binary
    sum_of_digits = sum(parse(Int, digit) for digit in binary_str)
    
    # Convert the sum back to binary and return as a string
    return string(sum_of_digits, base = 2)
end
```
Here's an explanation of the code:

1. We first convert the input integer `N` to a binary string using the `string` function with `base = 2`. This gives us a string like "10101010".
2. We then calculate the sum of the digits in the binary string using a generator expression. We parse each character in the string as an integer using `parse(Int, digit)`, and sum them up using the `sum` function.
3. Finally, we convert the sum back to a binary string using the `string` function with `base = 2`, and return the result.

You can test this function using the examples provided in the docstring:
```julia
julia> n_digits_in_binary(1000)
"1"

julia> n_digits_in_binary(150)
"110"

julia> n_digits_in_binary(147)
"1100"
```