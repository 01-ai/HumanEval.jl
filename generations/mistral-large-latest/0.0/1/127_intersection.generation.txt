Sure, here is the Julia function that meets your requirements:

```julia
function intersection(interval1::Vector{Int}, interval2::Vector{Int})::String
    start1, end1 = interval1
    start2, end2 = interval2

    # Calculate the intersection
    inter_start = max(start1, start2)
    inter_end = min(end1, end2)

    # Check if the intervals intersect
    if inter_start > inter_end
        return "NO"
    end

    # Calculate the length of the intersection
    inter_length = inter_end - inter_start + 1

    # Check if the length is a prime number
    if inter_length < 2
        return "NO"
    elseif inter_length == 2
        return "YES"
    else
        for i in 2:isqrt(inter_length)
            if inter_length % i == 0
                return "NO"
            end
        end
        return "YES"
    end
end
```

This function first calculates the intersection of the two intervals. If the intervals do not intersect, it returns "NO". If they do intersect, it calculates the length of the intersection and checks if this length is a prime number. If it is, it returns "YES", otherwise it returns "NO".