Certainly! Below is the Julia function `find_closest_elements` that implements the functionality described in the doc string:

```julia
function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}
    # Sort the numbers to make it easier to find the closest pair
    sorted_numbers = sort(numbers)
    
    # Initialize variables to store the closest pair and the smallest difference
    closest_pair = (sorted_numbers[1], sorted_numbers[2])
    smallest_difference = abs(sorted_numbers[2] - sorted_numbers[1])
    
    # Iterate through the sorted numbers to find the closest pair
    for i in 2:length(sorted_numbers)-1
        current_difference = abs(sorted_numbers[i+1] - sorted_numbers[i])
        if current_difference < smallest_difference
            smallest_difference = current_difference
            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])
        end
    end
    
    return closest_pair
end
```

You can test this function with the provided examples to ensure it works as expected:

```julia
println(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) # Should return (2.0, 2.2)
println(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) # Should return (2.0, 2.0)
```

This function first sorts the list of numbers, then iterates through the sorted list to find the pair of adjacent numbers with the smallest difference, which will be the closest pair.