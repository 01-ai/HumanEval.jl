To implement the `find_closest_elements` function in Julia, we can follow these steps:

1. Sort the input vector of numbers.
2. Iterate through the sorted vector to find the pair of elements that are closest to each other.
3. Return the pair in order (smaller number, larger number).

Here's how the implementation might look:

```julia
function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}
    # Step 1: Sort the input vector
    sorted_numbers = sort(numbers)
    
    # Initialize variables to store the closest pair found and the smallest difference found
    closest_pair = (sorted_numbers[1], sorted_numbers[2])
    smallest_difference = abs(sorted_numbers[2] - sorted_numbers[1])
    
    # Step 2: Iterate through the sorted vector to find the closest pair
    for i in 2:length(sorted_numbers)-1
        current_difference = abs(sorted_numbers[i+1] - sorted_numbers[i])
        if current_difference < smallest_difference
            smallest_difference = current_difference
            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])
        end
    end
    
    # Step 3: Return the closest pair found
    return closest_pair
end
```

This function first sorts the input vector to ensure that we only need to check adjacent elements to find the closest pair. It then iterates through the sorted vector, keeping track of the closest pair found so far. Finally, it returns the closest pair found.