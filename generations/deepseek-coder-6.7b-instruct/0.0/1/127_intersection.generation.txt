Here is the Julia function that solves the problem:

```julia
function intersection(interval1::Vector{Int}, interval2::Vector{Int})::String
    # Check if the intervals intersect
    if interval1[2] < interval2[1] || interval2[2] < interval1[1]
        return "NO"
    end

    # Calculate the intersection
    intersection_start = max(interval1[1], interval2[1])
    intersection_end = min(interval1[2], interval2[2])

    # Calculate the length of the intersection
    intersection_length = intersection_end - intersection_start + 1

    # Check if the length of the intersection is a prime number
    if intersection_length < 2
        return "NO"
    end

    for i in 2:isqrt(intersection_length)
        if intersection_length % i == 0
            return "NO"
        end
    end

    return "YES"
end
```

This function first checks if the intervals intersect. If they don't, it returns "NO". If they do, it calculates the intersection and its length. If the length is less than 2 or if it is divisible by any number from 2 to its square root, it returns "NO". Otherwise, it returns "YES".

Please note that the `isqrt` function is used to calculate the integer square root of a number, which is the largest integer less than or equal to the square root of the number. This is used to optimize the prime check by only checking divisors up to the square root of the number.
