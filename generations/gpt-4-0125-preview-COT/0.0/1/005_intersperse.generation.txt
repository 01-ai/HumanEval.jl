### Outline for Implementing `intersperse` Function

1. **Initialize an empty vector** to store the result. This vector will eventually contain the original numbers interspersed with the delimiter.

2. **Check if the input vector is empty**. If it is, return the empty result vector immediately, as there's nothing to intersperse.

3. **Iterate through the input vector**. For each element except the last one:
   - Append the current element to the result vector.
   - Append the delimiter to the result vector.

4. **Append the last element** of the input vector to the result vector. This step is necessary because we don't want to follow the last element with a delimiter.

5. **Return the result vector**.

### Julia Code Implementation

```julia
function intersperse(numbers::Vector{Int}, delimiter::Int)::Vector{Int}
    # Step 1: Initialize an empty vector for the result
    result = Int[]

    # Step 2: Check if the input vector is empty
    if isempty(numbers)
        return result
    end

    # Step 3: Iterate through the input vector
    for i in 1:length(numbers)-1
        push!(result, numbers[i])  # Append current element
        push!(result, delimiter)   # Append delimiter
    end

    # Step 4: Append the last element
    push!(result, numbers[end])

    # Step 5: Return the result vector
    return result
end
```

This implementation follows the outlined steps to intersperse a delimiter between every two consecutive elements of the input vector, ensuring that the delimiter does not follow the last element.