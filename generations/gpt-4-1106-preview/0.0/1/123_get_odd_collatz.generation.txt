Here's the Julia function `get_odd_collatz` that implements the given doc string:

```julia
function get_odd_collatz(n::Int)::Vector{BigInt}
    # Initialize the sequence with the starting number n
    collatz_sequence = BigInt[n]
    current = BigInt(n)
    
    # Generate the Collatz sequence until it reaches 1
    while current != 1
        if current % 2 == 0
            current รท= 2
        else
            current = 3*current + 1
            push!(collatz_sequence, current)  # Add only odd numbers to the sequence
        end
    end
    
    # Sort the sequence of odd numbers and return
    return sort(unique(collatz_sequence))
end

# Example usage:
println(get_odd_collatz(5))  # Output should be [1, 5]
```

This function starts with the initial number `n` and generates the Collatz sequence, adding only the odd numbers to the `collatz_sequence` array. It uses `BigInt` to avoid integer overflow for large values of `n`. After the sequence reaches 1, it returns the sorted list of unique odd numbers encountered in the sequence.