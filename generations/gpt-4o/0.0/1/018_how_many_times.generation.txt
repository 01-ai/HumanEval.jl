Sure, here is the implementation of the `how_many_times` function in Julia:

```julia
function how_many_times(s::String, sub_s::String)::Int
    count = 0
    len_sub_s = length(sub_s)
    
    if len_sub_s == 0
        return 0
    end
    
    for i in 1:(length(s) - len_sub_s + 1)
        if s[i:i+len_sub_s-1] == sub_s
            count += 1
        end
    end
    
    return count
end
```

This function iterates through the original string `s` and checks for occurrences of the substring `sub_s`, including overlapping cases. It increments the count each time it finds a match. The function handles edge cases such as an empty substring by returning 0 immediately.