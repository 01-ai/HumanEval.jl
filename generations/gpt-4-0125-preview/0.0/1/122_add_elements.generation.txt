To implement the `add_elements` function as described, we need to iterate through the first `k` elements of the input vector `xs`, check if each element has at most two digits, and if so, add it to a running total. Finally, we return the total sum. Here's how you can do it in Julia:

```julia
function add_elements(xs::Vector{Int}, k::Int)::Int
    # Initialize the sum to 0
    sum = 0
    
    # Iterate through the first k elements of xs
    for i in 1:k
        # Check if the current element has at most two digits
        if xs[i] >= -99 && xs[i] <= 99
            # Add the element to the sum
            sum += xs[i]
        end
    end
    
    # Return the total sum
    return sum
end
```

This function starts by initializing a variable `sum` to 0. It then iterates through the first `k` elements of the input vector `xs`, checking for each element if it is within the range `[-99, 99]` (inclusive), which means it has at most two digits (considering both positive and negative numbers). If an element meets this criterion, it is added to `sum`. After the loop, the function returns the total `sum`.

This implementation assumes that the input constraints are always met, as specified in the doc string.