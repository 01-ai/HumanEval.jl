Here is a step-by-step outline of the function:

1. Initialize a variable `sum` to 0.
2. Iterate over the list `xs` with an index `i`.
3. If `i` is a multiple of 3, square the `i`-th element of `xs` and add it to `sum`.
4. If `i` is a multiple of 4 and not a multiple of 3, cube the `i`-th element of `xs` and add it to `sum`.
5. If `i` is not a multiple of 3 or 4, add the `i`-th element of `xs` to `sum`.
6. Return `sum`.

Here is the Julia code implementing the function:

```julia
function sum_squares(xs::Vector{Int})::Int
    sum = 0
    for (i, x) in enumerate(xs)
        if i % 3 == 0
            sum += x^2
        elseif i % 4 == 0
            sum += x^3
        else
            sum += x
        end
    end
    return sum
end
```

This function works by iterating over the list `xs` with an index `i`. If `i` is a multiple of 3, the function squares the `i`-th element of `xs` and adds it to `sum`. If `i` is a multiple of 4 and not a multiple of 3, the function cubes the `i`-th element of `xs` and adds it to `sum`. If `i` is not a multiple of 3 or 4, the function adds the `i`-th element of `xs` to `sum`. Finally, the function returns `sum`.
