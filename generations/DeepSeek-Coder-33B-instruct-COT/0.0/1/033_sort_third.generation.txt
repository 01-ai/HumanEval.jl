Here is a step-by-step outline of how you can implement the `sort_third` function in Julia:

1. Initialize an empty list `l'`.
2. Iterate over the indices of `l`.
3. If the index is divisible by three, append the corresponding value of `l` to `l'`.
4. If the index is not divisible by three, append the value of `l` at the same index to `l'`.
5. After iterating over all indices, sort `l'` in ascending order.
6. Return `l'`.

Here is the Julia code that implements the above steps:

```julia
function sort_third(l::Vector)
    l_prime = []
    for i in 1:length(l)
        if i % 3 == 0
            push_val = l[i]
            push_val in l_prime ? push_val : push_val
        else
            push_val = l[i]
            push_val in l_prime ? push_val : push_val
        end
        push_val in l_prime ? push_val : push_val
    end
    sort(l_prime)
end
```

Please note that the `push_val in l_prime ? push_val : push_val` is a ternary operator that checks if `push_val` is already in `l_prime`. If it is, it does nothing, otherwise, it pushes `push_val` into `l_prime`.

Also, the `sort(l_prime)` function sorts the list `l_prime` in ascending order.

Please test the function with the given examples:

```julia
julia> sort_third([1, 2, 3])
3-element Vector{Int64}:
 1
 2
 3

julia> sort_third([5, 6, 3, 4, 8, 9, 2])
7-element Vector{Int64}:
 5
 6
 3
 4
 8
 9
 2
```
