Here's the implementation of the `max_element` function in Julia to find the maximum element in a list:

```julia
function max_element(xs)
    if isempty(xs)
        error("Cannot find maximum element in an empty list.")
    end
    
    max_val = xs[1]
    for x in xs
        if x > max_val
            max_val = x
        end
    end
    
    return max_val
end
```

Explanation:
1. We start by checking if the input list `xs` is empty using the `isempty` function. If it is empty, we raise an error since we cannot find the maximum element in an empty list.

2. We initialize a variable `max_val` with the first element of the list `xs[1]`. This will serve as the initial maximum value.

3. We iterate over each element `x` in the list `xs` using a `for` loop.

4. Inside the loop, we compare each element `x` with the current maximum value `max_val`. If `x` is greater than `max_val`, we update `max_val` with the value of `x`.

5. After the loop finishes, `max_val` will hold the maximum element in the list.

6. Finally, we return `max_val` as the result of the function.

The function works as follows:
- It initializes `max_val` with the first element of the list.
- It iterates over each element in the list and updates `max_val` whenever a larger element is encountered.
- After the loop, `max_val` will hold the maximum element in the list, which is then returned.

You can test the function with the provided examples:

```julia
julia> max_element([1, 2, 3])
3

julia> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
123
```

The function will raise an error if the input list is empty:

```julia
julia> max_element([])
ERROR: Cannot find maximum element in an empty list.
```

This implementation has a time complexity of O(n), where n is the number of elements in the list, as it iterates over each element once to find the maximum value.