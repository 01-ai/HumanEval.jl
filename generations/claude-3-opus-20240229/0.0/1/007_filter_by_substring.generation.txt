Here's the implementation of the `filter_by_substring` function in Julia:

```julia
function filter_by_substring(strings::Vector{String}, substring::AbstractString)::Vector{String}
    return filter(s -> occursin(substring, s), strings)
end
```

Explanation:
- The function takes two arguments:
  - `strings`: a vector of strings to be filtered.
  - `substring`: the substring to search for in each string.
- The function uses the `filter` function from the Julia standard library to filter the `strings` vector.
- The `filter` function takes a predicate function as its first argument. In this case, we define an anonymous function using the arrow notation `s -> ...`.
- Inside the anonymous function, we use the `occursin` function to check if the `substring` occurs in each string `s`.
- The `filter` function returns a new vector containing only the strings that satisfy the predicate, i.e., the strings that contain the `substring`.
- Finally, the function returns the filtered vector of strings.

The function signature specifies that the input `strings` should be a `Vector{String}`, and the `substring` can be any `AbstractString` (e.g., `String` or `SubString`). The return type is also specified as `Vector{String}`.

The provided examples can be used to test the function:

```jldoctest
julia> filter_by_substring(String[], "a")
String[]

julia> filter_by_substring(["abc", "bacd", "cde", "array"], "a")
3-element Vector{String}:
 "abc"
 "bacd"
 "array"
```

The function correctly filters the input vector of strings based on the presence of the given substring.