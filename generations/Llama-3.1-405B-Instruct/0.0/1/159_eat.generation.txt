Here is the Julia function that meets the requirements:
```julia
function eat(number::Int, need::Int, remaining::Int)::Vector{Int}
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]
end
```
Let me explain what the code does:

1. `total_eaten` is calculated by adding the number of carrots already eaten (`number`) to the minimum of the number of carrots needed (`need`) and the number of remaining carrots (`remaining`). This ensures that the rabbit eats as many carrots as needed, but not more than what's available.
2. `carrots_left` is calculated by subtracting the number of carrots needed (`need`) from the number of remaining carrots (`remaining`). If the result is negative (i.e., there aren't enough carrots to meet the need), `max(0, ...)` ensures that the result is 0, indicating that all remaining carrots were eaten.
3. The function returns a vector containing `total_eaten` and `carrots_left`.

You can test the function with the examples provided in the docstring to see that it produces the expected output.