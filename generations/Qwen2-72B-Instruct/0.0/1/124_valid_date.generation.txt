```julia
import Dates

function valid_date(date::String)::Bool
    # Check if the date string is empty
    if isempty(date)
        return false
    end

    # Check if the date string is in the correct format
    if !matches(r"^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-\d{4}$", date)
        return false
    end

    # Parse the date string
    try
        d = Dates.parse(Dates.Date, date, "m-d-yyyy")
    catch
        return false
    end

    # Check the number of days for each month
    month = Dates.month(d)
    day = Dates.day(d)

    if month in [1, 3, 5, 7, 8, 10, 12] && !(1 <= day <= 31)
        return false
    elseif month in [4, 6, 9, 11] && !(1 <= day <= 30)
        return false
    elseif month == 2 && !(1 <= day <= 29)
        return false
    end

    return true
end
```

This function first checks if the date string is empty. Then, it checks if the date string is in the correct format using a regular expression. If the date string is not in the correct format, the function returns false. If the date string is in the correct format, the function attempts to parse the date string using the `Dates.parse` function. If parsing fails, the function returns false. Finally, the function checks the number of days for each month and returns false if the number of days is invalid. If all checks pass, the function returns true.