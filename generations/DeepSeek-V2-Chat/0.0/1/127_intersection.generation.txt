To implement the `intersection` function as described, we need to follow these steps:

1. Determine the intersection of the two intervals.
2. Calculate the length of the intersection.
3. Check if the length of the intersection is a prime number.
4. Return "YES" if the length is prime, otherwise return "NO".

Here's the implementation in Julia:

```julia
function intersection(interval1::Vector{Int}, interval2::Vector{Int})::String
    # Extract start and end points of the intervals
    start1, end1 = interval1
    start2, end2 = interval2
    
    # Find the intersection of the two intervals
    start_intersection = max(start1, start2)
    end_intersection = min(end1, end2)
    
    # Check if there is an intersection
    if start_intersection > end_intersection
        return "NO"
    end
    
    # Calculate the length of the intersection
    length_intersection = end_intersection - start_intersection + 1
    
    # Check if the length of the intersection is a prime number
    if is_prime(length_intersection)
        return "YES"
    else
        return "NO"
    end
end

# Helper function to check if a number is prime
function is_prime(n::Int)::Bool
    if n <= 1
        return false
    elseif n <= 3
        return true
    elseif n % 2 == 0 || n % 3 == 0
        return false
    end
    i = 5
    while i * i <= n
        if n % i == 0 || n % (i + 2) == 0
            return false
        end
        i += 6
    end
    return true
end
```

This implementation includes a helper function `is_prime` to check if a number is prime. The main function `intersection` calculates the intersection of the two intervals, checks if the intersection exists, calculates the length of the intersection, and then checks if this length is a prime number.