Here is a Julia function that implements the functionality described in the docstring:

```julia
function generate_integers(a::Int, b::Int)::Vector{Int}
    # Ensure a is less than or equal to b for the range
    if a > b
        a, b = b, a
    end

    # Generate the range of numbers and filter for even digits
    evens = [i for i in a:b if iseven(i)]
    
    return evens
end
```

This function first checks if `a` is greater than `b` and swaps them if necessary to ensure the range is correctly defined. It then generates a vector of integers within the range `[a, b]` and filters this vector to keep only the even numbers. The resulting vector of even numbers is then returned. 

However, the function as described in the docstring seems to imply that it should return even digits, not even numbers. If the intention is to return digits, the implementation would be different. If we interpret the task as returning even digits (i.e., 0, 2, 4, 6, 8) found within the numbers in the range, we would need to modify the function accordingly. Here's how you might do that:

```julia
function generate_integers(a::Int, b::Int)::Vector{Int}
    # Ensure a is less than or equal to b for the range
    if a > b
        a, b = b, a
    end

    # Generate the range of numbers and extract digits
    digits = [parse(Int, d) for i in a:b for d in string(i)]

    # Filter for even digits and sort
    evens = sort!(filter(d -> iseven(d), digits))
    
    return evens
end
```

This version of the function extracts all digits from the numbers in the range, filters for even digits, and returns them in sorted order. Note that the `sort!` function is used to sort the array in place, which is more efficient than creating a new sorted array.