Here is the Julia function that solves the problem:

```julia
function is_multiply_prime(a::Int)::Bool
    if a < 2
        return false
    end

    function is_prime(n)
        if n == 2 || n == 3
            return true
        end
        if n < 2 || n % 2 == 0
            return false
        end
        for i in 3:2:isqrt(n)
            if n % i == 0
                return false
            end
        end
        return true
    end

    factors = Int[]
    for i in 2:a
        if a % i == 0 && is_prime(i)
            push(factors, i)
        end
    end

    return length(factors) == 3
end
```

This function first checks if the number is less than 2, in which case it returns `false`. Then it checks if the number is a prime number. If it is, it adds it to the list of factors. Finally, it checks if the number of factors is 3, and returns `true` if it is.

Please note that the function `is_prime` is a helper function that checks if a number is prime. It uses the fact that a prime number is a number that has only two distinct positive divisors: 1 and itself.
