Here's a solution to the problem of separating groups of nested parentheses in Julia:

```julia
function separate_paren_groups(paren_string::String)::Vector{String}
    result = Vector{String}()
    current_group = ""
    balance = 0

    for char in paren_string
        if char == '('
            balance += 1
            current_group *= char
        elseif char == ')'
            balance -= 1
            current_group *= char
            if balance == 0
                push!(result, current_group)
                current_group = ""
            end
        end
    end

    return result
end
```

Explanation:
1. We define the function `separate_paren_groups` that takes a string `paren_string` as input and returns a vector of strings.

2. We initialize an empty vector `result` to store the separated groups of parentheses.

3. We initialize an empty string `current_group` to store the current group of parentheses being processed.

4. We initialize a variable `balance` to keep track of the balance of opening and closing parentheses. It starts at 0.

5. We iterate over each character `char` in the input string `paren_string`:
   - If the character is an opening parenthesis '(', we increment the `balance` by 1 and append the character to the `current_group`.
   - If the character is a closing parenthesis ')', we decrement the `balance` by 1 and append the character to the `current_group`.
   - If the `balance` becomes 0 after appending a closing parenthesis, it means we have found a complete group of parentheses. We add the `current_group` to the `result` vector and reset the `current_group` to an empty string.

6. Finally, we return the `result` vector containing the separated groups of parentheses.

This solution has a time complexity of O(n), where n is the length of the input string, as we iterate over each character once. The space complexity is also O(n) in the worst case, as we store the separated groups in the `result` vector.

Example usage:
```julia
julia> separate_paren_groups("()((()))(()())")
3-element Vector{String}:
 "()"
 "((()))"
 "(()())"
```

The function correctly separates the groups of nested parentheses into separate strings and returns them as a vector.