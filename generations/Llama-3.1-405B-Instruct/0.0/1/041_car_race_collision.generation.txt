Here is a Julia function that implements the behavior described in the docstring:

```julia
"""
    car_race_collision(n::Int)::Int

Imagine a road that's a perfectly straight infinitely long line. `n` cars are
driving left to right; simultaneously, a different set of n cars are driving
right to left. The two sets of cars start out being very far from each other.
All cars move in the same speed. Two cars are said to collide when a car that's
moving left to right hits a car that's moving right to left. However, the cars
are infinitely sturdy and strong; as a result, they continue moving in their
trajectory as if they did not collide.

This function outputs the number of such collisions.
"""
function car_race_collision(n::Int)::Int
    # Since the cars are infinitely sturdy and continue moving as if they did not collide,
    # each car from the left set will collide with each car from the right set exactly once.
    # Therefore, the total number of collisions is simply the product of the number of cars in each set.
    return n * n
end
```

Example use case:

```julia
println(car_race_collision(3))  # Outputs: 9
```

In this example, there are 3 cars moving left to right and 3 cars moving right to left, resulting in a total of 9 collisions.