Here is the Julia function that solves the problem:

```julia
function specialFilter(nums::Vector{Int})::Int
    count = 0
    for num in nums
        if num > 10 && first_digit_odd(num) && last_digit_odd(num)
            count += 1
        end
    end
    return count
end

function first_digit_odd(num::Int)::Bool
    first_digit = parse(Int, string(num)[1])
    return first_digit in [1, 3, 5, 7, 9]
end

function last_digit_odd(num::Int)::Bool
    last_digit = num % 10
    return last_digit in [1, 3, 5, 7, 9]
end
```

This function works by iterating over each number in the input array. For each number, it checks if the number is greater than 10 and if the first and last digits of the number are odd. If both conditions are met, it increments a counter. At the end of the function, it returns the counter, which represents the number of elements in the array that meet the conditions.

The helper functions `first_digit_odd` and `last_digit_odd` are used to check if the first and last digits of a number are odd, respectively. They convert the number to a string to get the first digit, and use the modulus operator to get the last digit.
