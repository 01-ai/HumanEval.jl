Sure, here is the Julia function that implements the rolling maximum element in a sequence:

```julia
function rolling_max(numbers::Vector{Int})::Vector{Int}
    rolling_max_seq = Vector{Int}()
    max_so_far = typemin(Int)
    for number in numbers
        max_so_far = max(max_so_far, number)
        push!(rolling_max_seq, max_so_far)
    end
    return rolling_max_seq
end
```

This function works by initializing an empty vector `rolling_max_seq` to store the rolling maximum and a variable `max_so_far` to keep track of the maximum number seen so far. It then iterates over each number in the input vector `numbers`, updating `max_so_far` if a larger number is found, and appending `max_so_far` to `rolling_max_seq`. Finally, it returns `rolling_max_seq`.