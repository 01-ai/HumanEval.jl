To implement the `parse_nested_parens` function as described, we need to iterate through each group of parentheses in the input string, count the levels of nesting, and keep track of the maximum depth for each group. Here's how you can do it in Julia:

```julia
function parse_nested_parens(paren_string::String)::Vector{Int}
    # Split the input string into groups based on spaces
    groups = split(paren_string)
    # Initialize an empty vector to store the maximum depth of each group
    max_depths = Int[]

    # Iterate through each group
    for group in groups
        # Initialize counters for current depth and maximum depth
        current_depth = 0
        max_depth = 0

        # Iterate through each character in the group
        for char in group
            if char == '('
                # Increase current depth for an opening parenthesis
                current_depth += 1
                # Update maximum depth if current depth is greater
                max_depth = max(max_depth, current_depth)
            elseif char == ')'
                # Decrease current depth for a closing parenthesis
                current_depth -= 1
            end
        end

        # Append the maximum depth of the current group to the result vector
        push!(max_depths, max_depth)
    end

    return max_depths
end
```

This function works by splitting the input string into groups of parentheses, then iterating through each group to calculate the maximum depth of nesting. It uses a simple counter to keep track of the current depth as it iterates through each character, increasing the counter for an opening parenthesis '(' and decreasing it for a closing parenthesis ')'. The maximum depth encountered during this process is recorded for each group and returned as a vector of integers.