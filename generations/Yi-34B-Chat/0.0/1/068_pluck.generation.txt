```julia
function pluck(xs::Vector{Int})::Vector{Int}
    # Initialize an empty vector to store the result
    result = Vector{Int}()

    # Loop through the array and find the smallest even value
    for i in eachindex(xs)
        if xs[i] % 2 == 0 && (result == Vector{Int}() || xs[i] < result[1])
            # If the current value is even and smaller than the previously found even value,
            # or if there is no even value found yet, add it to the result
            push!(result, xs[i])
        end
    end

    # If there are no even values or the given array is empty, return an empty vector
    if result == Vector{Int}()
        return Int64[]
    end

    # If there are multiple even values, return the one with the smallest index
    return result[1] == result[end] ? [result[1], 1] : [result[1], findfirst(==(result[1]), xs).start]
end
```

This function `pluck` takes a vector of integers `xs` and returns a vector containing the smallest even value and its index in the original vector. If there are no even values or the given array is empty, it returns an empty vector.