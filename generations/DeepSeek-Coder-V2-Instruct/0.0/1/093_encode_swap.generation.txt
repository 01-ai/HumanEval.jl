 Here's the implementation of the `encode_swap` function in Julia:

```julia
function encode_swap(message::String)::String
    # Define vowels and their replacements
    vowels = ['a', 'e', 'i', 'o', 'u']
    replacements = ['c', 'g', 'k', 'q', 'w']
    
    # Function to swap case
    function swap_case(c::Char)::Char
        if islower(c)
            return uppercase(c)
        else
            return lowercase(c)
        end
    end
    
    # Function to replace vowels
    function replace_vowel(c::Char)::Char
        if c in vowels
            return replacements[findfirst(==(lowercase(c)), vowels)]
        else
            return c
        end
    end
    
    # Process each character in the message
    encoded_message = map(c -> replace_vowel(swap_case(c)), message)
    
    return join(encoded_message)
end
```

This function first defines the vowels and their corresponding replacements. It then defines two helper functions: `swap_case` to swap the case of a character and `replace_vowel` to replace vowels with the specified characters. Finally, it processes each character in the input message by swapping its case and replacing vowels, and returns the resulting string.