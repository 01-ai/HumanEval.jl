 Certainly! Below is the implementation of the `total_match` function in Julia based on the provided docstring:

```julia
"""
    total_match(xs::Vector{String}, ys::Vector{String})::Vector{String}

Write a function that accepts two lists of strings and returns the list that has
total number of chars in the all strings of the list less than the other list.

If the two lists have the same number of chars, return the first list.

# Examples

```jldoctest
julia> total_match(String[], String[])
String[]

julia> total_match(["hi", "admin"], ["hI", "Hi"])
2-element Vector{String}:
 "hI"
 "Hi"

julia> total_match(["hi", "admin"], ["hi", "hi", "admin", "project"])
2-element Vector{String}:
 "hi"
 "admin"

julia> total_match(["hi", "admin"], ["hI", "hi", "hi"])
3-element Vector{String}:
 "hI"
 "hi"
 "hi"

julia> total_match(["4"], ["1", "2", "3", "4", "5"])
1-element Vector{String}:
 "4"
```
"""
function total_match(xs::Vector{String}, ys::Vector{String})::Vector{String}
    total_chars_xs = sum(length, xs)
    total_chars_ys = sum(length, ys)

    if total_chars_xs < total_chars_ys
        return xs
    elseif total_chars_ys < total_chars_xs
        return ys
    else
        return xs
    end
end
```

This function calculates the total number of characters in each list of strings and compares them. It returns the list with the fewer total characters. If both lists have the same number of characters, it returns the first list.