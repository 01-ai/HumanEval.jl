Here's an efficient implementation of the fibfib function in Julia:

```julia
function fibfib(n::Int)::Int
    if n <= 1
        return 0
    elseif n == 2
        return 1
    end

    # Initialize the first three elements
    a, b, c = 0, 0, 1

    # Iterate to calculate the n-th element
    for _ in 3:n
        a, b, c = b, c, a + b + c
    end

    return c
end
```

This implementation uses an iterative approach with constant space complexity, which is more efficient than a recursive solution, especially for large values of n. Here's how it works:

1. We first handle the base cases:
   - If n is 0 or 1, we return 0.
   - If n is 2, we return 1.

2. For n > 2, we initialize three variables a, b, and c with the first three elements of the sequence (0, 0, and 1).

3. We then use a loop to iterate from 3 to n, updating these variables in each iteration:
   - a becomes the previous b
   - b becomes the previous c
   - c becomes the sum of previous a, b, and c (which is the definition of fibfib(n))

4. After the loop, c will contain the n-th element of the fibfib sequence, which we return.

This approach has a time complexity of O(n) and a space complexity of O(1), making it efficient even for large values of n.

You can test this function with the provided examples:

```julia
julia> fibfib(1)
0

julia> fibfib(5)
4

julia> fibfib(8)
24
```

These results match the expected output in the problem statement.