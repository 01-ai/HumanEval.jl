Sure, here's a Julia function that meets the requirements specified in the docstring:

```julia
function histogram(s::String)::Dict{String, Int}
    # Split the string into an array of lowercase letters
    letters = split(lowercase(s))

    # Initialize an empty dictionary to store the histogram
    hist = Dict{String, Int}()

    # Iterate over the letters in the array
    for letter in letters
        # If the letter is not in the dictionary, add it with a count of 1
        if !haskey(hist, letter)
            hist[letter] = 1
        # If the letter is already in the dictionary, increment its count
        else
            hist[letter] += 1
        end
    end

    # Find the maximum count in the dictionary
    max_count = maximum(values(hist))

    # Filter the dictionary to only include letters with the maximum count
    hist = Dict(letter => count for (letter, count) in hist if count == max_count)

    return hist
end
```

This function first splits the input string into an array of lowercase letters. It then iterates over these letters, adding them to a dictionary with a count of their occurrences. After all letters have been processed, it finds the maximum count in the dictionary and filters the dictionary to only include letters with this count. The filtered dictionary is then returned.