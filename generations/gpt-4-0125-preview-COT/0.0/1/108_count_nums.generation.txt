### Step-by-Step Outline

1. **Define the function** `count_nums` that takes a vector of integers as its argument.

2. **Iterate through each element** in the vector.

3. **For each element**, calculate the sum of its digits. Consider the following steps for this calculation:
   - Convert the integer to its absolute value to simplify digit extraction.
   - Extract each digit of the number. If the original number was negative, subtract twice the value of the first digit to account for the negative sign.
   - Sum the digits.

4. **Check if the sum of digits is greater than 0**. If so, increment a counter.

5. **Return the counter** after iterating through all elements in the vector.

### Julia Code Implementation

```julia
function count_nums(xs::Vector{Int})::Int
    # Initialize a counter to keep track of numbers with a sum of digits > 0
    count = 0
    
    # Iterate through each number in the vector
    for x in xs
        # Calculate the sum of digits, considering the sign of the number
        sum_digits = 0
        is_negative = x < 0
        for digit in string(abs(x))
            sum_digits += parse(Int, digit)
        end
        
        # If the number was negative, adjust the first digit's contribution
        if is_negative
            sum_digits -= 2 * parse(Int, string(abs(x))[1])
        end
        
        # Increment the counter if the sum of digits is greater than 0
        if sum_digits > 0
            count += 1
        end
    end
    
    # Return the count of numbers with a sum of digits > 0
    return count
end
```

This implementation follows the outlined steps, ensuring that the function works correctly for both positive and negative numbers, as well as considering the special rule for the first digit of negative numbers.