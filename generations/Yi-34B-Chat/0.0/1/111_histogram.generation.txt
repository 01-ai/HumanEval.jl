```julia
function histogram(s::String)::Dict{String, Int}
    # Initialize an empty dictionary to store the counts
    counts = Dict{String, Int}()

    # Loop over the characters in the string
    for c in s
        # If the character is not in the dictionary, add it with a count of 1
        if !haskey(counts, c)
            counts[c] = 1
        # If the character is already in the dictionary, increment its count
        else
            counts[c] += 1
        end
    end

    # Sort the dictionary by value (count) in descending order
    sorted_counts = sort(counts, by=values)

    # If there are multiple letters with the highest count, return them all
    if length(sorted_counts) > 1
        return Dict(sorted_counts[end])
    else
        # If there is only one letter with the highest count, return it
        return Dict(sorted_counts[1])
    end
end
```

This function `histogram` takes a `String` as input and returns a `Dict` where the keys are the letters and the values are their counts. If there are multiple letters with the highest count, it returns all of them. If the string is empty, it returns an empty `Dict`.