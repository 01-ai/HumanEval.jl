  Here's an implementation of the `cycpattern_check` function in Julia:
```julia
function cycpattern_check(a::String, b::String)::Bool
    # Check if b is a substring of a
    if occursin(b, a)
        return true
    end

    # Check if any rotation of b is a substring of a
    for i in 1:length(b)
        if occursin(b[i:end] * b[1:i-1], a)
            return true
        end
    end

    return false
end
```
Here's an explanation of the code:

1. The function takes two string arguments `a` and `b`.
2. It first checks if `b` is a substring of `a` using the `occursin` function. If it is, the function returns `true`.
3. If `b` is not a substring of `a`, the function checks if any rotation of `b` is a substring of `a`. It does this by iterating over the characters of `b` and checking if the rotation of `b` starting from each character is a substring of `a`. If any rotation is a substring of `a`, the function returns `true`.
4. If none of the rotations of `b` are substrings of `a`, the function returns `false`.

Here are some examples of how the function works:

* `cycpattern_check("abcd", "abd")` returns `false` because "abd" is not a substring of "abcd".
* `cycpattern_check("hello", "ell")` returns `true` because "ell" is a substring of "hello".
* `cycpattern_check("whassup", "psus")` returns `false` because "psus" is not a substring of "whassup".
* `cycpattern_check("abab", "baa")` returns `true` because "baa" is a substring of "abab".
* `cycpattern_check("efef", "eeff")` returns `false` because "eeff" is not a substring of "efef".
* `cycpattern_check("himenss", "simen")` returns `true` because "simen" is a substring of "himenss".