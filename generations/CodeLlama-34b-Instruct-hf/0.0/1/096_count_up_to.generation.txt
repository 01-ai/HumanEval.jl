  Here is an implementation of the `count_up_to` function in Julia:
```
function count_up_to(n::Int)::Vector{Int}
    prime_numbers = Int[]
    for i in 2:n
        if isprime(i)
            push!(prime_numbers, i)
        end
    end
    return prime_numbers
end
```
This function uses the `isprime` function from the `Primes` module to check if a number is prime. If a number is prime, it is added to the `prime_numbers` array. The function returns the `prime_numbers` array.

Here are some examples of how to use the `count_up_to` function:
```
julia> count_up_to(5)
2-element Vector{Int64}:
 2
 3

julia> count_up_to(11)
4-element Vector{Int64}:
 2
 3
 5
 7

julia> count_up_to(0)
Int64[]

julia> count_up_to(20)
8-element Vector{Int64}:
  2
  3
  5
  7
 11
 13
 17
 19

julia> count_up_to(1)
Int64[]

julia> count_up_to(18)
7-element Vector{Int64}:
  2
  3
  5
  7
 11
 13
 17
```
Note that the `count_up_to` function returns an empty array if the input is 0 or 1, as there are no prime numbers in that range.