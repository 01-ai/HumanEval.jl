 Here's the implementation of the `get_odd_collatz` function in Julia:

```julia
function get_odd_collatz(n::Int)::Vector{BigInt}
    # Initialize an empty vector to store the odd numbers in the Collatz sequence
    odd_numbers = Vector{BigInt}()
    
    # Start with the given number n
    current = BigInt(n)
    
    # Loop until we reach 1
    while current != 1
        # If the current number is odd, add it to the list
        if current % 2 != 0
            push!(odd_numbers, current)
        end
        
        # Apply the Collatz rule
        if current % 2 == 0
            current = current รท 2
        else
            current = 3 * current + 1
        end
    end
    
    # Add 1 to the list as the final step
    push!(odd_numbers, 1)
    
    # Return the sorted list of odd numbers
    return sort(odd_numbers)
end
```

This function starts with the given integer `n`, applies the Collatz sequence rules, and collects all the odd numbers encountered until it reaches 1. The collected odd numbers are then sorted and returned.