Here is a Julia function that implements the rules specified in the problem:

```julia
function valid_date(date::String)::Bool
    # Check if the date string is not empty
    if isempty(date)
        return false
    end

    # Check if the date string is in the correct format
    m = match(r"^(\d{2})-(\d{2})-(\d{4})$", date)
    if m === nothing
        return false
    end

    # Extract month, day, and year from the date string
    month = parse(Int, m.captures[1])
    day = parse(Int, m.captures[2])
    year = parse(Int, m.captures[3])

    # Check if the month is valid
    if month < 1 || month > 12
        return false
    end

    # Check if the day is valid for the given month
    if month in [1, 3, 5, 7, 8, 10, 12]
        if day < 1 || day > 31
            return false
        end
    elseif month in [4, 6, 9, 11]
        if day < 1 || day > 30
            return false
        end
    elseif month == 2
        if day < 1 || day > 29
            return false
        end
    end

    # If all checks pass, the date is valid
    return true
end
```

This function first checks if the date string is not empty and if it is in the correct format. Then it extracts the month, day, and year from the date string. It checks if the month is valid and if the day is valid for the given month. If all checks pass, the function returns `true`, indicating that the date is valid. Otherwise, it returns `false`.