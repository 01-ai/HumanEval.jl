Here's a Julia function that implements the described behavior:

```julia
function sorted_list_sum(xs::Vector{String})::Vector{String}
    # Filter out strings with odd lengths
    even_length_strings = filter(s -> iseven(length(s)), xs)
    
    # Sort the remaining strings by length and then alphabetically
    sorted_strings = sort(even_length_strings, by = s -> (length(s), s))
    
    return sorted_strings
end
```

This function does the following:

1. It uses the `filter` function to keep only the strings with even lengths. The condition `iseven(length(s))` checks if the length of each string is even.

2. It then sorts the filtered list using the `sort` function. The `by` parameter is used to specify the sorting criteria:
   - The primary criterion is the length of the string: `length(s)`
   - The secondary criterion is the string itself: `s`
   This ensures that strings are first sorted by length, and then alphabetically for strings of the same length.

3. Finally, it returns the sorted list of strings.

You can use this function as follows:

```julia
julia> sorted_list_sum(["aa", "a", "aaa"])
1-element Vector{String}:
 "aa"

julia> sorted_list_sum(["ab", "a", "aaa", "cd"])
2-element Vector{String}:
 "ab"
 "cd"
```

This implementation satisfies all the requirements:
- It removes strings with odd lengths.
- It sorts the remaining strings by length.
- For strings of the same length, it sorts them alphabetically.
- It works with lists containing duplicates (although the example doesn't show this explicitly).
- It returns a Vector{String} as required.