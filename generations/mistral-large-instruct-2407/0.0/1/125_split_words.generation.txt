 Certainly! Below is the implementation of the `split_words` function in Julia based on the provided docstring:

```julia
"""
    split_words(txt::String)::Union{Vector{<:AbstractString},Int}

Given a string of words, return a list of words split on whitespace, if no
whitespaces exists in the text you should split on commas "," if no commas
exists you should return the number of lower-case letters with odd order in the
alphabet, ord("a") = 0, ord("b") = 1, ... ord("z") = 25

# Examples

```jldoctest
julia> split_words("Hello world!")
2-element Vector{SubString{String}}:
 "Hello"
 "world!"

julia> split_words("Hello,world!")
2-element Vector{SubString{String}}:
 "Hello"
 "world!"

julia> split_words("abcdef")
3
```
"""
function split_words(txt::String)::Union{Vector{<:AbstractString},Int}
    # Check if there are any whitespaces
    if occursin(r"\s", txt)
        return split(txt)
    end

    # Check if there are any commas
    if occursin(',', txt)
        return split(txt, ',')
    end

    # Count the number of lower-case letters with odd order in the alphabet
    count_odd_order_letters = 0
    for char in txt
        if 'a' <= char <= 'z'
            if isodd(char - 'a')
                count_odd_order_letters += 1
            end
        end
    end

    return count_odd_order_letters
end
```

### Explanation:
1. **Whitespace Check**: The function first checks if there are any whitespace characters in the string using a regular expression (`r"\s"`). If whitespace is found, it splits the string on whitespace and returns the resulting vector.
2. **Comma Check**: If no whitespace is found, the function checks for commas. If a comma is found, it splits the string on commas and returns the resulting vector.
3. **Odd Order Lower-case Letters Count**: If neither whitespace nor commas are found, the function iterates through each character in the string. For each lower-case letter, it checks if its position in the alphabet is odd (`isodd(char - 'a')`). If so, it increments the count.

This implementation should cover the requirements specified in the docstring.