 Here's the implementation of the `match_parens` function in Julia:

```julia
function match_parens(lst::Vector{String})::String
    # Helper function to count the balance of parentheses
    function count_balance(s::String)::Int
        balance = 0
        for char in s
            if char == '('
                balance += 1
            else
                balance -= 1
            end
        end
        return balance
    end

    # Calculate the balance for both strings
    balance1 = count_balance(lst[1])
    balance2 = count_balance(lst[2])

    # Check if we can concatenate the strings in some order to make a good string
    if balance1 + balance2 == 0 && balance1 >= 0 && balance2 >= 0
        return "Yes"
    elseif balance1 - balance2 == 0 && balance1 >= 0 && balance2 <= 0
        return "Yes"
    elseif balance2 - balance1 == 0 && balance2 >= 0 && balance1 <= 0
        return "Yes"
    else
        return "No"
    end
end
```

This function first defines a helper function `count_balance` to calculate the balance of parentheses in a string. Then, it calculates the balance for both strings in the input list. Finally, it checks if there is a way to concatenate the strings in some order to make a good string and returns "Yes" or "No" accordingly.