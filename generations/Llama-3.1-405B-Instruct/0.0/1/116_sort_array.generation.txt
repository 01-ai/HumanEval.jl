Here is the Julia function that implements the described behavior:
```julia
"""
    sort_array(arr::Vector{Int})::Vector{Int}

In this Kata, you have to sort an array of non-negative integers according to
number of ones in their binary representation in ascending order. For similar
number of ones, sort based on decimal value.

# Examples

```jldoctest
julia> sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]
true

julia> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]
true
```
"""
function sort_array(arr::Vector{Int})::Vector{Int}
    sort(arr, by = x -> (count_ones(x), x))
end

# Helper function to count the number of ones in the binary representation of a number
function count_ones(n::Int)::Int
    count = 0
    while n > 0
        count += n & 1
        n >>= 1
    end
    count
end
```
Here's an explanation of the code:

The `sort_array` function uses the `sort` function from the Julia standard library, which sorts the input array in ascending order. The `by` keyword argument specifies a function that is used to extract a sorting key from each element of the array. In this case, the sorting key is a tuple containing two values:

1. The number of ones in the binary representation of the number, calculated using the `count_ones` function.
2. The decimal value of the number itself.

The `count_ones` function uses bitwise operations to count the number of ones in the binary representation of a number. It works by repeatedly shifting the number one bit to the right and adding the least significant bit to the count.

By sorting on the tuple of (number of ones, decimal value), we achieve the desired behavior of sorting by number of ones in ascending order, and then by decimal value for numbers with the same number of ones.