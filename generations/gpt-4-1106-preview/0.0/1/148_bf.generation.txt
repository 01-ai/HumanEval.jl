Here's the Julia function `bf` that implements the functionality described in the doc string:

```julia
function bf(planet1::String, planet2::String)::NTuple
    # Define the order of the planets from the Sun
    planets_order = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
    
    # Check if both planets are valid
    if !(planet1 in planets_order) || !(planet2 in planets_order)
        return ()
    end
    
    # Get the indices of the planets
    index1 = findfirst(isequal(planet1), planets_order)
    index2 = findfirst(isequal(planet2), planets_order)
    
    # Ensure index1 is less than index2 for correct ordering
    if index1 > index2
        index1, index2 = index2, index1
    end
    
    # Return the planets between the two indices, excluding the start and end planets
    return tuple(planets_order[(index1 + 1):(index2 - 1)]...)
end

# Examples
println(bf("Jupiter", "Neptune")) # Should print ("Saturn", "Uranus")
println(bf("Earth", "Mercury"))   # Should print ("Venus",)
println(bf("Mercury", "Uranus"))  # Should print ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
```

This function first checks if the given planet names are valid by seeing if they are in the `planets_order` list. It then finds their indices and returns a tuple of the planets between them, sorted by their proximity to the Sun. If the indices are in the wrong order, it swaps them to ensure the correct ordering. If either planet name is not valid, it returns an empty tuple.