Here's the implementation of the `tri` function in Julia that generates the first `n` numbers of the Tribonacci sequence:

```julia
function tri(n::Int)::Vector{Int}
    if n <= 0
        return Int[]
    end

    sequence = Vector{Int}(undef, n)
    sequence[1] = 1

    for i in 2:n
        if iseven(i)
            sequence[i] = 1 + div(i, 2)
        else
            if i == n
                sequence[i] = sequence[i-1] + sequence[i-2] + 1
            else
                sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i+1]
            end
        end
    end

    return sequence
end
```

Explanation:

1. We first check if `n` is less than or equal to 0. If it is, we return an empty integer vector since there are no numbers in the sequence.

2. We create a vector `sequence` of size `n` to store the Tribonacci numbers.

3. We initialize the first element of the sequence as 1, since `tri(1) = 1`.

4. We start a loop from 2 to `n` to generate the remaining numbers in the sequence.

5. If the current index `i` is even, we calculate `tri(i)` using the formula `tri(n) = 1 + n / 2` and store it in `sequence[i]`.

6. If the current index `i` is odd, we have two cases:
   - If `i` is equal to `n`, we calculate `tri(i)` using the formula `tri(n) = tri(n - 1) + tri(n - 2) + 1` and store it in `sequence[i]`. This is because `tri(n + 1)` is not defined for the last element.
   - Otherwise, we calculate `tri(i)` using the formula `tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)` and store it in `sequence[i]`.

7. Finally, we return the `sequence` vector containing the first `n` numbers of the Tribonacci sequence.

The function takes an integer `n` as input and returns a vector of integers representing the first `n` numbers of the Tribonacci sequence.

Here are some example outputs:

```jldoctest
julia> tri(3)
3-element Vector{Int64}:
 1
 2
 6

julia> tri(5)
5-element Vector{Int64}:
  1
  2
  6
  3
 12

julia> tri(0)
Int64[]
```

I hope this helps! Let me know if you have any further questions.