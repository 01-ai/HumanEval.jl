Here's a Julia function that implements the `anti_shuffle` behavior as described:

```julia
function anti_shuffle(s::String)::String
    # Split the string into words
    words = split(s)
    
    # Function to sort characters in a word
    sort_word(word) = join(sort(collect(word)))
    
    # Apply sorting to each word
    sorted_words = map(sort_word, words)
    
    # Reconstruct the string with sorted words
    result = ""
    word_index = 1
    
    for (i, char) in enumerate(s)
        if !isspace(char)
            result *= sorted_words[word_index][1]
            sorted_words[word_index] = sorted_words[word_index][2:end]
            if sorted_words[word_index] == ""
                word_index += 1
            end
        else
            result *= char
        end
    end
    
    return result
end
```

This function does the following:

1. It splits the input string into words.
2. It defines a helper function `sort_word` that sorts the characters in a word.
3. It applies the `sort_word` function to each word in the input.
4. It then reconstructs the string, maintaining the original spacing and word order, but using the sorted characters for each word.

Here's how you can use and test this function:

```julia
println(anti_shuffle("Hi"))  # Output: Hi
println(anti_shuffle("hello"))  # Output: ehllo
println(anti_shuffle("Hello World!!!"))  # Output: eHllo !!!Wdlor
```

This implementation preserves the original spacing and punctuation while sorting the characters within each word based on their ASCII values. It handles multiple words and maintains the original structure of the input string.