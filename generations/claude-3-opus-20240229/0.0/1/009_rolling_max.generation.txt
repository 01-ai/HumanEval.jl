Here's the implementation of the `rolling_max` function in Julia:

```julia
function rolling_max(numbers::Vector{Int})::Vector{Int}
    result = similar(numbers)
    current_max = typemin(Int)
    
    for i in eachindex(numbers)
        current_max = max(current_max, numbers[i])
        result[i] = current_max
    end
    
    return result
end
```

Explanation:

1. The function takes a vector of integers `numbers` as input and returns a vector of integers `result` of the same size.

2. We initialize `result` as a vector with the same size as `numbers` using the `similar` function. This ensures that `result` has the same type and size as `numbers`.

3. We initialize `current_max` with the smallest possible value for the integer type using `typemin(Int)`. This ensures that the first element of `numbers` will be considered as the initial maximum.

4. We start a loop that iterates over each index `i` of `numbers` using `eachindex(numbers)`.

5. Inside the loop, we update `current_max` by taking the maximum value between the current maximum (`current_max`) and the element at index `i` of `numbers` using the `max` function.

6. We assign the updated `current_max` value to the corresponding index `i` in the `result` vector.

7. After the loop finishes, we return the `result` vector containing the rolling maximum values.

The function works as follows:

- It initializes `current_max` with the smallest possible integer value.
- It iterates over each element of `numbers`.
- For each element, it updates `current_max` by taking the maximum between the current maximum and the current element.
- It assigns the updated `current_max` value to the corresponding index in the `result` vector.
- Finally, it returns the `result` vector containing the rolling maximum values.

You can test the function with the example provided in the doctests:

```julia
julia> rolling_max([1, 2, 3, 2, 3, 4, 2])
7-element Vector{Int64}:
 1
 2
 3
 3
 3
 4
 4
```

The function correctly generates the rolling maximum values for the given input vector.