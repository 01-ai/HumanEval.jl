Here's a Julia function that implements the specified behavior:

```julia
function count_upper(s::String)::Int
    # Define the set of uppercase vowels
    uppercase_vowels = Set(['A', 'E', 'I', 'O', 'U'])
    
    # Initialize the count of uppercase vowels at odd indices
    count = 0
    
    # Iterate over the string with index
    for (i, c) in enumerate(s)
        # Check if the index is odd and the character is an uppercase vowel
        if i % 2 != 0 && c in uppercase_vowels
            count += 1
        end
    end
    
    return count
end
```

You can test the function with the provided examples:

```julia
println(count_upper("aBCdEf"))  # Output: 1
println(count_upper("abcdefg")) # Output: 0
println(count_upper("dBBE"))    # Output: 0
```

This function iterates through each character in the string, checks if the index is odd, and if the character is an uppercase vowel. If both conditions are met, it increments the count. Finally, it returns the total count of uppercase vowels found at odd indices.