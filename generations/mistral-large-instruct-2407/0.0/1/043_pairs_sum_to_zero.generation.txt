 Certainly! Below is the implementation of the `pairs_sum_to_zero` function in Julia based on the provided docstring:

```julia
"""
    pairs_sum_to_zero(l::Vector{Int})::Bool

`pairs_sum_to_zero` takes a list of integers as an input. It returns `true` if
there are two distinct elements in the list that sum to zero, and false
otherwise.

```jldoctest
julia> pairs_sum_to_zero([1, 3, 5, 0])
false

julia> pairs_sum_to_zero([1, 3, -2, 1])
false

julia> pairs_sum_to_zero([1, 2, 3, 7])
false

julia> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
true

julia> pairs_sum_to_zero([1])
false
```
"""
function pairs_sum_to_zero(l::Vector{Int})::Bool
    seen = Set{Int}()
    for num in l
        if -num in seen
            return true
        end
        push!(seen, num)
    end
    return false
end
```

### Explanation:
1. **Initialization**: We initialize an empty set `seen` to keep track of the numbers we have encountered so far.
2. **Iteration**: We iterate through each number `num` in the input list `l`.
3. **Check for Pair**: For each number `num`, we check if its negation `-num` is already in the set `seen`. If it is, it means we have found two distinct elements that sum to zero, and we return `true`.
4. **Update Set**: If the negation is not found, we add the current number `num` to the set `seen`.
5. **Return Result**: If the loop completes without finding any such pair, we return `false`.

This approach ensures that the function runs efficiently with a time complexity of O(n), where n is the number of elements in the list.