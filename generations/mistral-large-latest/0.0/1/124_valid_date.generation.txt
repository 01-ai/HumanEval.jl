Sure, here is a Julia function that validates a given date string based on the rules you provided:

```julia
function valid_date(date::String)::Bool
    # Check if the date string is empty
    if isempty(date)
        return false
    end

    # Check if the date is in the format mm-dd-yyyy
    if !occursin("-", date) || length(split(date, "-")) != 3
        return false
    end

    # Parse the date
    month, day, year = parse.(Int, split(date, "-"))

    # Check if the month is valid
    if month < 1 || month > 12
        return false
    end

    # Check if the number of days is valid for the given month
    if (month in [1, 3, 5, 7, 8, 10, 12] && (day < 1 || day > 31)) ||
       (month in [4, 6, 9, 11] && (day < 1 || day > 30)) ||
       (month == 2 && (day < 1 || day > 29))
        return false
    end

    # If all checks pass, the date is valid
    return true
end
```
This function first checks if the date string is empty. Then it checks if the date string is in the correct format. If these checks pass, it parses the date into month, day, and year components and checks if these components are valid. If all checks pass, the function returns true, indicating that the date is valid. Otherwise, it returns false.