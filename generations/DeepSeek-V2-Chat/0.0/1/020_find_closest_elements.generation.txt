Here's the implementation of the `find_closest_elements` function in Julia:

```julia
function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}
    # Sort the numbers to make it easier to find the closest elements
    sorted_numbers = sort(numbers)
    
    # Initialize variables to store the closest pair and their difference
    closest_pair = (sorted_numbers[1], sorted_numbers[2])
    min_diff = abs(sorted_numbers[1] - sorted_numbers[2])
    
    # Iterate through the sorted list to find the closest pair
    for i in 2:length(sorted_numbers)-1
        diff = abs(sorted_numbers[i] - sorted_numbers[i+1])
        if diff < min_diff
            min_diff = diff
            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])
        end
    end
    
    return closest_pair
end
```

This function first sorts the input list of numbers to ensure that the closest elements are adjacent in the sorted list. It then iterates through the sorted list to find the pair of numbers with the smallest difference. The function returns this pair as a tuple, ensuring that the smaller number is first.