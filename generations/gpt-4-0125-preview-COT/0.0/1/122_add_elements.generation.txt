### Step-by-Step Outline

1. **Initialize a sum variable**: Start with a variable to keep track of the sum of elements that meet the criteria (having at most two digits).

2. **Iterate through the first `k` elements of the array `xs`**: Use a loop to go through each of the first `k` elements. The iteration should stop once it reaches the `k`th element.

3. **Check the number of digits**: For each element in the iteration, check if it has at most two digits. This can be done by checking if the element is greater than or equal to -99 and less than or equal to 99 (to account for negative numbers as well).

4. **Add the element to the sum if it meets the criteria**: If the element has at most two digits, add it to the sum variable initialized in step 1.

5. **Return the sum**: After iterating through the first `k` elements and adding the ones that meet the criteria, return the sum.

### Julia Code Implementation

```julia
function add_elements(xs::Vector{Int}, k::Int)::Int
    # Step 1: Initialize the sum variable
    sum_of_elements = 0
    
    # Step 2: Iterate through the first k elements
    for i in 1:k
        # Step 3: Check if the current element has at most two digits
        if xs[i] >= -99 && xs[i] <= 99
            # Step 4: Add the element to the sum
            sum_of_elements += xs[i]
        end
    end
    
    # Step 5: Return the sum
    return sum_of_elements
end
```

This function follows the outlined steps to ensure that it correctly sums up the elements with at most two digits from the first `k` elements of the input array `xs`, adhering to the constraints and examples provided.