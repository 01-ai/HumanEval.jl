 Certainly! Below is the implementation of the `simplify` function in Julia based on the given docstring:

```julia
"""
    simplify(x::String, n::String)::Bool

Your task is to implement a function that will simplify the expression x * n.
The function returns True if x * n evaluates to a whole number and False
otherwise. Both x and n, are string representation of a fraction, and have the
following format, <numerator>/<denominator> where both numerator and denominator
are positive whole numbers.

You can assume that x, and n are valid fractions, and do not have zero as
denominator.

# Examples

```jldoctest
julia> simplify("1/5", "5/1")
true

julia> simplify("1/6", "2/1")
false

julia> simplify("7/10", "10/2")
false
```
"""
function simplify(x::String, n::String)::Bool
    # Split the fractions into numerators and denominators
    x_num, x_den = parse.(Int, split(x, '/'))
    n_num, n_den = parse.(Int, split(n, '/'))

    # Calculate the product of the fractions
    product_num = x_num * n_num
    product_den = x_den * n_den

    # Check if the product is a whole number
    return product_num % product_den == 0
end

# Test cases
println(simplify("1/5", "5/1"))  # true
println(simplify("1/6", "2/1"))  # false
println(simplify("7/10", "10/2"))  # false
```

### Explanation:
1. **Parsing the Fractions**: The function first splits the input strings `x` and `n` into their respective numerators and denominators using the `split` function and then converts them to integers using `parse`.
2. **Calculating the Product**: The function then calculates the product of the two fractions by multiplying their numerators and denominators.
3. **Checking for Whole Number**: Finally, the function checks if the resulting numerator is divisible by the resulting denominator without a remainder using the modulo operator `%`. If the remainder is zero, the product is a whole number, and the function returns `true`; otherwise, it returns `false`.

This implementation should work correctly for the given examples and any other valid input fractions.