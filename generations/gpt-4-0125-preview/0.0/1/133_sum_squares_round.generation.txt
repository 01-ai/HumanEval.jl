To implement the `sum_squares_round` function as described, you can follow these steps:

1. Iterate through each element in the input vector `xs`.
2. For each element, apply the `ceil` function to round it to the nearest upper integer.
3. Square the rounded value.
4. Sum all the squared values.
5. Return the sum as an integer.

Here's how you can implement this in Julia:

```julia
function sum_squares_round(xs::Vector)::Int
    # Sum the squares of the rounded elements
    sum_rounded_squares = sum(ceil(Int, x)^2 for x in xs)
    return sum_rounded_squares
end

# Example usage
println(sum_squares_round([1, 2, 3])) # 14
println(sum_squares_round([1, 4, 9])) # 98
println(sum_squares_round([1, 3, 5, 7])) # 84
println(sum_squares_round([1.4, 4.2, 0])) # 29
println(sum_squares_round([-2.4, 1, 1])) # 6
```

This function works by first rounding each element in the input vector to the nearest upper integer using `ceil(Int, x)`, then squaring it, and finally summing all the squared values. The `sum` function is used with a generator expression to efficiently compute the total sum.