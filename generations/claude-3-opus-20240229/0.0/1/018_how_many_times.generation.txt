Here's a solution to the problem of finding how many times a substring appears in a string, counting overlapping cases:

```julia
function how_many_times(s::String, sub_s::String)::Int
    count = 0
    len_s = length(s)
    len_sub_s = length(sub_s)
    
    if len_sub_s == 0
        return len_s + 1
    end
    
    for i in 1:(len_s - len_sub_s + 1)
        if s[i:i+len_sub_s-1] == sub_s
            count += 1
        end
    end
    
    return count
end
```

Explanation:
1. We initialize a variable `count` to keep track of the number of occurrences of the substring.
2. We store the lengths of the string `s` and the substring `sub_s` in variables `len_s` and `len_sub_s`, respectively.
3. We handle a special case: if the substring is an empty string, it can be found between every character of the original string and at the beginning and end. In this case, we return `len_s + 1`.
4. We iterate over the range `1` to `len_s - len_sub_s + 1`. This ensures that we check all possible starting positions of the substring in the string.
5. In each iteration, we compare the substring of `s` starting from index `i` with length `len_sub_s` to the substring `sub_s`. If they are equal, we increment the `count` by 1.
6. Finally, we return the `count`, which represents the number of times the substring appears in the string.

The time complexity of this solution is O(n * m), where n is the length of the string `s` and m is the length of the substring `sub_s`. We iterate over the string `s` and compare substrings of length `m` in each iteration.

The space complexity is O(1) since we only use a constant amount of additional space to store the `count` and lengths of the strings.

Here are the example test cases:

```jldoctest
julia> how_many_times("", "a")
0

julia> how_many_times("aaa", "a")
3

julia> how_many_times("aaaa", "aa")
3
```

The function correctly handles the case when the string or substring is empty and counts the overlapping occurrences of the substring in the string.