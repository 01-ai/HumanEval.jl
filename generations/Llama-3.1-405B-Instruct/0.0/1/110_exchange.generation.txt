Here is a Julia function that implements the `exchange` function based on the provided docstring:
```julia
function exchange(lst1::Vector{Int}, lst2::Vector{Int})::String
    # Count the number of odd elements in lst1
    num_odd_in_lst1 = count(isodd, lst1)
    
    # Count the number of even elements in lst2
    num_even_in_lst2 = count(iseven, lst2)
    
    # If the number of odd elements in lst1 is less than or equal to the number of even elements in lst2,
    # it is possible to exchange elements to make lst1 all even
    if num_odd_in_lst1 <= num_even_in_lst2
        return "YES"
    else
        return "NO"
    end
end
```
Here's an explanation of the code:

1. We use the `count` function to count the number of odd elements in `lst1` and the number of even elements in `lst2`.
2. We then compare these two counts. If the number of odd elements in `lst1` is less than or equal to the number of even elements in `lst2`, it means we can exchange elements to make `lst1` all even.
3. If this condition is true, we return "YES". Otherwise, we return "NO".

You can test this function with the examples provided in the docstring:
```julia
julia> exchange([1, 2, 3, 4], [1, 2, 3, 4])
"YES"

julia> exchange([1, 2, 3, 4], [1, 5, 3, 4])
"NO"
```