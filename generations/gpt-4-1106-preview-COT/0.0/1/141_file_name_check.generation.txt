### Step-by-Step Outline:

1. Check if the file name contains exactly one dot:
   - Split the file name by the dot character.
   - If the resulting array does not have exactly two elements, return "No".

2. Check if the substring before the dot starts with a letter and is not empty:
   - Use a regular expression to check if the first character is a letter.

3. Check if the substring after the dot is one of the allowed extensions:
   - Create a set or list of allowed extensions.
   - Check if the substring after the dot is in the set or list.

4. Check if there are no more than three digits in the file name:
   - Use a regular expression to find all digits in the file name.
   - Count the number of digits found.
   - If there are more than three digits, return "No".

5. If all checks pass, return "Yes".

### Julia Code:

```julia
function file_name_check(file_name::String)::String
    # Check for exactly one dot
    parts = split(file_name, '.')
    if length(parts) != 2 || isempty(parts[1])
        return "No"
    end

    # Check if the first part starts with a letter
    if !occursin(r"^[a-zA-Z]", parts[1])
        return "No"
    end

    # Check for allowed extensions
    allowed_extensions = Set(["txt", "exe", "dll"])
    if !(parts[2] in allowed_extensions)
        return "No"
    end

    # Check for no more than three digits
    digits_count = length(matchall(r"[0-9]", file_name))
    if digits_count > 3
        return "No"
    end

    return "Yes"
end
```

Please note that the `matchall` function used to count digits is not a standard function in Julia. We would need to implement it or use an alternative approach to count digits. Let's correct this in the actual code implementation.