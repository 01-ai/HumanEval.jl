Certainly! Below is the implementation of the `fibfib` function in Julia, which efficiently computes the n-th element of the FibFib number sequence using an iterative approach to avoid the inefficiencies of a naive recursive solution.

```julia
"""
fibfib(n::Int)::Int

The FibFib number sequence is a sequence similar to the Fibonacci sequence
that's defined as follows:

  - fibfib(0) == 0
  - fibfib(1) == 0
  - fibfib(2) == 1
  - fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)

Please write a function to efficiently compute the n-th element of the fibfib
number sequence.

# Examples

```jldoctest
julia> fibfib(1)
0

julia> fibfib(5)
4

julia> fibfib(8)
24
```
"""
function fibfib(n::Int)::Int
    if n == 0 || n == 1
        return 0
    elseif n == 2
        return 1
    else
        a, b, c = 0, 0, 1
        for i in 3:n
            a, b, c = b, c, a + b + c
        end
        return c
    end
end
```

This function uses an iterative approach with three variables (`a`, `b`, and `c`) to keep track of the last three FibFib numbers, updating them in each iteration to compute the next number in the sequence. This method is efficient and avoids the exponential time complexity of a naive recursive solution.