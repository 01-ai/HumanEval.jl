Here is a Julia function that implements the given problem:

```julia
function do_algebra(operator::Vector{String}, operand::Vector{Int})
    expr = string(operand[1])
    for i in 2:length(operand)
        expr = string(expr, " ", operator[i-1], " ", operand[i])
    end
    return eval(Meta.parse(expr))
end
```

This function first converts the first operand to a string, then iterates over the remaining operands and operators, appending each to the expression string. Finally, it evaluates the expression using `eval` and `Meta.parse`.

Please note that using `eval` and `Meta.parse` can be dangerous if the input is not trusted, as they allow arbitrary code execution. In a production environment, you should use a safer method to evaluate expressions, such as using a library designed for safe expression evaluation.
