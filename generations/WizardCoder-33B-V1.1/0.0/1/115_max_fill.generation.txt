

function max_fill(grid::Vector{Vector{Int}}, capacity::Int)::Int
    m, n = size(grid)
    bucket_count = 0
    for j in 1:n
        bucket_capacity = capacity
        for i in 1:m
            if grid[i][j] == 1
                bucket_capacity -= 1
                if bucket_capacity < 0
                    bucket_count += 1
                    bucket_capacity = capacity - 1
                end
            end
        end
        if bucket_capacity < capacity
            bucket_count += 1
        end
    end
    return bucket_count
end

# Test cases
println(max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)) # 6
println(max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)) # 5
println(max_fill([[0, 0, 0], [0, 0, 0]], 5)) # 0 