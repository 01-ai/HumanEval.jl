

# Step-by-step outline:
# 1. Initialize an empty string `new_s` to store the result string after deleting the characters in `s` that are equal to any character in `c`.
# 2. Iterate over each character `ch` in `s`.
# 3. Check if `ch` is not in `c` by using the `occursin` function. If it's not, append `ch` to `new_s`.
# 4. After the loop, check if `new_s` is a palindrome. To do this, compare `new_s` with its reverse. If they are the same, return `new_s` and `true`, otherwise return `new_s` and `false`.

# Code:

```julia
function reverse_delete(s::String, c::String)::Tuple{String, Bool}
    new_s = ""
    for ch in s
        if !occursin(ch, c)
            new_s *= ch
        end
    end
    return (new_s, new_s == reverse(new_s))
end
```

This function works by iterating over each character in `s` and checking if it is not in `c`. If it is not, it appends the character to `new_s`. After the loop, it checks if `new_s` is a palindrome by comparing it with its reverse. If they are the same, it returns `new_s` and `true`, otherwise it returns `new_s` and `false`.