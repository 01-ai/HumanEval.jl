Here is a Julia function that efficiently computes the n-th element of the fib4 number sequence using dynamic programming:
```julia
function fib4(n::Int)::Int
    if n <= 3
        return [0, 0, 2, 0][n+1]
    end

    fib = zeros(Int, n+1)
    fib[1:4] = [0, 0, 2, 0]

    for i in 5:n+1
        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]
    end

    return fib[n+1]
end
```
Here's an explanation of the code:

* We first handle the base cases where `n` is less than or equal to 3.
* We then create an array `fib` of size `n+1` to store the fib4 numbers.
* We initialize the first four elements of `fib` with the base values `[0, 0, 2, 0]`.
* We then use a loop to compute the remaining fib4 numbers using the recurrence relation.
* Finally, we return the `n`-th element of the `fib` array, which is the `n`-th fib4 number.

This function has a time complexity of O(n) and a space complexity of O(n), making it efficient for large values of `n`.