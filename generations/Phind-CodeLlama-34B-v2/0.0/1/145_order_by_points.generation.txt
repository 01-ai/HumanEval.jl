

Here is the Julia implementation of the function based on the provided docstring:

```julia
function order_by_points(nums::Vector{Int})::Vector{Int}
    # Create a dictionary to store the sum of digits and the index of each number
    num_dict = Dict{Int, Vector{Int}}()
    for (i, num) in enumerate(nums)
        digit_sum = sum(map(x -> parse(Int, x), string(abs(num))))
        if haskey(num_dict, digit_sum)
            push!(num_dict[digit_sum], i)
        else
            num_dict[digit_sum] = [i]
        end
    end

    # Sort the keys of the dictionary in ascending order
    sorted_keys = sort(collect(keys(num_dict)))

    # Create a vector to store the sorted numbers
    sorted_nums = Int[]

    # Iterate over the sorted keys and append the numbers to the sorted_nums vector
    for key in sorted_keys
        for i in num_dict[key]
            push!(sorted_nums, nums[i])
        end
    end

    return sorted_nums
end
```

This function first creates a dictionary where the keys are the sum of the digits of the numbers and the values are the indices of the numbers in the original list. Then it sorts the keys in ascending order and iterates over them to append the numbers to the result vector in the correct order.