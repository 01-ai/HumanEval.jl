Here is a Julia function that implements the given problem:

```julia
function prod_signs(xs::Vector{Int})::Union{Nothing,Int}
    if isempty(xs)
        return nothing
    end

    sign_product = 1
    magnitude_sum = 0

    for x in xs
        sign_product *= sign(x)
        magnitude_sum += abs(x)
    end

    return sign_product * magnitude_sum
end
```

This function first checks if the input vector `xs` is empty. If it is, it returns `nothing`.

Then it initializes two variables: `sign_product` and `magnitude_sum`. `sign_product` is initialized to 1, because the product of no numbers is 1. `magnitude_sum` is initialized to 0, because the sum of no numbers is 0.

The function then iterates over each number `x` in `xs`. For each `x`, it multiplies `sign_product` by the sign of `x` (which is either 1, -1, or 0), and adds the absolute value of `x` to `magnitude_sum`.

Finally, it returns the product of `sign_product` and `magnitude_sum`.

For example, `prod_signs([1, 2, 2, -4])` returns `-9`, because the product of the signs of the numbers in the array is `-1 * 1 * 1 * -1 = -1`, and the sum of the magnitudes of the numbers in the array is `1 + 2 + 2 + 4 = 9`, so the product of the signs and the sum of the magnitudes is `-1 * 9 = -9`.
