```julia
function compare_one(a::Union{Integer, AbstractFloat, AbstractString}, b::Union{Integer, AbstractFloat, AbstractString})::Union{Integer, AbstractFloat, AbstractString, Nothing}
    # Check if a and b are equal
    if a == b
        return nothing
    end

    # Try to convert strings to numbers
    if isa(a, AbstractString)
        a = try
            parse(Float64, a)
        catch
            a
        end
    end
    if isa(b, AbstractString)
        b = try
            parse(Float64, b)
        catch
            b
        end
    end

    # Compare the values
    if isa(a, Integer) && isa(b, Integer)
        return a > b ? a : b
    elseif isa(a, AbstractFloat) && isa(b, AbstractFloat)
        return a > b ? a : b
    elseif isa(a, AbstractString) && isa(b, AbstractString)
        return a > b ? a : b
    end

    # If we reach this point, something went wrong
    error("Cannot compare $a and $b")
end
```

This function `compare_one` takes two arguments `a` and `b`, which can be integers, floats, or strings representing real numbers. It returns the larger variable in its given variable type. If the values are equal, it returns `nothing`. If a real number is represented as a string, the floating point might be represented with a `.` or a `,`. The function is designed to handle both cases.