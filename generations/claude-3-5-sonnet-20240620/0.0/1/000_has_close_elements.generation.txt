Here's a Julia function that implements the `has_close_elements` functionality as described:

```julia
function has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool
    n = length(numbers)
    
    for i in 1:n-1
        for j in i+1:n
            if abs(numbers[i] - numbers[j]) < threshold
                return true
            end
        end
    end
    
    return false
end
```

This function does the following:

1. It takes two arguments: `numbers` (a vector of Float64 values) and `threshold` (a Float64 value).

2. It uses nested loops to compare each pair of numbers in the list.

3. For each pair, it calculates the absolute difference between the two numbers using `abs(numbers[i] - numbers[j])`.

4. If this difference is less than the given `threshold`, the function immediately returns `true`.

5. If no pair of numbers is found to be closer than the threshold, the function returns `false` after checking all pairs.

This implementation has a time complexity of O(n^2), where n is the number of elements in the input vector. It's efficient for small to medium-sized lists, but for very large lists, more optimized algorithms might be necessary.

You can use this function as shown in the examples:

```julia
julia> has_close_elements([1.0, 2.0, 3.0], 0.5)
false

julia> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
true
```

The function will return `true` if any two numbers in the list are closer to each other than the given threshold, and `false` otherwise.