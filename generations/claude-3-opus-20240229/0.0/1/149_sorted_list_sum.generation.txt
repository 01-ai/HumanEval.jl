Here's the implementation of the `sorted_list_sum` function in Julia based on the given requirements:

```julia
function sorted_list_sum(xs::Vector{String})::Vector{String}
    # Filter out strings with odd lengths
    even_length_strings = filter(s -> length(s) % 2 == 0, xs)

    # Sort the remaining strings by length and then alphabetically
    sorted_strings = sort(even_length_strings, by = s -> (length(s), s))

    return sorted_strings
end
```

Explanation:
1. The function takes a vector of strings `xs` as input.
2. It uses the `filter` function to create a new vector `even_length_strings` that contains only the strings from `xs` that have even lengths. The condition `length(s) % 2 == 0` checks if the length of each string `s` is divisible by 2 (i.e., even).
3. It then uses the `sort` function to sort the `even_length_strings` vector based on two criteria:
   - First, it sorts the strings by their length using `length(s)`.
   - If two strings have the same length, it sorts them alphabetically using `s`.
   The `by` keyword argument specifies the sorting criteria.
4. Finally, the function returns the sorted vector of even-length strings.

Here are some example usages of the `sorted_list_sum` function:

```jldoctest
julia> sorted_list_sum(["a", "aa", "aaa"])
1-element Vector{String}:
 "aa"

julia> sorted_list_sum(["ab", "a", "aaa", "cd"])
2-element Vector{String}:
 "ab"
 "cd"
```

In the first example, the function removes the strings "a" and "aaa" because they have odd lengths, and returns the vector containing only "aa".

In the second example, the function removes the strings "a" and "aaa" because they have odd lengths, and returns the vector containing "ab" and "cd" sorted alphabetically.

The function satisfies the given requirements by filtering out strings with odd lengths, sorting the remaining strings by length and alphabetically, and returning the sorted vector of strings.