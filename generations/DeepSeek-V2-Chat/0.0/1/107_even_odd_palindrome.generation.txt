Here's the implementation of the `even_odd_palindrome` function in Julia:

```julia
function even_odd_palindrome(n::Int)::Tuple{Int, Int}
    # Initialize counters for even and odd palindromes
    even_count = 0
    odd_count = 0

    # Helper function to check if a number is a palindrome
    function is_palindrome(num::Int)::Bool
        str_num = string(num)
        return str_num == reverse(str_num)
    end

    # Iterate through the range from 1 to n
    for i in 1:n
        if is_palindrome(i)
            if i % 2 == 0
                even_count += 1
            else
                odd_count += 1
            end
        end
    end

    return (even_count, odd_count)
end
```

This function works as follows:
1. It initializes counters for even and odd palindromes.
2. It defines a helper function `is_palindrome` to check if a number is a palindrome by converting it to a string and comparing it to its reverse.
3. It iterates through the range from 1 to `n`, checking each number to see if it is a palindrome.
4. If a number is a palindrome, it increments the appropriate counter based on whether the number is even or odd.
5. Finally, it returns a tuple containing the counts of even and odd palindromes.