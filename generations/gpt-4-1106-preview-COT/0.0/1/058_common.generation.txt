To implement the `common` function in Julia, we will follow these steps:

1. Define the function `common` that takes two vectors `l1` and `l2` as input.
2. Use the `intersect` function to find the common elements between `l1` and `l2`.
3. Use the `unique` function to remove any duplicates from the intersection result.
4. Sort the resulting vector of unique common elements.
5. Return the sorted vector.

Now, let's write the code for the `common` function:

```julia
function common(l1::Vector, l2::Vector)::Vector
    # Step 2: Find the common elements
    common_elements = intersect(l1, l2)
    
    # Step 3: Remove duplicates (though `intersect` should already return unique elements)
    unique_common_elements = unique(common_elements)
    
    # Step 4: Sort the unique common elements
    sorted_common_elements = sort(unique_common_elements)
    
    # Step 5: Return the sorted vector
    return sorted_common_elements
end
```

Let's test the function with the provided examples:

```julia
println(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))
println(common([5, 3, 2, 8], [3, 2]))
```

The expected output should be:

```
[1, 5, 653]
[2, 3]
```