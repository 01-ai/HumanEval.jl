Here is a Julia function that implements the strange sorting algorithm:

```julia
function strange_sort_list(xs::Vector{Int})::Vector{Int}
    sorted_xs = sort(xs)
    result = Int[]
    while !isempty(sorted_xs)
        min_val = popfirst(sorted_xs)
        pushfirst(result, min_val)
        if !isempty(sorted_xs)
            max_val = poplast(sorted_xs)
            pushfirst(result, max_val)
        end
    end
    return reverse(result)
end
```

This function works by first sorting the input list in ascending order. Then it iteratively pops the smallest and largest values from the sorted list and appends them to the result list. If the sorted list is empty after popping the smallest value, it means all values have been processed and the function returns the result list. The result list is then reversed to match the expected output.

Let's test the function with the provided examples:

```julia
julia> strange_sort_list([1, 2, 3, 4])
4-element Vector{Int64}:
 1
 4
 2
 3

julia> strange_sort_list([5, 5, 5, 5])
4-element Vector{Int64}:
 5
 5
 5
 5

julia> strange_sort_list(Int[])
Int64[]
```

As you can see, the function works as expected.
