### Step-by-Step Outline:

1. Initialize a variable `eaten` to the value of `number`, which represents the number of carrots already eaten.
2. Calculate the number of carrots that can be eaten from the remaining stock without exceeding the `need`. This is the minimum of `need` and `remaining`.
3. Add the number of carrots that can be eaten to `eaten`.
4. Subtract the number of carrots that can be eaten from `remaining` to get the new number of remaining carrots.
5. Return a vector containing the total number of eaten carrots (`eaten`) and the number of carrots left (`remaining`).

### Julia Code:

```julia
function eat(number::Int, need::Int, remaining::Int)::Vector{Int}
    # Step 1: Initialize the eaten variable
    eaten = number
    
    # Step 2: Calculate the number of carrots that can be eaten
    can_eat = min(need, remaining)
    
    # Step 3: Update the eaten variable
    eaten += can_eat
    
    # Step 4: Update the remaining variable
    remaining -= can_eat
    
    # Step 5: Return the result
    return [eaten, remaining]
end
```

Now, let's implement the function in Julia.