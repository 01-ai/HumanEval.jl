Here's a solution to the problem of sorting numbers in Julia:

```julia
function sort_numbers(numbers::String)::String
    # Define a dictionary to map number words to their corresponding integers
    number_dict = Dict(
        "zero" => 0,
        "one" => 1,
        "two" => 2,
        "three" => 3,
        "four" => 4,
        "five" => 5,
        "six" => 6,
        "seven" => 7,
        "eight" => 8,
        "nine" => 9
    )
    
    # Split the input string into an array of number words
    number_words = split(numbers)
    
    # Convert each number word to its corresponding integer using the dictionary
    number_ints = [number_dict[word] for word in number_words]
    
    # Sort the array of integers
    sorted_ints = sort(number_ints)
    
    # Find the keys (number words) corresponding to the sorted integers
    sorted_words = [k for (k, v) in number_dict if v in sorted_ints]
    
    # Join the sorted number words into a space-delimited string
    sorted_numbers = join(sorted_words, " ")
    
    return sorted_numbers
end
```

Explanation:

1. We define a dictionary called `number_dict` that maps each number word to its corresponding integer value. This will be used to convert the number words to integers for sorting.

2. We split the input string `numbers` into an array of individual number words using `split(numbers)`. This gives us an array of strings, where each string represents a number word.

3. We use a list comprehension to convert each number word in the `number_words` array to its corresponding integer value using the `number_dict` dictionary. This gives us an array of integers called `number_ints`.

4. We sort the array of integers `number_ints` using the `sort()` function, which arranges the integers in ascending order. The sorted array is stored in `sorted_ints`.

5. To get the sorted number words, we use a list comprehension to iterate over the key-value pairs in the `number_dict` dictionary. We select the keys (number words) for which the corresponding values (integers) are present in the `sorted_ints` array. This gives us an array of sorted number words called `sorted_words`.

6. Finally, we join the sorted number words in the `sorted_words` array into a space-delimited string using `join(sorted_words, " ")`. The resulting string is assigned to `sorted_numbers` and returned as the output of the function.

This function takes a space-delimited string of number words as input, sorts the numbers based on their integer values, and returns the sorted numbers as a space-delimited string.

Example usage:
```julia
julia> sort_numbers("three one five")
"one three five"
```

The time complexity of this solution is O(n log n) due to the sorting operation, where n is the number of elements in the input string. The space complexity is O(n) to store the arrays of number words and integers.