Here is the Julia function that implements the behavior described in the docstring:
```julia
function get_row(xs::Vector{Vector{Int}}, x::Int)::Vector{Tuple{Int, Int}}
    # Initialize an empty vector to store the coordinates
    coords = Tuple{Int, Int}[]
    
    # Iterate over each row in the input vector
    for (i, row) in enumerate(xs)
        # Iterate over each column in the row
        for (j, val) in enumerate(row)
            # Check if the value is equal to x
            if val == x
                # Push the coordinate (row, column) to the coords vector
                push!(coords, (i, j))
            end
        end
    end
    
    # Sort the coordinates by row in ascending order
    sort!(coords, by = first)
    
    # Sort the coordinates of each row by column in descending order
    for row in unique(first.(coords))
        row_coords = filter(c -> first(c) == row, coords)
        sort!(row_coords, by = last, rev = true)
        for (i, coord) in enumerate(row_coords)
            coords[findfirst(c -> c == coord, coords)] = row_coords[i]
        end
    end
    
    # Return the sorted coordinates
    return coords
end
```
Here's an explanation of the code:

1. We initialize an empty vector `coords` to store the coordinates of the value `x`.
2. We iterate over each row in the input vector `xs` using `enumerate`, which returns both the index `i` and the row `row`.
3. We iterate over each column in the row using `enumerate`, which returns both the index `j` and the value `val`.
4. We check if the value `val` is equal to `x`, and if so, we push the coordinate `(i, j)` to the `coords` vector.
5. We sort the `coords` vector by row in ascending order using `sort!` and `by = first`.
6. We sort the coordinates of each row by column in descending order by iterating over each unique row, filtering the coordinates for that row, sorting them in descending order using `sort!` and `by = last`, and then updating the original `coords` vector.
7. Finally, we return the sorted `coords` vector.

You can test this function using the examples provided in the docstring:
```julia
julia> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)
5-element Vector{Tuple{Int64, Int64}}:
 (1, 1)
 (2, 5)
 (2, 1)
 (3, 6)
 (3, 1)

julia> get_row(Vector{Int}[], 1)
Tuple{Int64, Int64}[]

julia> get_row(Vector{Int}[Int[], [1], [1, 2, 3]], 3)
1-element Vector{Tuple{Int64, Int64}}:
 (3, 3)
```