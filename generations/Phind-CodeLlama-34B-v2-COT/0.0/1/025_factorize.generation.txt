

To solve this problem, we will first initialize an empty list to store the prime factors. Then, we will start a loop that will continue until `n` is greater than 1. In each iteration, we will find the smallest number `i` such that `n` is divisible by `i`. We will divide `n` by `i` and add `i` to our list. Finally, we will return the list of prime factors.

Here is the step-by-step outline:

1. Initialize an empty list `factors` to store the prime factors.
2. Start a loop that continues until `n` is greater than 1.
3. In each iteration, find the smallest number `i` such that `n` is divisible by `i`.
4. Divide `n` by `i` and add `i` to `factors`.
5. After the loop ends, return `factors`.

Now, let's write the Julia code for the above outline.

```julia
function factorize(n::Int)::Vector{Int}
    factors = Int[]
    for i = 2:n
        while n % i == 0
            push!(factors, i)
            n = div(n, i)
        end
    end
    return factors
end
```

This function works by repeatedly dividing `n` by its smallest divisor until `n` becomes 1. The `while` loop inside the `for` loop ensures that we divide `n` by the smallest divisor as many times as possible. The `push!` function is used to add `i` to `factors` for each iteration in which `n` is divisible by `i`.