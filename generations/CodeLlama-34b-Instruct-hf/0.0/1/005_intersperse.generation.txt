  Here is an implementation of the `intersperse` function in Julia:
```
function intersperse(numbers::Vector{Int}, delimeter::Int)::Vector{Int}
    result = Vector{Int}()
    for i in 1:length(numbers)
        if i < length(numbers)
            push!(result, numbers[i])
            push!(result, delimeter)
        else
            push!(result, numbers[i])
        end
    end
    return result
end
```
This function takes two arguments: `numbers`, a vector of integers, and `delimeter`, an integer that will be inserted between every two consecutive elements of the input list. The function returns a new vector of integers that contains the original elements of `numbers` with the `delimeter` inserted between them.

Here are some examples of how the function works:
```
julia> intersperse(Int[], 4)
Int64[]

julia> intersperse([1, 2, 3], 4)
5-element Vector{Int64}:
 1
 4
 2
 4
 3
```
In the first example, the input list is empty, so the function returns an empty vector. In the second example, the function returns a vector with the elements `1`, `4`, `2`, `4`, and `3`, with the `delimeter` of `4` inserted between every two consecutive elements of the input list.