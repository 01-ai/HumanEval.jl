Here's a Julia function that implements the `unique_elements` functionality as described:

```julia
function unique_elements(l::Vector)
    return sort(unique(l))
end
```

This function does the following:

1. It takes a vector `l` as input.
2. It uses the `unique` function to remove all duplicate elements from the vector.
3. It then uses the `sort` function to sort the resulting unique elements in ascending order.
4. Finally, it returns the sorted vector of unique elements.

This implementation is concise and efficient, as it leverages Julia's built-in `unique` and `sort` functions, which are optimized for performance.

You can use this function as shown in the example:

```julia
julia> unique_elements([5, 3, 5, 2, 3, 3, 9, 0, 123])
6-element Vector{Int64}:
   0
   2
   3
   5
   9
 123
```

This function will work for vectors of any type that Julia knows how to compare and sort. For example, it will work for vectors of numbers, strings, or any other comparable type.