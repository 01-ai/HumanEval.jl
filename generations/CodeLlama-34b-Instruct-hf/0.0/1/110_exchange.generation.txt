  Here's one way to implement the `exchange` function in Julia:
```
function exchange(lst1::Vector{Int}, lst2::Vector{Int})::String
    # Check if all elements of lst1 are even
    if all(iseven, lst1)
        return "YES"
    end

    # Check if there are any even numbers in lst2
    if any(iseven, lst2)
        # If there are, find the first even number in lst2
        even_index = findfirst(iseven, lst2)

        # Swap the first even number in lst2 with the first odd number in lst1
        lst1[1], lst2[even_index] = lst2[even_index], lst1[1]

        # Recursively call the function with the updated lists
        return exchange(lst1, lst2)
    end

    # If there are no even numbers in lst2, return "NO"
    return "NO"
end
```
Here's an explanation of the code:

1. The function first checks if all elements of `lst1` are even. If they are, it returns "YES".
2. If there are any even numbers in `lst2`, the function finds the first even number in `lst2` using the `findfirst` function.
3. The function then swaps the first even number in `lst2` with the first odd number in `lst1`.
4. The function recursively calls itself with the updated lists.
5. If there are no even numbers in `lst2`, the function returns "NO".

Note that the `iseven` function is used to check if a number is even, and the `findfirst` function is used to find the first even number in a list.