Certainly! Below is the implementation of the `order_by_points` function in Julia:

```julia
"""
    order_by_points(nums::Vector{Int})::Vector{Int}

Write a function which sorts the given list of integers in ascending order
according to the sum of their digits. Note: if there are several items with
similar sum of their digits, order them based on their index in original list.

# Examples

```jldoctest
julia> order_by_points([1, 11, -1, -11, -12])
5-element Vector{Int64}:
  -1
 -11
   1
 -12
  11

julia> order_by_points(Int[])
Int64[]
```
"""
function order_by_points(nums::Vector{Int})::Vector{Int}
    # Helper function to calculate the sum of digits of an integer
    function sum_of_digits(n::Int)
        return sum(abs.(digits(n)))
    end

    # Sort the numbers based on the sum of their digits
    # In case of a tie, the original order is preserved due to stable sorting
    sort(nums, by=sum_of_digits, lt=<, stable=true)
end
```

This function uses a helper function `sum_of_digits` to calculate the sum of the absolute values of the digits of an integer. The main function then sorts the input vector `nums` using the `sort` function with the `by` keyword argument to specify the sorting criterion, which is the sum of digits in this case. The `stable=true` argument ensures that elements with the same sum of digits are ordered based on their original index.