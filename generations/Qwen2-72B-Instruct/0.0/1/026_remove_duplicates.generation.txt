Here is a Julia function that implements the functionality described in the docstring:

```julia
function remove_duplicates(numbers::Vector{Int})::Vector{Int}
    occurrence = Dict{Int, Int}()
    result = Vector{Int}()
    
    # Count occurrences of each number
    for number in numbers
        occurrence[number] = occurrence.get(number, 0) + 1
    end
    
    # Add numbers to result that occur exactly once
    for number in numbers
        if occurrence[number] == 1
            push!(result, number)
        end
    end
    
    return result
end
```

However, this function can be optimized by using a single pass through the list and a set to keep track of seen numbers and duplicates:

```julia
function remove_duplicates(numbers::Vector{Int})::Vector{Int}
    seen = Set{Int}()
    duplicates = Set{Int}()
    result = Vector{Int}()
    
    for number in numbers
        if number in seen
            push!(duplicates, number)
        else
            push!(seen, number)
        end
    end
    
    for number in numbers
        if !(number in duplicates)
            push!(result, number)
        end
    end
    
    return result
end
```

Alternatively, you can use a more concise approach by leveraging the fact that sets automatically remove duplicates:

```julia
function remove_duplicates(numbers::Vector{Int})::Vector{Int}
    seen = Set{Int}()
    unique_numbers = filter(x -> !(x in seen) && push!(seen, x), numbers)
    return unique_numbers
end
```

This last version is the most efficient and concise, using a filter and a set to keep track of seen numbers, and it only iterates through the list once.