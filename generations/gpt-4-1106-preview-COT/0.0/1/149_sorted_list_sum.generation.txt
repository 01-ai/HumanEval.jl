To implement the `sorted_list_sum` function, we will follow these steps:

1. Filter out strings with odd lengths from the input list.
2. Sort the remaining strings first by their lengths and then alphabetically if they have the same length.
3. Return the sorted list of strings.

Now, let's write the code for the `sorted_list_sum` function:

```julia
function sorted_list_sum(xs::Vector{String})::Vector{String}
    # Step 1: Filter out strings with odd lengths
    even_length_strings = filter(s -> length(s) % 2 == 0, xs)
    
    # Step 2: Sort the strings by length, then alphabetically
    sorted_strings = sort(even_length_strings, by=length, lt=(x, y) -> length(x) == length(y) ? x < y : length(x) < length(y))
    
    # Step 3: Return the sorted list of strings
    return sorted_strings
end

# Examples
println(sorted_list_sum(["aa", "a", "aaa"])) # Output: ["aa"]
println(sorted_list_sum(["ab", "a", "aaa", "cd"])) # Output: ["ab", "cd"]
```

This code defines the `sorted_list_sum` function that performs the required operations and provides examples of how to call the function.