
```julia
function is_simple_power(x::Number, n::Number)::Bool
    if n == 1
        return x == 1
    end
    if x == 1
        return true
    end
    if x < 0 && n < 0
        return false
    end
    if x < 0 && n % 2 == 0
        return false
    end
    if x < 0
        x = -x
    end
    while x % n == 0
        x = x / n
    end
    return x == 1
end
```

This function checks if a number `x` is a simple power of `n`. It first checks if `n` is 1, in which case it returns `x == 1`. If `x` is 1, it returns `true`. If `x` is negative and `n` is negative, it returns `false`. If `x` is negative and `n` is even, it returns `false`. If `x` is negative, it negates `x`. It then divides `x` by `n` as long as `x` is divisible by `n`. If `x` becomes 1 after the division, it returns `true`. Otherwise, it returns `false`.