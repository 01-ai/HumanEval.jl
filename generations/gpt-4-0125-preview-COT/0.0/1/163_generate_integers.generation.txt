### Step-by-Step Outline

1. **Input Validation**: Ensure that `a` and `b` are positive integers. If not, return an empty vector since the function expects positive integers.

2. **Range Determination**: Determine the correct range between `a` and `b`, regardless of their order. This means if `b` is less than `a`, we still process the range from the smaller to the larger number.

3. **Even Digit Extraction**: Iterate through the determined range and select only the even digits. This involves checking if a number is divisible by 2 (i.e., `num % 2 == 0`).

4. **Result Compilation**: Compile the selected even digits into a vector.

5. **Return the Result**: Return the vector containing the even digits in ascending order.

### Julia Code Implementation

```julia
function generate_integers(a::Int, b::Int)::Vector{Int}
    # Step 1: Input Validation
    if a <= 0 || b <= 0
        return Int[]
    end
    
    # Step 2: Range Determination
    start_point = min(a, b)
    end_point = max(a, b)
    
    # Step 3 & 4: Even Digit Extraction and Compilation
    even_digits = [i for i in start_point:end_point if i % 2 == 0]
    
    # Step 5: Return Result
    return even_digits
end
```

This implementation follows the outlined steps to ensure that the function behaves as expected, including handling cases where `a` > `b` and ensuring that only even digits within the range are returned.