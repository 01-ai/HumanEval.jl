Here's the implementation of the `common` function in Julia:

```julia
function common(l1::Vector, l2::Vector)::Vector
    set1 = Set(l1)
    set2 = Set(l2)
    common_elements = intersect(set1, set2)
    return sort(collect(common_elements))
end
```

Explanation:
1. We convert both input vectors `l1` and `l2` into sets using the `Set` constructor. This eliminates any duplicate elements and allows for efficient set operations.

2. We use the `intersect` function to find the common elements between the two sets `set1` and `set2`. The `intersect` function returns a new set containing only the elements that are present in both sets.

3. We convert the resulting set of common elements back to a vector using the `collect` function.

4. Finally, we sort the vector of common elements using the `sort` function and return it as the result.

The time complexity of this implementation is O(n log n), where n is the total number of elements in both input vectors. The space complexity is O(n) to store the sets and the resulting vector.

Here are the example outputs:

```jldoctest
julia> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
3-element Vector{Int64}:
   1
   5
 653

julia> common([5, 3, 2, 8], [3, 2])
2-element Vector{Int64}:
 2
 3
```

The function correctly returns the sorted unique common elements between the two input vectors.