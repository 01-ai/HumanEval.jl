```julia
function fibfib(n::Int)::Int
    if n == 0
        return 0
    elseif n == 1
        return 0
    elseif n == 2
        return 1
    else
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
    end
end
```

However, this recursive solution is not efficient for large `n` due to repeated calculations. A more efficient approach would be to use dynamic programming with memoization to store previously computed values. Here's an optimized version:

```julia
function fibfib(n::Int)::Int
    if n == 0
        return 0
    elseif n == 1
        return 0
    elseif n == 2
        return 1
    else
        fibfib_values = zeros(Int, n+1)
        fibfib_values[1] = 0
        fibfib_values[2] = 0
        fibfib_values[3] = 1
        for i = 4:n+1
            fibfib_values[i] = fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3]
        end
        return fibfib_values[n+1]
    end
end
```

This version avoids redundant calculations by storing results in an array.