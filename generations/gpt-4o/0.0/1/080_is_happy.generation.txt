To implement the `is_happy` function in Julia, we need to follow these steps:

1. Check if the length of the string `s` is less than 3. If it is, return `false` because a happy string must have at least 3 characters.
2. Iterate through the string and check every set of 3 consecutive characters to ensure they are all distinct.
3. If any set of 3 consecutive characters are not distinct, return `false`.
4. If all sets of 3 consecutive characters are distinct, return `true`.

Here is the implementation of the `is_happy` function:

```julia
function is_happy(s::String)::Bool
    # Check if the length of the string is less than 3
    if length(s) < 3
        return false
    end
    
    # Iterate through the string and check every set of 3 consecutive characters
    for i in 1:(length(s) - 2)
        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]
            return false
        end
    end
    
    # If all sets of 3 consecutive characters are distinct, return true
    return true
end
```

Let's test the function with the provided examples:

```julia
println(is_happy("a"))      # false
println(is_happy("aa"))     # false
println(is_happy("abcd"))   # true
println(is_happy("aabb"))   # false
println(is_happy("adb"))    # true
println(is_happy("xyy"))    # false
```

This implementation should correctly determine if a string is happy based on the given criteria.