```julia
function valid_date(date::String)::Bool
    # Check if the date string is empty
    if isempty(date)
        return false
    end

    # Split the date string into month, day, and year
    parts = split(date, "-")
    if length(parts) != 3
        return false
    end

    # Convert the parts to integers
    month, day, year = parse.(Int, parts)

    # Check if the month is within the valid range (1-12)
    if month < 1 || month > 12
        return false
    end

    # Check if the day is within the valid range for the given month
    if month == 2
        # Leap year check
        if (year % 4 == 0 && year % 100 != 0) || year % 400 == 0
            max_day = 29
        else
            max_day = 28
        end
        if day > max_day
            return false
        end
    elseif month == 4 || month == 6 || month == 9 || month == 11
        if day > 30
            return false
        end
    else
        if day > 31
            return false
        end
    end

    # The date is valid
    return true
end
```

This function `valid_date` takes a `String` representing a date in the format `mm-dd-yyyy` and returns `true` if the date is valid according to the specified rules, or `false` otherwise.