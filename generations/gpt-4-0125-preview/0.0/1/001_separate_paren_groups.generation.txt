To implement the `separate_paren_groups` function, we need to iterate through the input string, keeping track of the balance of parentheses. When we encounter an open parenthesis, we increase the balance, and when we encounter a close parenthesis, we decrease it. A balance of zero indicates that we have completed a group of parentheses. We also need to ignore spaces in the input string. Here's how we can do it:

```julia
function separate_paren_groups(paren_string::String)::Vector{String}
    # Remove spaces from the input string
    clean_string = replace(paren_string, " " => "")
    
    # Initialize variables
    groups = String[]  # To store the separated groups
    current_group = []  # To build the current group
    balance = 0  # To keep track of the balance of parentheses
    
    # Iterate through each character in the cleaned string
    for char in clean_string
        # Add the character to the current group
        push!(current_group, char)
        
        # Adjust the balance based on the character
        if char == '('
            balance += 1
        elseif char == ')'
            balance -= 1
        end
        
        # If the balance is zero, we have a complete group
        if balance == 0
            push!(groups, join(current_group))
            current_group = []  # Reset the current group for the next one
        end
    end
    
    return groups
end
```

This function first cleans the input string by removing spaces. It then iterates through each character of the cleaned string, building groups of parentheses based on the balance of open and close parentheses. When the balance returns to zero, it indicates that a group has been completed, and it is added to the list of groups. Finally, the function returns the list of separated groups.