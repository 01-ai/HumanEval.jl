To implement the `correct_angle_bracketing` function, we can use a simple counter to keep track of the balance between opening and closing brackets. We increment the counter for every opening bracket ("<") and decrement it for every closing bracket (">"). If at any point the counter becomes negative, it means a closing bracket has appeared without a corresponding opening bracket before it, so we return `false`. If we finish iterating through the string and the counter is not zero, it means there are unmatched opening brackets, so we also return `false`. If the counter is zero at the end, all brackets are correctly matched, and we return `true`.

Here's how you can implement it in Julia:

```julia
function correct_angle_bracketing(brackets::String)::Bool
    balance = 0
    for bracket in brackets
        if bracket == '<'
            balance += 1
        elseif bracket == '>'
            balance -= 1
        end
        if balance < 0
            return false  # A closing bracket appears without an opening bracket
        end
    end
    return balance == 0  # True if all brackets are correctly matched
end
```

This function iterates through each character in the input string, adjusting the balance based on whether the character is an opening or closing bracket and checking for correctness as it goes.