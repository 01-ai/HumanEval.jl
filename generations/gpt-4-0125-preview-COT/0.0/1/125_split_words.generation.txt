### Step-by-Step Outline

1. **Check for Whitespaces**: Determine if the input string contains any whitespace characters. If it does, split the string on these characters and return the resulting list of words.

2. **Check for Commas**: If there are no whitespaces, check if the string contains any commas. If it does, split the string on commas and return the resulting list of words.

3. **Count Lower-case Letters with Odd Order**: If the string contains neither whitespaces nor commas, count the number of lower-case letters in the string that have an odd order in the alphabet. To do this:
    - Iterate through each character in the string.
    - Check if the character is a lower-case letter.
    - Determine the order of the letter in the alphabet (considering 'a' as 0, 'b' as 1, ..., 'z' as 25).
    - Check if the order is odd.
    - Count the number of such characters.

4. **Return the Result**: Based on the conditions met in the steps above, return either a list of words or the count of lower-case letters with an odd order in the alphabet.

### Julia Code Implementation

```julia
function split_words(txt::String)::Union{Vector{<:AbstractString}, Int}
    # Step 1: Check for Whitespaces
    if occursin(r"\s", txt)
        return split(txt)
    end

    # Step 2: Check for Commas
    if occursin(",", txt)
        return split(txt, ",")
    end

    # Step 3: Count Lower-case Letters with Odd Order
    odd_count = 0
    for char in txt
        if islower(char)
            # Convert char to its alphabetical order and check if it's odd
            order = Int(char) - Int('a')
            if order % 2 == 1
                odd_count += 1
            end
        end
    end

    # Step 4: Return the Result
    return odd_count
end
```

This function first checks for the presence of whitespaces or commas to decide how to split the string. If neither is present, it counts the number of lower-case letters with an odd order in the alphabet, as specified in the problem statement.