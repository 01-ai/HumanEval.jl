Here is the implementation of the `sum_squares_round` function in Julia:

```julia
function sum_squares_round(xs::Vector)::Int
    # Round each element in the list to the upper int (Ceiling)
    rounded_xs = ceil.(Int, xs)
    
    # Compute the sum of squared numbers
    sum_of_squares = sum(x^2 for x in rounded_xs)
    
    return sum_of_squares
end
```

Let's break down the function:

1. **Rounding to the Ceiling**: We use the `ceil` function with broadcasting (`.`) to round each element in the vector `xs` to the nearest integer greater than or equal to that element.
2. **Sum of Squares**: We then compute the sum of the squares of these rounded numbers using a generator expression inside the `sum` function.
3. **Return the Result**: Finally, we return the computed sum of squares.

You can test the function with the provided examples to ensure it works correctly:

```julia
println(sum_squares_round([1, 2, 3]))       # Output: 14
println(sum_squares_round([1, 4, 9]))       # Output: 98
println(sum_squares_round([1, 3, 5, 7]))    # Output: 84
println(sum_squares_round([1.4, 4.2, 0]))   # Output: 29
println(sum_squares_round([-2.4, 1, 1]))    # Output: 6
```