To implement the function `is_multiply_prime(a::Int)::Bool`, we need to determine if the number `a` can be expressed as the product of exactly three prime numbers. Given that `a` is less than 100, we can use a straightforward approach:

1. Generate a list of prime numbers up to a reasonable limit (since `a < 100`, primes up to about 31 should suffice).
2. Check combinations of three primes to see if their product equals `a`.

Here's how we can implement this:

```julia
function is_prime(n::Int)::Bool
    if n <= 1
        return false
    elseif n <= 3
        return true
    elseif n % 2 == 0 || n % 3 == 0
        return false
    end
    i = 5
    while i * i <= n
        if n % i == 0 || n % (i + 2) == 0
            return false
        end
        i += 6
    end
    return true
end

function generate_primes(limit::Int)
    primes = Int[]
    for i in 2:limit
        if is_prime(i)
            push!(primes, i)
        end
    end
    return primes
end

function is_multiply_prime(a::Int)::Bool
    primes = generate_primes(31)  # Generate primes up to 31
    n = length(primes)
    for i in 1:n
        for j in i:n
            for k in j:n
                if primes[i] * primes[j] * primes[k] == a
                    return true
                end
            end
        end
    end
    return false
end
```

This implementation includes:
- A helper function `is_prime` to check if a number is prime.
- A function `generate_primes` to generate a list of prime numbers up to a given limit.
- The main function `is_multiply_prime` which checks if `a` can be expressed as the product of three prime numbers by iterating through combinations of primes.

This approach is efficient given the constraints (`a < 100`), and the limited number of primes and combinations to check.