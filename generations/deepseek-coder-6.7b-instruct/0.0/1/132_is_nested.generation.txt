Here is a Julia function that solves the problem:

```julia
function is_nested(s::String)::Bool
    stack = []
    for c in s
        if c == '['
            push(stack, c)
        elseif c == ']'
            if isempty(stack) || stack[end] != '['
                return false
            else
                pop(stack)
            end
        end
    end
    return isempty(stack) ? false : true
end
```

This function uses a stack to keep track of the brackets. When it encounters an opening bracket, it pushes it onto the stack. When it encounters a closing bracket, it checks if the stack is empty or the last element on the stack is not an opening bracket. If either of these conditions is true, it returns `false`. Otherwise, it pops the last element from the stack. If the stack is empty after processing all the brackets, it returns `false`. Otherwise, it returns `true`.
