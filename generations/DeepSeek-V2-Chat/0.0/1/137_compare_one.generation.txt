Here's the implementation of the `compare_one` function in Julia:

```julia
function compare_one(a::Union{Integer, AbstractFloat, AbstractString}, b::Union{Integer, AbstractFloat, AbstractString})::Union{Integer, AbstractFloat, AbstractString, Nothing}
    # Helper function to convert strings to floats, handling both '.' and ',' as decimal separators
    function to_float(x::AbstractString)
        try
            return parse(Float64, replace(x, ',' => '.'))
        catch e
            return NaN
        end
    end

    # Convert inputs to floats if they are strings
    a_val = typeof(a) <: AbstractString ? to_float(a) : convert(Float64, a)
    b_val = typeof(b) <: AbstractString ? to_float(b) : convert(Float64, b)

    # Compare the values
    if a_val > b_val
        return a
    elseif b_val > a_val
        return b
    else
        return nothing
    end
end
```

This function first defines a helper function `to_float` to handle the conversion of strings to floats, taking into account both '.' and ',' as decimal separators. Then, it converts the inputs to floats if they are strings and compares them. It returns the larger value in its original type, or `nothing` if the values are equal.