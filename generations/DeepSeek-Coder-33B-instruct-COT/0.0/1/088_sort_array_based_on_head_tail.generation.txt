Here is a Julia function that implements the given problem:

```julia
function sort_array_based_on_head_tail(xs::Vector{Int})::Vector{Int}
    if isempty(xs)
        return Int[]
    end

    sum_head_tail = xs[1] + xs[end]

    if isodd(sum_head_tail)
        return sort(xs)
    else
        return sort(xs, rev=true)
    end
end
```

This function first checks if the input array is empty. If it is, it returns an empty array. If it's not, it calculates the sum of the first and last elements of the array. If this sum is odd, it sorts the array in ascending order. If it's even, it sorts the array in descending order.

Let's test the function with the given examples:

```julia
julia> sort_array_based_on_head_tail(Int[])
Int64[]

julia> sort_array_based_on_head_tail([5])
1-element Vector{Int64}:
 5

julia> sort_array_based_on_head_tail([2, 4, 3, 0, 1, 5])
6-element Vector{Int64}:
 0
 1
 2
 3
 4
 5

julia> sort_array_based_on_head_tail([2, 4, 3, 0, 1, 5, 6])
7-element Vector{Int64}:
 6
 5
 4
 3
 2
 1
 0
```

As you can see, the function works as expected.
