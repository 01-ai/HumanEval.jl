  Here's an implementation of the `pairs_sum_to_zero` function in Julia:
```
function pairs_sum_to_zero(l::Vector{Int})::Bool
    for i in 1:length(l)
        for j in i+1:length(l)
            if l[i] + l[j] == 0
                return true
            end
        end
    end
    return false
end
```
This function uses a nested loop to iterate over all pairs of elements in the input list. For each pair, it checks if the sum of the two elements is equal to zero. If it finds a pair that sums to zero, it returns `true`. If it reaches the end of the function without finding any pairs that sum to zero, it returns `false`.

Here are some examples of how to use the `pairs_sum_to_zero` function:
```
julia> pairs_sum_to_zero([1, 3, 5, 0])
false

julia> pairs_sum_to_zero([1, 3, -2, 1])
false

julia> pairs_sum_to_zero([1, 2, 3, 7])
false

julia> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
true

julia> pairs_sum_to_zero([1])
false
```
Note that the function returns `false` if the input list is empty, since there are no pairs of elements to sum to zero in an empty list.