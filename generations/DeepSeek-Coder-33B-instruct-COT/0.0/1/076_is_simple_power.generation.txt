Here is a step-by-step outline of how you can solve this problem:

1. Check if `x` is less than or equal to 1. If it is, return `true` if `x` is equal to `n` and `false` otherwise. This is because 1 is the only number that is a simple power of 1.

2. Use a while loop to continuously divide `x` by `n` until `x` is no longer divisible by `n`.

3. If `x` is not equal to 1 after the loop, return `false`. This means `x` is not a simple power of `n`.

4. If `x` is equal to 1 after the loop, return `true`. This means `x` is a simple power of `n`.

Here is the Julia code that implements the above steps:

```julia
function is_simple_power(x::Number, n::Number)::Bool
    if x <= 1
        return x == n
    end
    while x % n == 0
        x /= n
    end
    return x == 1
end
```

This function works by continuously dividing `x` by `n` until `x` is no longer divisible by `n`. If `x` is equal to 1 after the loop, then `x` is a simple power of `n` and the function returns `true`. Otherwise, `x` is not a simple power of `n` and the function returns `false`.
