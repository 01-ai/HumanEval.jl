 Here's the implementation of the `even_odd_palindrome` function in Julia:

```julia
function even_odd_palindrome(n::Int)::Tuple{Int, Int}
    # Initialize counters for even and odd palindromes
    even_count = 0
    odd_count = 0
    
    # Iterate through each number from 1 to n
    for i in 1:n
        # Check if the number is a palindrome
        if is_palindrome(i)
            # Increment the appropriate counter based on whether the number is even or odd
            if i % 2 == 0
                even_count += 1
            else
                odd_count += 1
            end
        end
    end
    
    return (even_count, odd_count)
end

# Helper function to check if a number is a palindrome
function is_palindrome(x::Int)::Bool
    str = string(x)
    return str == reverse(str)
end
```

This function works by iterating through each number from 1 to `n`, checking if it is a palindrome using the `is_palindrome` helper function, and then incrementing the appropriate counter based on whether the number is even or odd. The `is_palindrome` function converts the number to a string, reverses the string, and checks if the reversed string is equal to the original string.