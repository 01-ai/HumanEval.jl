### Step-by-Step Outline

1. **Initialize an empty vector** to store the result of the strange sort.
2. **Sort the input vector** in ascending order to make it easier to pick the minimum and maximum values.
3. **Loop until the sorted vector is empty**:
   - In each iteration of the loop, **append the first element** (minimum) of the sorted vector to the result vector and **remove it** from the sorted vector.
   - If the sorted vector is not empty after removing the minimum, **append the last element** (maximum) of the sorted vector to the result vector and **remove it**.
4. **Return the result vector**.

### Julia Code Implementation

```julia
function strange_sort_list(xs::Vector{Int})::Vector{Int}
    # Step 1: Initialize an empty vector for the result
    result = Int[]

    # Step 2: Sort the input vector
    sorted_xs = sort(xs)

    # Step 3: Loop until the sorted vector is empty
    while !isempty(sorted_xs)
        # Append the first element (minimum) and remove it
        push!(result, popfirst!(sorted_xs))
        
        # If not empty, append the last element (maximum) and remove it
        if !isempty(sorted_xs)
            push!(result, pop!(sorted_xs))
        end
    end

    # Step 4: Return the result vector
    return result
end
```

This implementation follows the outlined steps to achieve the "strange sort" as described. It efficiently uses Julia's built-in functions like `sort`, `push!`, `popfirst!`, and `pop!` to manipulate vectors.