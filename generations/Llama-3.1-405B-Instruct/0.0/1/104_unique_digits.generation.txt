Here is a Julia function that implements the specified behavior:
```julia
function unique_digits(xs::Vector{Int})::Vector{Int}
    # Filter out numbers with even digits
    filtered = filter(xs) do x
        digits = [parse(Int, d) for d in string(x)]
        all(isodd, digits)
    end
    
    # Sort the filtered list in increasing order
    sort(filtered)
end
```
Here's an explanation of the code:

1. We use the `filter` function to create a new vector that only includes the numbers from `xs` that do not have any even digits.
2. Inside the filter function, we convert each number to a string, then split it into individual digits using a comprehension.
3. We use the `all` function with the `isodd` predicate to check if all digits are odd. If any digit is even, `all` will return `false`.
4. Finally, we sort the filtered list in increasing order using the `sort` function.

You can test this function with the examples provided in the docstring:
```julia
julia> unique_digits([15, 33, 1422, 1])
3-element Vector{Int64}:
  1
 15
 33

julia> unique_digits([152, 313, 1422, 10])
1-element Vector{Int64}:
 313
```