Here's an implementation of the `string_to_md5` function in Julia:

```julia
using Digest

function string_to_md5(text::String)::Union{Nothing, String}
    if isempty(text)
        return nothing
    else
        hash = bytes2hex(md5(text))
        return hash
    end
end
```

Explanation:

1. We first import the `Digest` module from the Julia standard library, which provides various hash functions, including MD5.

2. The `string_to_md5` function takes a `String` as input and returns either `Nothing` (if the input string is empty) or a `String` (the MD5 hash of the input string).

3. Inside the function, we first check if the input `text` is an empty string using `isempty(text)`. If it is, we return `nothing`.

4. If the input string is not empty, we calculate the MD5 hash using `md5(text)`. The `md5` function from the `Digest` module returns a `Digest` object. We then convert this `Digest` object to a hexadecimal string representation using `bytes2hex`.

5. Finally, we return the hexadecimal string representation of the MD5 hash.

Here's an example usage:

```julia
julia> string_to_md5("Hello world")
"3e25960a79dbc69b674cd4ec67a72c62"

julia> string_to_md5("")
nothing
```

Note that the `md5` function is considered insecure for cryptographic purposes, and it is recommended to use more secure hash functions like SHA-256 or SHA-3 for such purposes. However, MD5 is still widely used for data integrity checking and other non-cryptographic applications.