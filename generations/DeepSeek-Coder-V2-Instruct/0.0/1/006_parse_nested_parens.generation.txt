 Here's the implementation of the `parse_nested_parens` function in Julia:

```julia
function parse_nested_parens(paren_string::String)::Vector{Int}
    # Split the input string into individual groups
    groups = split(paren_string)
    
    # Initialize an array to store the maximum nesting levels for each group
    max_nesting_levels = Vector{Int}(undef, length(groups))
    
    for (i, group) in enumerate(groups)
        max_depth = 0
        current_depth = 0
        
        for char in group
            if char == '('
                current_depth += 1
                max_depth = max(max_depth, current_depth)
            elseif char == ')'
                current_depth -= 1
            end
        end
        
        max_nesting_levels[i] = max_depth
    end
    
    return max_nesting_levels
end
```

This function works as follows:
1. It splits the input string into individual groups of parentheses.
2. For each group, it iterates through the characters to track the current depth of nesting and updates the maximum depth found.
3. It stores the maximum depth for each group in an array and returns this array.

You can test the function with the provided example:

```julia
julia> parse_nested_parens("(()()) ((())) () ((())()())")
4-element Vector{Int64}:
 2
 3
 1
 3
```