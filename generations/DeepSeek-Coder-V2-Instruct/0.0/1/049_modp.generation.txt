 Here's the implementation of the `modp` function in Julia:

```julia
"""
    modp(n::Int, p::Int)::Int

Return 2^n modulo p (be aware of numerics).

# Examples

```jldoctest
julia> modp(3, 5)
3

julia> modp(1101, 101)
2

julia> modp(0, 101)
1

julia> modp(3, 11)
8

julia> modp(100, 101)
1
```
"""
function modp(n::Int, p::Int)::Int
    return mod(2^n, p)
end
```

This function uses the `mod` function to compute `2^n` modulo `p`, ensuring that the result is within the range of `0` to `p-1`.