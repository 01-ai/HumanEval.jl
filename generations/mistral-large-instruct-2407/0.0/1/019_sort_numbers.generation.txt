 Certainly! Below is the implementation of the `sort_numbers` function in Julia based on the given docstring:

```julia
"""
    sort_numbers(numbers::String)::String

Input is a space-delimited string of numberals from "zero" to "nine".  Valid
choices are "zero", "one", "two", "three", "four", "five", "six", "seven",
"eight" and "nine".  Return the string with numbers sorted from smallest to
largest

# Examples

```jldoctest
julia> sort_numbers("three one five")
"one three five"
```
"""
function sort_numbers(numbers::String)::String
    # Define a dictionary to map number words to their corresponding integer values
    number_map = Dict(
        "zero" => 0,
        "one" => 1,
        "two" => 2,
        "three" => 3,
        "four" => 4,
        "five" => 5,
        "six" => 6,
        "seven" => 7,
        "eight" => 8,
        "nine" => 9
    )

    # Split the input string into an array of number words
    number_words = split(numbers)

    # Sort the number words based on their corresponding integer values
    sorted_number_words = sort(number_words, by=word -> number_map[word])

    # Join the sorted number words back into a single string
    sorted_numbers = join(sorted_number_words, " ")

    return sorted_numbers
end
```

This function first defines a dictionary to map the number words to their corresponding integer values. It then splits the input string into an array of number words, sorts this array based on the integer values, and finally joins the sorted array back into a single string.

You can test the function with the provided example:

```julia
julia> sort_numbers("three one five")
"one three five"
```