To implement the function `f` as described, we need to generate a list of size `n` where each element at index `i` (starting from 1) is determined based on whether `i` is even or odd. Specifically:

- If `i` is even, the element should be the factorial of `i`.
- If `i` is odd, the element should be the sum of numbers from 1 to `i`.

Here's the implementation of the function `f`:

```julia
function f(n::Int)::Vector{Int}
    result = Vector{Int}(undef, n)
    for i in 1:n
        if i % 2 == 0
            result[i] = factorial(i)
        else
            result[i] = sum(1:i)
        end
    end
    return result
end

# Helper function to compute factorial
function factorial(x::Int)::Int
    if x == 0
        return 1
    else
        return prod(1:x)
    end
end
```

### Explanation:
1. **Initialization**: We initialize a vector `result` of size `n` with undefined elements.
2. **Loop through each index `i` from 1 to `n`**:
   - If `i` is even (`i % 2 == 0`), we compute the factorial of `i` using a helper function `factorial`.
   - If `i` is odd, we compute the sum of numbers from 1 to `i` using the `sum` function.
3. **Return the result vector**.

### Example:
For `n = 5`, the function will generate the following steps:
- `i = 1` (odd): sum(1:1) = 1
- `i = 2` (even): factorial(2) = 2
- `i = 3` (odd): sum(1:3) = 6
- `i = 4` (even): factorial(4) = 24
- `i = 5` (odd): sum(1:5) = 15

Thus, `f(5)` will return `[1, 2, 6, 24, 15]`.

You can test the function with the provided example to ensure it works correctly.