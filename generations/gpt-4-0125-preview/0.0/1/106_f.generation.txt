To implement the function `f` as described, we need to follow these steps:

1. Initialize an empty vector of integers to store the results.
2. Loop through the numbers from 1 to `n`.
3. For each number `i`, check if it is even or odd.
   - If `i` is even, calculate the factorial of `i` and append it to the result vector.
   - If `i` is odd, calculate the sum of numbers from 1 to `i` and append it to the result vector.
4. Return the result vector.

Here's how you can implement it in Julia:

```julia
function f(n::Int)::Vector{Int}
    # Function to calculate factorial
    function factorial(x::Int)::Int
        if x == 0
            return 1
        else
            return x * factorial(x - 1)
        end
    end
    
    # Function to calculate sum from 1 to x
    function sum_to_x(x::Int)::Int
        return x * (x + 1) // 2
    end
    
    # Initialize the result vector
    result = Vector{Int}(undef, n)
    
    # Loop through 1 to n
    for i in 1:n
        if i % 2 == 0
            # If i is even, calculate factorial
            result[i] = factorial(i)
        else
            # If i is odd, calculate sum from 1 to i
            result[i] = sum_to_x(i)
        end
    end
    
    return result
end
```

This function first defines two helper functions: `factorial` to calculate the factorial of a number, and `sum_to_x` to calculate the sum of numbers from 1 to `x`. Then, it iterates over the range from 1 to `n`, applying the appropriate calculation based on whether the index is even or odd, and stores the result in a vector which is returned at the end.