Sure, here is the Julia function that implements the minimum sum of any non-empty sub-array:

```julia
function min_sub_array_sum(nums::Vector{Int})::Int
    min_sum = typemax(Int)
    current_sum = 0
    for num in nums
        current_sum += num
        min_sum = min(min_sum, current_sum)
        if current_sum > 0
            current_sum = 0
        end
    end
    return min_sum
end
```

This function works by iterating over the array and keeping track of the current sum and the minimum sum found so far. If the current sum becomes positive, it is reset to 0, because a positive sum cannot contribute to the minimum sum. The minimum sum is updated whenever a smaller sum is found. If all numbers are positive, the function will return 0, because the minimum sum in this case is the smallest number itself. If all numbers are negative, the function will return the sum of all numbers, because the smallest sub-array in this case is the whole array.