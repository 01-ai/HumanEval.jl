

Here is the Julia function that solves the problem:

```julia
function sort_array(arr::Vector{Int})::Vector{Int}
    # Count the number of ones in the binary representation of each number
    ones_count = [count_ones(i) for i in arr]

    # Sort the array based on the number of ones and the decimal value
    sorted_arr = sort(zip(ones_count, arr))

    # Return the sorted array
    return [i[2] for i in sorted_arr]
end

function count_ones(n::Int)::Int
    # Convert the number to binary and count the number of ones
    return count(c -> c == '1', bin(n))
end
```

This function works by first counting the number of ones in the binary representation of each number in the array. It then sorts the array based on the number of ones and the decimal value. The `zip` function is used to combine the number of ones and the original number into a tuple, which can be sorted. The `sort` function sorts the array based on the first element of the tuple (the number of ones), and then based on the second element of the tuple (the decimal value). The `count_ones` function is used to count the number of ones in the binary representation of a number. 