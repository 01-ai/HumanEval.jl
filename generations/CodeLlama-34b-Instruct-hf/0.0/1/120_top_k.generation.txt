  Here is a possible implementation of the `top_k` function in Julia:
```
function top_k(xs::Vector{Int}, k::Int)::Vector{Int}
    # Check if k is valid
    if k <= 0 || k > length(xs)
        throw(ArgumentError("k must be a positive integer less than or equal to the length of xs"))
    end

    # Sort the array in descending order
    sorted_xs = sort(xs, rev=true)

    # Return the top k elements
    return sorted_xs[1:k]
end
```
Here's an explanation of the code:

1. The function takes two arguments: `xs`, a vector of integers, and `k`, a positive integer.
2. The first line checks if `k` is valid. If `k` is not a positive integer or is greater than the length of `xs`, an `ArgumentError` is thrown.
3. The next line sorts the `xs` array in descending order using the `sort` function with the `rev` argument set to `true`.
4. The final line returns the top `k` elements of the sorted array using the `:` operator to extract the first `k` elements.

Note that the `top_k` function returns a sorted list of the maximum `k` numbers in `xs` in the descending order. If there are duplicate elements in `xs`, the function will return all of them in the sorted list.