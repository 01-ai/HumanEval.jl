Here's a solution to the problem in Julia:

```julia
function sum_odd_at_odd(xs::Vector{Int})::Int
    sum = 0
    for i in 1:2:length(xs)
        if isodd(xs[i])
            sum += xs[i]
        end
    end
    return sum
end
```

Explanation:
1. We initialize a variable `sum` to keep track of the sum of odd elements at odd positions.

2. We use a `for` loop with a step of 2 (`1:2:length(xs)`) to iterate over the odd positions of the vector `xs`. The loop variable `i` takes on the values 1, 3, 5, etc.

3. Inside the loop, we check if the element at the current odd position (`xs[i]`) is odd using the `isodd()` function.

4. If the element is odd, we add it to the `sum` variable.

5. After the loop ends, we return the final value of `sum`, which represents the sum of all odd elements at odd positions.

Now, let's test the function with the provided examples:

```jldoctest
julia> sum_odd_at_odd([5, 8, 7, 1])
12

julia> sum_odd_at_odd([3, 3, 3, 3, 3])
9

julia> sum_odd_at_odd([30, 13, 24, 321])
0
```

The function correctly returns the expected results for all the examples.