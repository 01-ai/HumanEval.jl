 Certainly! Below is the implementation of the `next_smallest` function in Julia based on the given docstring:

```julia
"""
    next_smallest(xs::Vector{Int})::Union{Nothing,Int}

You are given a list of integers. Write a function `next_smallest(xs)` that
returns the 2nd smallest element of the list. Return `nothing` if there is no
such element.

# Examples

```jldoctest
julia> next_smallest([1, 2, 3, 4, 5])
2

julia> next_smallest([5, 1, 4, 3, 2])
2

julia> next_smallest(Int[])

julia> next_smallest([1, 1])

```
"""
function next_smallest(xs::Vector{Int})::Union{Nothing,Int}
    if length(xs) < 2
        return nothing
    end

    # Initialize the first and second smallest elements
    first_smallest = typemax(Int)
    second_smallest = typemax(Int)

    for x in xs
        if x < first_smallest
            second_smallest = first_smallest
            first_smallest = x
        elseif x < second_smallest && x != first_smallest
            second_smallest = x
        end
    end

    if second_smallest == typemax(Int)
        return nothing
    else
        return second_smallest
    end
end
```

### Explanation:
1. **Check Length**: The function first checks if the length of the input vector `xs` is less than 2. If so, it returns `nothing` because there cannot be a second smallest element.
2. **Initialize Variables**: It initializes `first_smallest` and `second_smallest` to the maximum possible integer value (`typemax(Int)`).
3. **Iterate Through List**: It iterates through each element in the list:
   - If the current element is smaller than `first_smallest`, it updates `second_smallest` to be `first_smallest` and then updates `first_smallest` to the current element.
   - If the current element is not equal to `first_smallest` and is smaller than `second_smallest`, it updates `second_smallest` to the current element.
4. **Check for Valid Second Smallest**: After the loop, if `second_smallest` is still `typemax(Int)`, it means there was no valid second smallest element, so it returns `nothing`. Otherwise, it returns `second_smallest`.

This implementation ensures that the function correctly identifies the second smallest element or returns `nothing` if it does not exist.