### Step-by-Step Outline

1. **Initialize a counter**: Start with a counter set to 0 to keep track of numbers that meet the criteria.

2. **Iterate through the array**: Go through each number in the input array.

3. **Check if the number is greater than 10**: For each number, first check if it is greater than 10. If not, skip to the next number.

4. **Extract the first and last digits**:
    - Convert the number to a string to easily access the first and last characters.
    - Extract the first and last characters and convert them back to integers.

5. **Check if the first and last digits are odd**:
    - Determine if both the first and last digits are odd (1, 3, 5, 7, 9).
    - If both are odd, increment the counter.

6. **Return the counter**: After iterating through all numbers, return the counter value, which represents the number of elements meeting the criteria.

### Julia Code Implementation

```julia
function specialFilter(nums::Vector{Int})::Int
    # Step 1: Initialize a counter
    count = 0
    
    # Step 2: Iterate through the array
    for num in nums
        # Step 3: Check if the number is greater than 10
        if num > 10
            # Step 4: Extract the first and last digits
            num_str = string(num)
            first_digit = parse(Int, num_str[1])
            last_digit = parse(Int, num_str[end])
            
            # Step 5: Check if the first and last digits are odd
            if first_digit % 2 != 0 && last_digit % 2 != 0
                # Increment the counter
                count += 1
            end
        end
    end
    
    # Step 6: Return the counter
    return count
end
```

This implementation follows the outlined steps to filter and count the numbers in the array that meet the specified criteria.