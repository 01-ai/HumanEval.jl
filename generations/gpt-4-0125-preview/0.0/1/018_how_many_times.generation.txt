To implement the `how_many_times` function in Julia, we can iterate through the original string and check for occurrences of the substring, including overlapping cases. Here's how you can do it:

```julia
"""
    how_many_times(s::String, sub_s::String)::Int

Find how many times a given substring can be found in the original string. Count
overlaping cases.

# Examples

```jldoctest
julia> how_many_times("", "a")
0

julia> how_many_times("aaa", "a")
3

julia> how_many_times("aaaa", "aa")
3
```
"""
function how_many_times(s::String, sub_s::String)::Int
    if isempty(sub_s)
        return 0
    end

    count = 0
    for i in 1:length(s) - length(sub_s) + 1
        if s[i:i+length(sub_s)-1] == sub_s
            count += 1
        end
    end

    return count
end
```

This function works by iterating through each possible starting position of the substring within the original string. For each position, it checks if the substring starting at that position matches the target substring. If it does, the count is incremented. This approach also correctly handles overlapping cases, as it does not skip any positions after finding a match.