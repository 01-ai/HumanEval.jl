Here is a Julia function that implements the described behavior:
```julia
function separate_paren_groups(paren_string::String)::Vector{String}
    # Remove spaces from the input string
    paren_string = replace(paren_string, " " => "")

    # Initialize an empty vector to store the separated groups
    groups = Vector{String}()

    # Initialize an empty string to build the current group
    current_group = ""

    # Initialize a counter to keep track of the nesting level
    nesting_level = 0

    # Iterate over each character in the input string
    for char in paren_string
        # If the character is an opening parenthesis, increment the nesting level
        if char == '('
            nesting_level += 1
            current_group *= char
        # If the character is a closing parenthesis, decrement the nesting level
        elseif char == ')'
            nesting_level -= 1
            current_group *= char
            # If the nesting level is 0, it means we've finished a group, so add it to the vector
            if nesting_level == 0
                push!(groups, current_group)
                current_group = ""
            end
        end
    end

    return groups
end
```
Here's an explanation of how the function works:

1. We first remove any spaces from the input string using the `replace` function.
2. We initialize an empty vector `groups` to store the separated groups, and an empty string `current_group` to build the current group.
3. We initialize a counter `nesting_level` to keep track of the nesting level of the parentheses.
4. We iterate over each character in the input string. If the character is an opening parenthesis, we increment the nesting level and add the character to the current group. If the character is a closing parenthesis, we decrement the nesting level and add the character to the current group. If the nesting level is 0 after adding a closing parenthesis, it means we've finished a group, so we add it to the vector and reset the current group.
5. Finally, we return the vector of separated groups.

You can test the function using the example provided in the docstring:
```julia
julia> separate_paren_groups("( ) (( )) (( )( ))")
3-element Vector{String}:
 "()"
 "(())"
 "(()())"
```