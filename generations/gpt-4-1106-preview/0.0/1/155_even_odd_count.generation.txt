Certainly! Below is the Julia function `even_odd_count` that takes an integer and returns a tuple with the count of even and odd digits:

```julia
function even_odd_count(num::Int)::Tuple{Int, Int}
    # Initialize counters for even and odd digits
    even_count = 0
    odd_count = 0

    # Work with the absolute value of the number to handle negative numbers
    num = abs(num)

    # Loop through each digit of the number
    while num > 0
        digit = num % 10  # Get the last digit
        if digit % 2 == 0
            even_count += 1  # Increment even counter if digit is even
        else
            odd_count += 1   # Increment odd counter if digit is odd
        end
        num = num รท 10  # Remove the last digit
    end

    return (even_count, odd_count)
end
```

You can test this function with the provided examples:

```julia
println(even_odd_count(-12))  # Output should be (1, 1)
println(even_odd_count(123))  # Output should be (1, 2)
```

This function works by iterating over each digit in the number, checking if it's even or odd, and incrementing the respective counter. It uses the modulo operator `%` to get the last digit and integer division `รท` to remove the last digit from the number. The function handles negative numbers by taking the absolute value before processing the digits.