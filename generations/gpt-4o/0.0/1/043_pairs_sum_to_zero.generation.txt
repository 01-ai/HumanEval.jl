Here's a Julia function that implements the `pairs_sum_to_zero` functionality as described:

```julia
function pairs_sum_to_zero(l::Vector{Int})::Bool
    seen = Set{Int}()
    for num in l
        if -num in seen
            return true
        end
        push!(seen, num)
    end
    return false
end
```

This function uses a set to keep track of the numbers we have seen so far. For each number in the list, it checks if the negation of that number is already in the set. If it is, then we have found a pair of numbers that sum to zero, and the function returns `true`. If the loop completes without finding such a pair, the function returns `false`.

Let's test the function with the provided examples:

```julia
println(pairs_sum_to_zero([1, 3, 5, 0]))  # false
println(pairs_sum_to_zero([1, 3, -2, 1]))  # false
println(pairs_sum_to_zero([1, 2, 3, 7]))  # false
println(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # true
println(pairs_sum_to_zero([1]))  # false
```

These should produce the expected results as per the docstring examples.