To implement the `intersection` function, we need to follow these steps:

1. Determine the intersection of the two intervals.
2. Calculate the length of the intersection.
3. Check if the length is a prime number.
4. Return "YES" if the length is prime, otherwise return "NO".

Here's the Julia function that accomplishes this:

```julia
function intersection(interval1::Vector{Int}, interval2::Vector{Int})::String
    # Find the maximum of the start points and the minimum of the end points
    start_max = max(interval1[1], interval2[1])
    end_min = min(interval1[2], interval2[2])

    # Check if the intervals intersect
    if start_max > end_min
        return "NO"
    end

    # Calculate the length of the intersection
    intersection_length = end_min - start_max + 1

    # Check if the length is a prime number
    if is_prime(intersection_length)
        return "YES"
    else
        return "NO"
    end
end

# Helper function to check if a number is prime
function is_prime(n::Int)::Bool
    if n <= 1
        return false
    end
    for i in 2:sqrt(n)
        if n % i == 0
            return false
        end
    end
    return true
end

# Examples
println(intersection([1, 2], [2, 3]))  # "NO"
println(intersection([-1, 1], [0, 4]))  # "NO"
println(intersection([-3, -1], [-5, 5]))  # "YES"
```

This code defines the `intersection` function and a helper function `is_prime` to check if a number is prime. The `intersection` function calculates the intersection length and uses `is_prime` to determine if that length is a prime number. The examples provided at the end of the code demonstrate how the function works.