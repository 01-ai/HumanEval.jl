Here's a Julia function that implements the `correct_angle_bracketing` functionality as described:

```julia
function correct_angle_bracketing(brackets::String)::Bool
    count = 0
    for bracket in brackets
        if bracket == '<'
            count += 1
        elseif bracket == '>'
            count -= 1
        end
        
        # If count becomes negative, it means we've encountered a closing bracket
        # without a corresponding opening bracket
        if count < 0
            return false
        end
    end
    
    # If count is 0, all brackets are properly matched
    return count == 0
end
```

This function works as follows:

1. We initialize a `count` variable to keep track of the number of unmatched opening brackets.

2. We iterate through each character in the input string:
   - If we encounter an opening bracket '<', we increment the count.
   - If we encounter a closing bracket '>', we decrement the count.

3. If at any point the count becomes negative, it means we've encountered a closing bracket without a corresponding opening bracket, so we return `false`.

4. After processing all characters, if the count is 0, it means all brackets are properly matched, so we return `true`. Otherwise, we return `false` (there are unmatched opening brackets).

This implementation correctly handles all the example cases:

```julia
julia> correct_angle_bracketing("<")
false

julia> correct_angle_bracketing("<>")
true

julia> correct_angle_bracketing("<<><>>")
true

julia> correct_angle_bracketing("><<>")
false
```

The function returns a boolean value as required, and it correctly identifies whether the angle brackets in the input string are properly matched.