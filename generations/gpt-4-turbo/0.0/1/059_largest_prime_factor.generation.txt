Here's the Julia function `largest_prime_factor` that computes the largest prime factor of a given integer `n`:

```julia
function largest_prime_factor(n::Int)::Int
    # Start with the smallest prime factor
    max_prime = -1
    
    # Check for number of 2s that divide n
    while n % 2 == 0
        max_prime = 2
        n = n รท 2
    end
    
    # n must be odd at this point, thus a skip of 2 (i.e., 3, 5, 7, 9, ...) is sufficient
    for i in 3:2:sqrt(n)
        # While i divides n, print i and divide n
        while n % i == 0
            max_prime = i
            n = n รท i
        end
    end
    
    # This condition is to check if n is a prime number greater than 2
    if n > 2
        max_prime = n
    end
    
    return max_prime
end
```

This function first removes all factors of 2 from `n` to handle even numbers. Then, it iterates over all odd numbers starting from 3 up to the square root of `n` to find other prime factors. If after removing all factors less than the square root `n` is still greater than 2, then `n` itself is a prime factor and the largest one. This function efficiently finds the largest prime factor by reducing `n` as factors are found, ensuring that the loop does not run unnecessarily long.