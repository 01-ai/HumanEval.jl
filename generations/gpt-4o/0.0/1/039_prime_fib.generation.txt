To implement the `prime_fib` function, we need to generate Fibonacci numbers and check if they are prime. We will continue this process until we find the n-th Fibonacci number that is also prime. Here's how we can do it:

1. Generate Fibonacci numbers.
2. Check if a Fibonacci number is prime.
3. Keep a count of how many prime Fibonacci numbers we have found.
4. Return the n-th prime Fibonacci number.

Let's implement this in Julia:

```julia
# Helper function to check if a number is prime
function is_prime(n::Int)::Bool
    if n <= 1
        return false
    elseif n <= 3
        return true
    elseif n % 2 == 0 || n % 3 == 0
        return false
    end
    i = 5
    while i * i <= n
        if n % i == 0 || n % (i + 2) == 0
            return false
        end
        i += 6
    end
    return true
end

# Function to return the n-th prime Fibonacci number
function prime_fib(n::Int)::Int
    a, b = 1, 1
    count = 0
    while true
        a, b = b, a + b
        if is_prime(a)
            count += 1
            if count == n
                return a
            end
        end
    end
end

# Test cases
println(prime_fib(1))  # Output: 2
println(prime_fib(2))  # Output: 3
println(prime_fib(3))  # Output: 5
println(prime_fib(4))  # Output: 13
println(prime_fib(5))  # Output: 89
```

This code defines a helper function `is_prime` to check if a number is prime and the main function `prime_fib` to find the n-th prime Fibonacci number. The `prime_fib` function generates Fibonacci numbers in a loop, checks if they are prime, and counts how many prime Fibonacci numbers have been found until it reaches the desired count.