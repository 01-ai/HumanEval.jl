To implement the `odd_count` function as described, we can follow these steps:

1. Iterate through each string in the input vector.
2. For each string, count the number of odd digits it contains.
3. Construct the output string for each input string, replacing the relevant parts with the count of odd digits.
4. Return the vector of constructed strings.

Here's how the implementation might look in Julia:

```julia
function odd_count(xs::Vector{String})::Vector{String}
    # Function to count odd digits in a string
    function count_odd_digits(s::String)::Int
        count = 0
        for c in s
            if isdigit(c) && (parse(Int, c) % 2 != 0)
                count += 1
            end
        end
        return count
    end

    # Main logic to process each string and construct the output
    result = Vector{String}()
    for x in xs
        odd_count = count_odd_digits(x)
        # Construct the output string with the odd count replacing the relevant parts
        output_str = replace("the number of odd elements in the string of the input.",
                             "in" => "$(odd_count)n", "string" => "str$(odd_count)ng", "input" => "$(odd_count)nput")
        push!(result, output_str)
    end

    return result
end
```

This function first defines a helper function `count_odd_digits` to count the number of odd digits in a given string. Then, for each string in the input vector, it calculates the count of odd digits and constructs the output string accordingly, making the necessary replacements. Finally, it returns the vector of constructed strings.