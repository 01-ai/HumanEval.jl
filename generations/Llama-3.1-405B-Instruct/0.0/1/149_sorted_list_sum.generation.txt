Here is the Julia function that implements the specified behavior:
```julia
function sorted_list_sum(xs::Vector{String})::Vector{String}
    # Filter out strings with odd lengths
    filtered_list = filter(s -> length(s) % 2 == 0, xs)
    
    # Sort the list by length and then alphabetically
    sorted_list = sort(filtered_list, by = s -> (length(s), s))
    
    return sorted_list
end
```
Here's an explanation of the code:

1. The `filter` function is used to remove strings with odd lengths from the input list `xs`. The predicate `s -> length(s) % 2 == 0` checks whether the length of a string is even.
2. The `sort` function is used to sort the filtered list. The `by` argument specifies a tuple of sorting criteria: first by length, and then alphabetically. This ensures that strings with the same length are sorted alphabetically.
3. The sorted list is returned as the result.

You can test this function using the examples provided in the docstring:
```julia
julia> sorted_list_sum(["aa", "a", "aaa"])
1-element Vector{String}:
 "aa"

julia> sorted_list_sum(["ab", "a", "aaa", "cd"])
2-element Vector{String}:
 "ab"
 "cd"
```