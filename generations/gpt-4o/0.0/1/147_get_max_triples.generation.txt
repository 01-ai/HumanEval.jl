To solve this problem, we need to follow these steps:

1. Generate the array `a` of length `n` where each element `a[i]` is calculated as `i * i - i + 1`.
2. Iterate through all possible triples `(a[i], a[j], a[k])` where `i < j < k`.
3. Check if the sum of the triple is a multiple of 3.
4. Count and return the number of such valid triples.

Here is the implementation of the `get_max_triples` function in Julia:

```julia
function get_max_triples(n::Int)::Int
    # Step 1: Generate the array a
    a = [i * i - i + 1 for i in 1:n]
    
    # Step 2: Initialize the count of valid triples
    count = 0
    
    # Step 3: Iterate through all possible triples (i, j, k) where i < j < k
    for i in 1:n-2
        for j in i+1:n-1
            for k in j+1:n
                # Step 4: Check if the sum of the triple is a multiple of 3
                if (a[i] + a[j] + a[k]) % 3 == 0
                    count += 1
                end
            end
        end
    end
    
    # Step 5: Return the count of valid triples
    return count
end

# Example usage
println(get_max_triples(5))  # Output should be 1
```

This function first constructs the array `a` using a list comprehension. It then uses three nested loops to iterate through all possible triples `(i, j, k)` where `i < j < k`. For each triple, it checks if the sum of the elements is a multiple of 3 and increments the count if the condition is met. Finally, it returns the count of such valid triples.