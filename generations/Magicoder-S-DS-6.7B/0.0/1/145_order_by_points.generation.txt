Here is a Julia function that implements the required functionality:

```julia
function order_by_points(nums::Vector{Int})::Vector{Int}
    # Create a tuple for each number, where the first element is the sum of its digits
    # and the second element is the original number
    nums_with_points = [(sum(digits(abs(num))), num) for num in nums]

    # Sort the numbers by their points and their original order
    sorted_nums = [num for (_, num) in sort(nums_with_points)]

    return sorted_nums
end
```

This function works by first creating a tuple for each number, where the first element is the sum of its digits and the second element is the original number. It then sorts these tuples by their points and their original order. The sorted numbers are then extracted from the tuples and returned.

The `digits` function is used to get the digits of a number, and the `abs` function is used to handle negative numbers.

You can test this function with the provided examples:

```julia
julia> order_by_points([1, 11, -1, -11, -12])
5-element Vector{Int64}:
 -1
 -11
   1
 -12
  11

julia> order_by_points(Int[])
Int64[]
```