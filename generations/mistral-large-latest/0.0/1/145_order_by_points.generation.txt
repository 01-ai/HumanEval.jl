Sure, here is the Julia function that meets your requirements:

```julia
function order_by_points(nums::Vector{Int})::Vector{Int}
    function sum_digits(n::Int)
        n == 0 && return 0
        return sum_digits(div(n, 10)) + rem(n, 10)
    end

    # Pair each number with its sum of digits and original index
    pairs = [(num, sum_digits(abs(num)), i) for (i, num) in enumerate(nums)]

    # Sort pairs first by sum of digits, then by original index
    sort!(pairs, by = x -> (x[2], x[3]))

    # Return the sorted numbers
    return [pair[1] for pair in pairs]
end
```

This function first defines a helper function `sum_digits` to calculate the sum of the digits of a number. Then it creates a vector of tuples, where each tuple contains a number, the sum of its digits, and its original index. It sorts this vector of tuples first by the sum of digits, then by the original index. Finally, it returns a vector of the sorted numbers.