```julia
function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}
    # Sort the numbers in ascending order
    sorted_numbers = sort(numbers)

    # Initialize the result with the first two elements
    result = (sorted_numbers[1], sorted_numbers[2])

    # Loop through the rest of the elements to find the closest pair
    for i in 3:length(numbers)
        # Calculate the distance between the current number and the previous two
        current_distance = abs(sorted_numbers[i] - result[1]) + abs(sorted_numbers[i] - result[2])

        # If the current distance is smaller, update the result
        if current_distance < abs(result[2] - result[1])
            result = (sorted_numbers[i], sorted_numbers[i - 1])
        end
    end

    return result
end
```

This function sorts the given vector of `Float64` numbers and then iterates over the sorted list to find the pair of numbers that are closest to each other. It does this by calculating the distance between the current number and the previous two numbers and updating the result if a closer pair is found.