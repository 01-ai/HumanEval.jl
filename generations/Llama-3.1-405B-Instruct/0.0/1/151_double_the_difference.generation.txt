Here is the Julia function that implements the specified behavior:
```julia
function double_the_difference(xs::Vector)
    sum(x^2 for x in xs if x isa Integer && x ≥ 0 && isodd(x))
end
```
Let me explain what's going on:

* We use a generator expression to iterate over the elements `x` in the input vector `xs`.
* We apply three conditions to filter out unwanted elements:
	+ `x isa Integer` checks if `x` is an integer.
	+ `x ≥ 0` checks if `x` is non-negative.
	+ `isodd(x)` checks if `x` is odd.
* If an element passes all these conditions, we square it using `x^2`.
* Finally, we sum up the squared values using the `sum` function.

Note that if the input list is empty, the `sum` function will return 0, which is the desired behavior.

You can test this function using the examples provided in the docstring:
```julia
julia> double_the_difference([1, 3, 2, 0])
10

julia> double_the_difference([-1, -2, 0])
0

julia> double_the_difference([9, -2])
81

julia> double_the_difference([0])
0
```