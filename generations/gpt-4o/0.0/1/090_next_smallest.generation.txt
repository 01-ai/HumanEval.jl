To implement the `next_smallest` function in Julia, we need to find the second smallest element in a given list of integers. If the list has fewer than two distinct elements, the function should return `nothing`.

Here's the step-by-step approach to achieve this:

1. **Check the length of the list**: If the list has fewer than two elements, return `nothing`.
2. **Sort the list**: Sorting will help us easily find the smallest and the second smallest elements.
3. **Find the second smallest element**: Iterate through the sorted list to find the first element that is different from the smallest element.

Let's implement this in Julia:

```julia
function next_smallest(xs::Vector{Int})::Union{Nothing, Int}
    if length(xs) < 2
        return nothing
    end
    
    sorted_xs = sort(xs)
    smallest = sorted_xs[1]
    
    for i in 2:length(sorted_xs)
        if sorted_xs[i] != smallest
            return sorted_xs[i]
        end
    end
    
    return nothing
end
```

### Explanation:
- **Line 2-4**: Check if the list has fewer than two elements. If so, return `nothing`.
- **Line 6**: Sort the list.
- **Line 7**: Store the smallest element (first element of the sorted list).
- **Line 9-12**: Iterate through the sorted list starting from the second element. Return the first element that is different from the smallest element.
- **Line 14**: If no such element is found, return `nothing`.

### Examples:
```julia
println(next_smallest([1, 2, 3, 4, 5]))  # Output: 2
println(next_smallest([5, 1, 4, 3, 2]))  # Output: 2
println(next_smallest(Int[]))            # Output: nothing
println(next_smallest([1, 1]))           # Output: nothing
```

This function should handle the given examples correctly and return the expected results.