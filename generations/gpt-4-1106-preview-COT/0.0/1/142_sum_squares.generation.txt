Let's outline the steps we need to take to implement the `sum_squares` function:

1. Define the function `sum_squares` that takes a single argument `xs`, which is a vector of integers.
2. Initialize a variable to keep track of the sum of the processed entries.
3. Iterate over the elements of the vector `xs` using their index.
4. Check if the current index is a multiple of 3. If it is, square the value at that index.
5. Check if the current index is a multiple of 4 but not a multiple of 3. If it is, cube the value at that index.
6. If the index is neither a multiple of 3 nor 4, do not change the value.
7. Add the processed value to the sum.
8. After the loop, return the sum.

Now, let's write the code for the `sum_squares` function:

```julia
function sum_squares(xs::Vector{Int})::Int
    sum = 0
    for (i, x) in enumerate(xs)
        if i % 3 == 0
            sum += x^2
        elseif i % 4 == 0
            sum += x^3
        else
            sum += x
        end
    end
    return sum
end
```

Please note that in Julia, array indexing starts at 1, so when we check for multiples of 3 or 4, we should consider this offset. The above code assumes that the index `i` starts at 1, which is the default in Julia.