To implement the `correct_angle_bracketing` function, we will follow these steps:

1. Initialize a counter to keep track of the number of unmatched opening brackets.
2. Iterate over each character in the input string.
3. If the current character is an opening bracket ("<"), increment the counter.
4. If the current character is a closing bracket (">"), decrement the counter.
5. If at any point the counter becomes negative, return `false` because a closing bracket has appeared without a corresponding opening bracket.
6. After the iteration, if the counter is zero, return `true` indicating all opening brackets have been matched with closing brackets. Otherwise, return `false`.

Now, let's write the code for the function:
```julia
function correct_angle_bracketing(brackets::String)::Bool
    # Step 1: Initialize the counter
    open_bracket_count = 0

    # Step 2: Iterate over each character in the string
    for bracket in brackets
        # Step 3: Check for opening bracket
        if bracket == '<'
            open_bracket_count += 1
        # Step 4: Check for closing bracket
        elseif bracket == '>'
            open_bracket_count -= 1
            # Step 5: Check if there is an unmatched closing bracket
            if open_bracket_count < 0
                return false
            end
        end
    end

    # Step 6: Check if all opening brackets have been matched
    return open_bracket_count == 0
end
```

This function should work as expected based on the provided examples.