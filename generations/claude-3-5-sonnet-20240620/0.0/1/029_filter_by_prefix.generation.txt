Here's a Julia function that implements the `filter_by_prefix` functionality as described:

```julia
function filter_by_prefix(xs::Vector{String}, prefix::String)::Vector{String}
    return filter(x -> startswith(x, prefix), xs)
end
```

This function does the following:

1. It takes two arguments:
   - `xs`: A vector of strings to be filtered
   - `prefix`: The prefix string to filter by

2. It uses Julia's `filter` function, which creates a new array containing only the elements from `xs` for which the given condition is `true`.

3. The condition is defined using an anonymous function `x -> startswith(x, prefix)`, which checks if each string `x` in `xs` starts with the given `prefix`.

4. The `startswith` function is used to check if a string begins with the specified prefix.

5. The function returns a new vector containing only the strings that start with the given prefix.

This implementation will work correctly for the given examples:

```julia
filter_by_prefix(String[], "a")  # Returns: String[]

filter_by_prefix(["abc", "bcd", "cde", "array"], "a")  # Returns: ["abc", "array"]
```

The function handles empty input arrays, returns an empty array when no strings match the prefix, and correctly filters strings that start with the given prefix.