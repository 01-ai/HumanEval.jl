Here is a step-by-step outline of how you can implement this function:

1. Sort the list in ascending order.
2. If the length of the list is odd, return the middle element.
3. If the length of the list is even, return the average of the two middle elements.

Here is the Julia code that implements this function:

```julia
function median(l::Vector)
    sorted_l = sort(l)
    n = length(sorted_l)
    if isodd(n)
        return sorted_l[div(n+1, 2)]
    else
        return (sorted_l[div(n, 2)] + sorted_l[div(n, 2) + 1]) / 2
    end
end
```

This function first sorts the input list in ascending order. Then it checks if the length of the list is odd or even. If it's odd, it returns the middle element. If it's even, it returns the average of the two middle elements.

Please note that Julia uses 1-based indexing, so we use `div(n+1, 2)` to get the middle element when `n` is odd, and `div(n, 2)` and `div(n, 2) + 1` to get the two middle elements when `n` is even.
