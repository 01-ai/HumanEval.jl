```julia
function tri(n::Int)::Vector{Int}
    if n < 1
        return Int[]
    end
    
    # Initialize the sequence with enough values to start
    tribonacci = [1]
    
    # Compute the sequence up to n
    for i in 2:n
        if i % 2 == 0
            push!(tribonacci, 1 + i รท 2)
        else
            # Ensure we have enough previous values to compute the next one
            if i == 2
                push!(tribonacci, tribonacci[end] + tribonacci[end] + 1)
            elseif i == 3
                push!(tribonacci, tribonacci[end] + tribonacci[end-1] + 1)
            else
                push!(tribonacci, tribonacci[end] + tribonacci[end-1] + tribonacci[end-2])
            end
        end
    end
    
    return tribonacci
end
```

This function `tri` computes the Tribonacci sequence up to the nth term. It handles the special cases for the first few terms and uses a loop to compute subsequent terms based on the conditions provided. The sequence is stored in a vector `tribonacci`, which is returned at the end of the function.