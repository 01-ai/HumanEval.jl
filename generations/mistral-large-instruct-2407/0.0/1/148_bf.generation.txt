 Certainly! Below is the implementation of the `bf` function in Julia based on the provided docstring:

```julia
"""
    bf(planet1::String, planet2::String)::NTuple

There are eight planets in our solar system: the closerst to the Sun is Mercury,
the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write
a function that takes two planet names as strings `planet1` and `planet2`. The
function should return a tuple containing all planets whose orbits are located
between the orbit of `planet1` and the orbit of `planet2`, sorted by the
proximity to the sun. The function should return an empty tuple if `planet1` or
`planet2` are not correct planet names.

# Examples

```jldoctest
julia> bf("Jupiter", "Neptune")
("Saturn", "Uranus")

julia> bf("Earth", "Mercury")
("Venus",)

julia> bf("Mercury", "Uranus")
("Venus", "Earth", "Mars", "Jupiter", "Saturn")
```
"""
function bf(planet1::String, planet2::String)::NTuple
    planets = ("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")

    idx1 = findfirst(==(planet1), planets)
    idx2 = findfirst(==(planet2), planets)

    if idx1 === nothing || idx2 === nothing
        return ()
    end

    start_idx = min(idx1, idx2) + 1
    end_idx = max(idx1, idx2) - 1

    if start_idx > end_idx
        return ()
    end

    return tuple(planets[start_idx:end_idx]...)
end
```

### Explanation:
1. **Planets Tuple**: We define a tuple `planets` containing the names of the planets in order of their proximity to the Sun.
2. **Finding Indices**: We use `findfirst` to get the indices of `planet1` and `planet2` in the `planets` tuple.
3. **Validation**: If either `planet1` or `planet2` is not found in the `planets` tuple, the function returns an empty tuple.
4. **Determine Range**: We calculate the range of indices between `planet1` and `planet2`.
5. **Return Result**: If the range is valid (i.e., `start_idx` is less than or equal to `end_idx`), we return the planets in that range as a tuple. Otherwise, we return an empty tuple.

This implementation ensures that the function behaves as expected according to the provided examples.