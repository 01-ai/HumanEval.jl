### Step-by-Step Outline

1. **Input Validation**: Ensure that both input strings `a` and `b` are of the same length. If not, return an error or handle it as per requirements.
2. **XOR Operation**: Iterate through each character of both strings simultaneously.
    - Convert each character from both strings into integers (since the characters will be '0' or '1', they can be directly converted).
    - Perform the XOR operation on these integers.
    - Convert the result back to a character ('0' or '1') and append it to the result string.
3. **Return Result**: After iterating through all characters, return the result string.

### Julia Code Implementation

```julia
function string_xor(a::String, b::String)::String
    # Step 1: Input Validation (Assuming inputs are always valid for simplicity)
    if length(a) != length(b)
        error("Input strings must be of the same length")
    end

    # Step 2: XOR Operation
    result = String[]  # Initialize an empty array to store result characters
    for i in 1:length(a)
        # Convert characters to integers, perform XOR, and convert back to character
        xor_result = string(parse(Int, a[i]) ⊻ parse(Int, b[i]))
        push!(result, xor_result)  # Append the result to the result array
    end

    # Step 3: Return Result
    return join(result)  # Convert the array of characters back into a string
end
```

This implementation follows the outlined steps, performing a character-wise XOR operation on the input strings and returning the result as a string. Note that `⊻` is the Julia operator for XOR.