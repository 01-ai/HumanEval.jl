

Here is a possible implementation of the `triples_sum_to_zero` function in Julia:

```julia
function triples_sum_to_zero(l::Vector{Int})::Bool
    n = length(l)
    if n < 3
        return false
    end
    sort!(l)
    for i = 1:n-2
        if i > 1 && l[i] == l[i-1]
            continue  # Skip same element to avoid duplicates
        end
        j, k = i+1, n
        while j < k
            s = l[i] + l[j] + l[k]
            if s < 0
                j += 1
            elseif s > 0
                k -= 1
            else
                return true
            end
        end
    end
    return false
end
```

This function first checks if there are at least three elements in the list. If not, it immediately returns `false`. Then it sorts the list and iterates over the elements. For each element, it uses two pointers `j` and `k` to search for two other elements that sum to `-l[i]`. If the sum of `l[i]`, `l[j]` and `l[k]` is less than 0, it moves `j` to the right. If the sum is more than 0, it moves `k` to the left. If the sum is exactly 0, it returns `true`. If the function finishes iterating over all elements without finding a triple, it returns `false`.