Here's the implementation of the `valid_date` function in Julia that validates a given date string based on the specified rules:

```julia
function valid_date(date::String)::Bool
    # Rule 1: Check if the date string is empty
    if isempty(date)
        return false
    end

    # Rule 4: Check if the date is in the format: mm-dd-yyyy
    parts = split(date, "-")
    if length(parts) != 3
        return false
    end

    # Extract the month, day, and year from the date string
    month, day, year = parse.(Int, parts)

    # Rule 3: Check if the month is valid (between 1 and 12)
    if month < 1 || month > 12
        return false
    end

    # Rule 2: Check if the day is valid based on the month
    if month in [4, 6, 9, 11]
        if day < 1 || day > 30
            return false
        end
    elseif month == 2
        if day < 1 || day > 29
            return false
        end
    else
        if day < 1 || day > 31
            return false
        end
    end

    return true
end
```

Explanation:
1. First, we check if the date string is empty using the `isempty` function. If it is empty, we return `false` since an empty date string is not valid.

2. We check if the date string is in the format "mm-dd-yyyy" by splitting it using the `-` delimiter. If the resulting array doesn't have exactly 3 parts, the date format is invalid, and we return `false`.

3. We extract the month, day, and year from the date string by parsing the corresponding parts as integers using the `parse` function.

4. We check if the month is valid by ensuring it is between 1 and 12 (inclusive). If the month is outside this range, we return `false`.

5. We check if the day is valid based on the month:
   - For months 4, 6, 9, and 11, the day should be between 1 and 30 (inclusive).
   - For month 2 (February), the day should be between 1 and 29 (inclusive). Note that this assumes a leap year, and additional checks can be added for more precise validation if needed.
   - For all other months, the day should be between 1 and 31 (inclusive).

6. If all the above checks pass, the date is considered valid, and we return `true`.

The function will return `true` if the given date string satisfies all the rules and `false` otherwise.

Note: This implementation assumes that the year is not validated beyond the format check. If desired, additional checks can be added to validate the year as well.