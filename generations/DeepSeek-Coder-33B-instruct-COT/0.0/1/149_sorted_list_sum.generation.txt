Here is a step-by-step outline of the function:

1. Initialize an empty list to store the result.
2. Iterate over the input list.
3. For each string in the list, check if its length is even.
4. If the length is even, add the string to the result list.
5. After all strings have been checked, sort the result list by length and then alphabetically.
6. Return the sorted result list.

Here is the Julia code that implements the function:

```julia
function sorted_list_sum(xs::Vector{String})::Vector{String}
    result = String[]
    for x in xs
        if length(x) % 2 == 0
            push(result, x)
        end
    end
    sort(result, by = x -> (length(x), x))
end
```

This function uses the `push` function to add strings to the result list, the `length` function to get the length of a string, the `%` operator to check if a number is even, and the `sort` function with a custom sorting function to sort the result list. The custom sorting function returns a tuple, where the first element is the length of the string and the second element is the string itself. This causes the `sort` function to sort the list first by length and then by alphabetical order.
