Here's a solution to find the largest divisor of a given number `n` in Julia:

```julia
function largest_divisor(n::Int)::Int
    for i in (n-1):-1:1
        if n % i == 0
            return i
        end
    end
    return 1
end
```

Explanation:
1. The function `largest_divisor` takes an integer `n` as input and returns an integer.
2. We start a loop that iterates from `n-1` down to `1` (in reverse order). This is done using the range `(n-1):-1:1`.
3. Inside the loop, we check if `n` is divisible by the current value of `i` using the modulo operator `%`. If `n % i == 0`, it means `i` is a divisor of `n`.
4. If a divisor is found, we immediately return that value using the `return` statement. This ensures that we return the largest divisor found.
5. If no divisor is found after the loop ends, it means the only divisor of `n` is `1`. In that case, we return `1`.

Example usage:
```jldoctest
julia> largest_divisor(15)
5

julia> largest_divisor(17)
1

julia> largest_divisor(24)
12
```

In the first example, the largest divisor of 15 is 5.
In the second example, 17 is a prime number, so its only divisor is 1.
In the third example, the largest divisor of 24 is 12.

The time complexity of this solution is O(n) since we iterate from `n-1` down to `1` in the worst case. However, for most numbers, the largest divisor is found much earlier, so the actual runtime is often better than O(n).