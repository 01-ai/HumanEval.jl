To implement the `max_element` function in Julia, we will follow these steps:

1. Define the function `max_element(xs)` that takes a list `xs` as an argument.
2. Check if the list is empty. If it is, we may choose to return `nothing` or throw an error, as a list with no elements does not have a maximum.
3. Initialize a variable `max_val` with the first element of the list.
4. Iterate over the elements of the list starting from the second element.
5. For each element, compare it with `max_val`. If the element is greater than `max_val`, update `max_val` with this element.
6. After the loop, return `max_val` as it holds the maximum element in the list.

Now, let's write the code for the `max_element` function:

```julia
function max_element(xs)
    # Step 2: Check if the list is empty
    if isempty(xs)
        throw(ArgumentError("The list cannot be empty"))
    end
    
    # Step 3: Initialize max_val with the first element of the list
    max_val = xs[1]
    
    # Step 4: Iterate over the elements of the list
    for x in xs[2:end]
        # Step 5: Update max_val if the current element is greater
        if x > max_val
            max_val = x
        end
    end
    
    # Step 6: Return the maximum element
    return max_val
end
```

Let's test the function with the provided examples:

```julia
println(max_element([1, 2, 3])) # Should print 3
println(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) # Should print 123
```

Note: In practice, Julia has a built-in function `maximum(xs)` that returns the maximum element in a collection `xs`. However, for the purpose of this exercise, we are implementing the logic manually.