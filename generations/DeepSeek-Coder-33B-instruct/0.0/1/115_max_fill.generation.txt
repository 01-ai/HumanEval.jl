Here is a Julia function that solves the problem:

```julia
function max_fill(grid::Vector{Vector{Int}}, capacity::Int)::Int
    n, m = size(grid)
    buckets = 0
    for j in 1:m
        count = 0
        for i in 1:n
            if grid[i][j] == 1
                count += 1
            end
        end
        buckets += ceil(Int, count / capacity)
    end
    return buckets
end
```

This function works by iterating over each column (well) in the grid. For each well, it counts the number of units of water (represented by 1s in the grid). It then divides this count by the capacity of the bucket and rounds up to the nearest integer to determine the number of buckets needed to empty the well. The total number of buckets needed is the sum of the buckets needed for each well.

For example, for the input `max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)`, the function first counts the number of units of water in each well: 1, 1, 3. Then it divides each count by the capacity (1) and rounds up to the nearest integer: 1, 1, 3. The sum of these values is 5, so the function returns 5.
