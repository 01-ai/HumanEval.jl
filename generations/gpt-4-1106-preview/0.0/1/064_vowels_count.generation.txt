Here is the Julia function `vowels_count` that implements the specified behavior:

```julia
function vowels_count(s::String)::Int
    vowels = Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])
    count = 0

    for c in s
        if c in vowels
            count += 1
        end
    end

    # Check if the last character is 'y' or 'Y' and treat it as a vowel
    if !isempty(s) && (s[end] == 'y' || s[end] == 'Y')
        count += 1
    end

    return count
end

# Examples
println(vowels_count("abcde"))  # Output: 2
println(vowels_count("ACEDY"))  # Output: 3
```

This function iterates over each character in the string `s` and checks if it is in the set of vowels. If it is, the function increments the `count`. After the loop, it checks if the last character is 'y' or 'Y' and, if so, treats it as a vowel by incrementing the `count` again. Finally, the function returns the total count of vowels.