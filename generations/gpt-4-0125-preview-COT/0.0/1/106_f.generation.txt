### Step-by-Step Outline

1. **Initialize the result vector**: Create an empty vector of integers with size `n` to store the results.

2. **Loop through 1 to n**: Iterate over each number `i` from 1 to `n`.

3. **Check if `i` is even or odd**:
   - If `i` is even, calculate the factorial of `i` and store it in the result vector at the corresponding index.
   - If `i` is odd, calculate the sum of numbers from 1 to `i` and store it in the result vector at the corresponding index.

4. **Calculate factorial**: Implement a helper function or an inline calculation to compute the factorial of a given number `i`.

5. **Calculate sum of numbers from 1 to `i`**: Implement a helper function or an inline calculation to compute the sum of numbers from 1 to `i`.

6. **Return the result vector**: After populating the result vector with the appropriate values, return it.

### Julia Code Implementation

```julia
function f(n::Int)::Vector{Int}
    # Step 1: Initialize the result vector
    result = Vector{Int}(undef, n)
    
    # Step 2: Loop through 1 to n
    for i in 1:n
        # Step 3: Check if `i` is even or odd
        if i % 2 == 0
            # Step 4: Calculate factorial for even `i`
            result[i] = factorial(i)
        else
            # Step 5: Calculate sum for odd `i`
            result[i] = sum(1:i)
        end
    end
    
    # Step 6: Return the result vector
    return result
end

# Helper function to calculate factorial (if not using built-in)
function factorial(n::Int)::Int
    if n == 0
        return 1
    else
        return n * factorial(n - 1)
    end
end
```

Note: In this implementation, I've shown how to define a `factorial` function for educational purposes. However, Julia has a built-in `factorial` function that could be used directly to simplify the code.