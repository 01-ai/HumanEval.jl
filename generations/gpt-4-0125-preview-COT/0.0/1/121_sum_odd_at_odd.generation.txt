### Step-by-Step Outline

1. **Initialize a sum variable**: Start with a variable to keep track of the sum of odd elements at odd positions. Set it to 0 initially.

2. **Iterate through the list with indices**: Use a loop to go through the list, but also keep track of the index of each element. Since we are interested in odd positions and Julia is 1-indexed, odd positions correspond to odd indices.

3. **Check for odd elements at odd positions**:
    - Within the loop, first check if the index is odd. This can be done using the modulo operator (`%`) to see if the index modulo 2 is not equal to 0.
    - If the index is odd, then check if the element at that index is odd using a similar modulo operation.
    - If both conditions are true, add the element to the sum variable.

4. **Return the sum**: After the loop has finished, return the sum variable, which now holds the sum of all odd elements at odd positions.

### Julia Code Implementation

```julia
function sum_odd_at_odd(xs::Vector{Int})::Int
    # Step 1: Initialize sum variable
    sum = 0
    
    # Step 2: Iterate through the list with indices
    for (index, value) in enumerate(xs)
        # Step 3: Check for odd elements at odd positions
        if index % 2 != 0 && value % 2 != 0
            sum += value  # Add to sum if both conditions are met
        end
    end
    
    # Step 4: Return the sum
    return sum
end
```

This function should work as expected based on the provided examples and the outlined steps.