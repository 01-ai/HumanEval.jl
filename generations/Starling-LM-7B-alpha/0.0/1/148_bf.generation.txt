 Here's a Julia function that implements the described functionality:

```julia
function bf(planet1::String, planet2::String)::NTuple
    planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
    index1 = findfirst(x -> x == planet1, planets)
    index2 = findfirst(x -> x == planet2, planets)

    if index1 === nothing || index2 === nothing
        return ()
    end

    result = planets[index1+1:index2-1]
    sort!(result)

    return result
end
```

This function first defines an array `planets` containing the names of all eight planets in the solar system. It then uses the `findfirst` function to find the indices of `planet1` and `planet2` in the `planets` array. If either index is `nothing`, it means that the planet name is not found in the `planets` array, and the function returns an empty tuple.

If both indices are found, the function creates a sub-array of `planets` containing the planets between the orbits of `planet1` and `planet2`. It then sorts the sub-array by the proximity to the sun using the `sort!` function. Finally, the function returns the sorted sub-array as a tuple.