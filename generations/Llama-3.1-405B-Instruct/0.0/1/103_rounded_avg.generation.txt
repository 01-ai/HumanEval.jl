Here is the Julia function that implements the specified behavior:
```julia
"""
    rounded_avg(n::Int, m::Int)::Union{Int, String}

You are given two positive integers n and m, and your task is to compute the
average of the integers from n through m (including n and m). Round the answer
to the nearest integer and convert that to binary. If n is greater than m,
return -1.

# Examples

```jldoctest
julia> rounded_avg(1, 5)
"11"

julia> rounded_avg(7, 5)
-1

julia> rounded_avg(10, 20)
"1111"

julia> rounded_avg(20, 33)
"11010"
```
"""
function rounded_avg(n::Int, m::Int)::Union{Int, String}
    if n > m
        return -1
    end

    # Calculate the sum of integers from n to m
    total = sum(n:m)

    # Calculate the average and round to the nearest integer
    avg = round(Int, total / (m - n + 1))

    # Convert the rounded average to binary and return as a string
    return bitstring(avg)[end:-1:1]  # Remove leading zeros and reverse
end
```
Here's an explanation of the code:

1. We first check if `n` is greater than `m`, and if so, return -1 immediately.
2. We calculate the sum of integers from `n` to `m` using the `sum` function and the range `n:m`.
3. We calculate the average by dividing the sum by the number of integers in the range (`m - n + 1`), and round the result to the nearest integer using the `round` function.
4. We convert the rounded average to binary using the `bitstring` function, which returns a string of binary digits. We then remove leading zeros by indexing from the end of the string, and reverse the string to get the correct binary representation.

You can test this function using the examples provided in the docstring. Let me know if you have any further questions!