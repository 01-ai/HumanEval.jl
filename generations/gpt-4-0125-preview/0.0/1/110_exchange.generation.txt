To solve this problem, we need to check if it's possible to exchange odd numbers in `lst1` with even numbers in `lst2` to make all numbers in `lst1` even. Here's how we can implement the `exchange` function in Julia:

```julia
function exchange(lst1::Vector{Int}, lst2::Vector{Int})::String
    # Count the number of odd elements in lst1
    odd_count_lst1 = count(x -> x % 2 != 0, lst1)
    
    # Count the number of even elements in lst2
    even_count_lst2 = count(x -> x % 2 == 0, lst2)
    
    # If there are enough even elements in lst2 to exchange with all odd elements in lst1, return "YES"
    if odd_count_lst1 <= even_count_lst2
        return "YES"
    else
        return "NO"
    end
end
```

This function works by first counting the number of odd elements in `lst1` and the number of even elements in `lst2`. If the number of even elements in `lst2` is greater than or equal to the number of odd elements in `lst1`, it means we can exchange all odd elements in `lst1` with even elements from `lst2`, making `lst1` a list of only even numbers. Otherwise, it's not possible, and the function returns "NO".