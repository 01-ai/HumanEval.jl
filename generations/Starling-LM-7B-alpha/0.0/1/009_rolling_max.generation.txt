 Here's a Julia function that implements the rolling maximum algorithm as described in the docstring:

```julia
function rolling_max(numbers::Vector{Int})::Vector{Int}
    max_values = Vector{Int}(undef, length(numbers))
    max_value = 0

    for i in 1:length(numbers)
        max_value = max(max_value, numbers[i])
        max_values[i] = max_value
    end

    return max_values
end
```

This function takes a vector of integers as input and returns a vector of rolling maximum elements found until the given moment in the sequence. The function initializes an empty vector `max_values` to store the rolling maximum values. It also initializes a variable `max_value` to 0, which will keep track of the maximum value found so far.

The function then iterates through the input vector using a `for` loop. For each element in the vector, it updates the `max_value` by taking the maximum of the current element and the previous `max_value`. It also stores the updated `max_value` in the `max_values` vector at the corresponding index.

Finally, the function returns the `max_values` vector, which contains the rolling maximum elements found until the given moment in the sequence.