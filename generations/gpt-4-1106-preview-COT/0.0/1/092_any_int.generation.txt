### Step-by-Step Outline:

1. Define the function `any_int` that takes three parameters `x`, `y`, and `z`.
2. Check if all the numbers are integers using the `isinteger` function.
3. If all numbers are integers, check if any of the numbers is equal to the sum of the other two.
4. Return `true` if the condition in step 3 is met, otherwise return `false`.

### Julia Code:

```julia
function any_int(x::Number, y::Number, z::Number)::Bool
    # Step 2: Check if all numbers are integers
    if isinteger(x) && isinteger(y) && isinteger(z)
        # Step 3: Check if any number is equal to the sum of the other two
        return (x == y + z) || (y == x + z) || (z == x + y)
    else
        # If not all numbers are integers, return false
        return false
    end
end

# Examples
println(any_int(5, 2, 7))   # true
println(any_int(3, 2, 2))   # false
println(any_int(3, -2, 1))  # true
println(any_int(3.6, -2.2, 2))  # false
```

Please note that the `isinteger` function checks if the value is exactly an integer, not just if it can be converted to an integer. This means that floating-point numbers that represent whole numbers (like `2.0`) will not be considered integers by `isinteger`. If you want to allow such cases, you would need to use a different approach to check for integer-like values.