To implement the function `largest_prime_factor(n::Int)::Int`, we need to follow these steps:

1. Start with the smallest prime number, which is 2.
2. Divide `n` by this prime number as long as it is divisible.
3. Move to the next prime number and repeat the process.
4. Keep track of the largest prime factor found.
5. Continue this process until `n` becomes 1.

Here's the implementation in Julia:

```julia
function largest_prime_factor(n::Int)::Int
    largest_factor = 1
    # Check for divisibility by 2
    while n % 2 == 0
        largest_factor = 2
        n รท= 2
    end
    # Check for odd factors from 3 onwards
    factor = 3
    while n > 1
        while n % factor == 0
            largest_factor = factor
            n รท= factor
        end
        factor += 2
    end
    return largest_factor
end
```

This function works as follows:
- It first checks for divisibility by 2 and keeps dividing `n` by 2 until it is no longer divisible.
- Then, it checks for odd factors starting from 3, incrementing by 2 each time (to skip even numbers).
- For each factor, it keeps dividing `n` by the factor as long as it is divisible and updates the largest factor found.
- The process continues until `n` becomes 1, at which point the largest prime factor is returned.

This approach ensures that we efficiently find the largest prime factor of `n`.