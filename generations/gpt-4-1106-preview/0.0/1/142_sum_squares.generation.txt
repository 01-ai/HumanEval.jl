Here is the Julia function `sum_squares` that implements the described behavior:

```julia
function sum_squares(xs::Vector{Int})::Int
    sum = 0
    for (index, value) in enumerate(xs)
        if index % 3 == 0
            sum += value^2
        elseif index % 4 == 0
            sum += value^3
        else
            sum += value
        end
    end
    return sum
end

# Examples
println(sum_squares([1, 2, 3])) # Output: 12
println(sum_squares(Int[])) # Output: 0
println(sum_squares([-1, -5, 2, -1, -5])) # Output: -8
```

This function iterates over the list of integers, checking the index of each element. If the index is a multiple of 3, it squares the value; if the index is a multiple of 4 but not a multiple of 3, it cubes the value. Otherwise, it adds the value as is. The sum of all these modified values is then returned.