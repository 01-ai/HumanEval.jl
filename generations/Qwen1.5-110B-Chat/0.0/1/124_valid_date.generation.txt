```julia
function valid_date(date::String)::Bool
    # Check if the date string is not empty
    if isempty(date)
        return false
    end
    
    # Check if the date format is mm-dd-yyyy
    if occursin(r"\d{2}-\d{2}-\d{4}", date) == false
        return false
    end
    
    # Parse the date components
    try
        month, day, year = parse.(Int, split(date, "-"))
    catch
        return false
    end
    
    # Check if month is between 1 and 12
    if month < 1 || month > 12
        return false
    end
    
    # Check the number of days based on the month
    if month in [1, 3, 5, 7, 8, 10, 12] && (day < 1 || day > 31)
        return false
    elseif month in [4, 6, 9, 11] && (day < 1 || day > 30)
        return false
    elseif month == 2
        # Account for leap years
        if year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) && (day < 1 || day > 29)
            return false
        elseif (day < 1 || day > 28)
            return false
        end
    else
        return false
    end
    
    return true
end
```
This Julia function `valid_date` validates a given date string based on the rules provided in the doc string. It checks the non-empty condition, correct format, month and day validity including leap years, and returns `true` if the date is valid, `false` otherwise.