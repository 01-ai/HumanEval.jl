Here is the implementation for the `move_one_ball` function in Julia:

```julia
function move_one_ball(xs::Vector{Int})::Bool
    if isempty(xs)
        return true
    end
    
    n = length(xs)
    sorted_xs = sort(xs)
    
    for i in 1:n
        shifted_xs = circshift(xs, i-1)
        if shifted_xs == sorted_xs
            return true
        end
    end
    
    return false
end
```

The function first checks if the input array `xs` is empty. If it is, it returns `true` since an empty array is considered sorted. Otherwise, it initializes a sorted version of the array `sorted_xs` using the `sort` function.

Then, it iterates through all possible right shift operations by shifting the array `xs` by `i-1` positions using the `circshift` function. If the shifted array is equal to the sorted array `sorted_xs`, it means that a non-decreasing order can be achieved by performing the right shift operation, so the function returns `true`.

If no right shift operation results in a sorted array, the function returns `false`.