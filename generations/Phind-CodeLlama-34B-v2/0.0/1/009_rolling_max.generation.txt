

Here is the Julia function that implements the `rolling_max` function as described in the docstring:

```julia
function rolling_max(numbers::Vector{Int})::Vector{Int}
    max_values = Int[]
    current_max = numbers[1]
    push!(max_values, current_max)
    for number in numbers[2:end]
        current_max = max(current_max, number)
        push!(max_values, current_max)
    end
    return max_values
end
```

This function works by initializing `current_max` to the first element of `numbers` and pushing it to `max_values`. Then, it iterates over the rest of `numbers`. For each number, it updates `current_max` to be the maximum of `current_max` and the current number, and pushes `current_max` to `max_values`. Finally, it returns `max_values`.