### Step-by-Step Outline

1. **Identify Odd Elements in lst1**: Determine which elements in `lst1` are odd, as these are the elements that need to be exchanged to make `lst1` a list of only even numbers.

2. **Identify Even Elements in lst2**: Determine which elements in `lst2` are even, as these are the potential candidates for exchange with the odd elements in `lst1`.

3. **Compare Counts of Odd and Even Elements**: Compare the number of odd elements in `lst1` with the number of even elements in `lst2`. If the number of even elements in `lst2` is greater than or equal to the number of odd elements in `lst1`, then it is possible to perform the exchange, and the function should return "YES". Otherwise, return "NO".

4. **Implement the Function**: Based on the steps outlined above, implement the `exchange` function.

### Julia Code Implementation

```julia
function exchange(lst1::Vector{Int}, lst2::Vector{Int})::String
    # Step 1: Identify Odd Elements in lst1
    odd_in_lst1 = count(x -> x % 2 != 0, lst1)
    
    # Step 2: Identify Even Elements in lst2
    even_in_lst2 = count(x -> x % 2 == 0, lst2)
    
    # Step 3: Compare Counts of Odd and Even Elements
    if even_in_lst2 >= odd_in_lst1
        return "YES"
    else
        return "NO"
    end
end
```

This implementation follows the outlined steps to determine whether it is possible to exchange elements between `lst1` and `lst2` to make all the elements of `lst1` even. It leverages Julia's `count` function with appropriate lambda functions to count odd and even elements efficiently.