To implement the `count_nums` function, we will follow these steps:

1. Define the function `count_nums` that takes a vector of integers `xs` as an argument.
2. Initialize a counter to keep track of numbers with a sum of digits greater than 0.
3. Iterate over each number in the vector `xs`.
4. For each number, calculate the sum of its digits, taking into account that the first digit of a negative number should be negative.
5. Check if the sum of digits is greater than 0.
6. If the sum is greater than 0, increment the counter.
7. After iterating through all numbers, return the counter.

Now, let's write the code for the function based on the outline:

```julia
function count_nums(xs::Vector{Int})::Int
    count = 0
    for x in xs
        sum_digits = 0
        if x < 0
            sum_digits -= abs(x) % 10  # Subtract the first digit
            x = div(x, -10)  # Remove the first digit and make x positive
        end
        while x > 0
            sum_digits += x % 10
            x = div(x, 10)
        end
        if sum_digits > 0
            count += 1
        end
    end
    return count
end
```

Let's test the function with the provided examples:

```julia
println(count_nums(Int[]))  # Expected output: 0
println(count_nums([-1, 11, -11]))  # Expected output: 1
println(count_nums([1, 1, 2]))  # Expected output: 3
```

This code should work correctly according to the specification given in the doc string.