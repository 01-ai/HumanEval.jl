

function intersection(interval1::Vector{Int}, interval2::Vector{Int})::String
    start1, end1 = interval1
    start2, end2 = interval2

    # Find the intersection of the two intervals
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)

    # If there is no intersection, return "NO"
    if intersection_end < intersection_start
        return "NO"
    end

    # Calculate the length of the intersection
    length = intersection_end - intersection_start + 1

    # Check if the length is a prime number
    if length < 2
        return "NO"
    end

    for i in 2:length รท 2
        if length % i == 0
            return "NO"
        end
    end

    return "YES"
end

# Test cases
@assert intersection([1, 2], [2, 3]) == "NO"
@assert intersection([-1, 1], [0, 4]) == "NO"
@assert intersection([-3, -1], [-5, 5]) == "YES"
