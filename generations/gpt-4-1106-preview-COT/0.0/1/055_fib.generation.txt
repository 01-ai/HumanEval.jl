To implement the `fib` function in Julia, we will follow these steps:

1. Check if the input `n` is less than or equal to 0. If so, return 0 because the Fibonacci sequence is not defined for non-positive indices.
2. Check if `n` is 1 or 2, return 1 because these are the first two numbers in the Fibonacci sequence.
3. Initialize two variables to store the previous two Fibonacci numbers, for example, `a = 0` and `b = 1`.
4. Use a loop to calculate the Fibonacci number from the 3rd to the `n`-th. In each iteration, calculate the next Fibonacci number by adding the previous two numbers, update the variables `a` and `b` accordingly.
5. After the loop, return the last calculated Fibonacci number.

Now, let's write the code for the `fib` function:

```julia
function fib(n::Int)::Int
    # Step 1: Base cases for non-positive n
    if n <= 0
        return 0
    end

    # Step 2: Base cases for n being 1 or 2
    if n == 1 || n == 2
        return 1
    end

    # Step 3: Initialize the previous two Fibonacci numbers
    a, b = 0, 1

    # Step 4: Loop to calculate the n-th Fibonacci number
    for i in 3:n
        a, b = b, a + b
    end

    # Step 5: Return the last calculated Fibonacci number
    return b
end
```

This function uses an iterative approach to calculate the Fibonacci number, which is efficient for large values of `n`. It avoids the exponential time complexity of the naive recursive approach.