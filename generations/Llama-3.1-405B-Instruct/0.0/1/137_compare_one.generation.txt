Here is the Julia function that meets the requirements:
```julia
function compare_one(a::Union{Integer, AbstractFloat, AbstractString}, b::Union{Integer, AbstractFloat, AbstractString})::Union{Integer, AbstractFloat, AbstractString, Nothing}
    # Convert strings to floats, handling both . and , as decimal separators
    a_float = typeof(a) <: AbstractString ? parse(Float64, replace(a, ',' => '.')) : float(a)
    b_float = typeof(b) <: AbstractString ? parse(Float64, replace(b, ',' => '.')) : float(b)

    # Compare the values
    if a_float > b_float
        return a
    elseif a_float < b_float
        return b
    else
        return nothing
    end
end
```
Here's an explanation of the code:

1. We first convert the input strings to floats using `parse(Float64, ...)`, replacing any commas with dots using `replace`.
2. We then compare the float values using simple conditional statements.
3. If the values are equal, we return `nothing`.
4. Otherwise, we return the original value that was larger.

You can test this function using the examples provided in the docstring:
```julia
println(compare_one(1, 2.5))  # 2.5
println(compare_one(1, "2,3"))  # "2,3"
println(compare_one("5,1", "6"))  # "6"
println(compare_one("1", 1))  # nothing
```