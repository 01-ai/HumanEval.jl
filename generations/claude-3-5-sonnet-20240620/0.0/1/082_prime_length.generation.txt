Here's a Julia function that implements the `prime_length` functionality as described:

```julia
function prime_length(s::String)::Bool
    n = length(s)
    
    if n <= 1
        return false
    end
    
    for i in 2:isqrt(n)
        if n % i == 0
            return false
        end
    end
    
    return true
end
```

This function does the following:

1. It first gets the length of the input string `s` and stores it in `n`.

2. If the length is 1 or less, it returns `false` because 1 is not considered a prime number.

3. It then checks for divisibility from 2 up to the square root of `n`. We only need to check up to the square root because any factor larger than the square root would have a corresponding factor smaller than the square root.

4. If `n` is divisible by any number in this range, the function returns `false` because the length is not prime.

5. If no divisors are found, the function returns `true`, indicating that the length is prime.

This implementation is efficient for the expected use case of string lengths, which are typically not very large numbers.

You can use this function as follows:

```julia
julia> prime_length("Hello")
true

julia> prime_length("abcdcba")
true

julia> prime_length("kittens")
true

julia> prime_length("orange")
false
```

The function correctly identifies that:
- "Hello" has length 5, which is prime
- "abcdcba" has length 7, which is prime
- "kittens" has length 7, which is prime
- "orange" has length 6, which is not prime