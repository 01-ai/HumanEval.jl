To implement the `find_closest_elements` function, we will follow these steps:

1. Check if the input vector `numbers` has at least two elements. If not, throw an error.
2. Initialize variables to store the minimum difference found (`min_diff`) and the pair of closest elements (`closest_pair`).
3. Sort the input vector `numbers` to make it easier to find the closest elements.
4. Iterate through the sorted list of numbers, comparing each element with its neighbor to find the pair with the smallest difference.
5. Update `min_diff` and `closest_pair` whenever a smaller difference is found.
6. Return the `closest_pair` after the iteration is complete.

Now, let's write the code for the function:
```julia
function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}
    # Step 1: Check if the input vector has at least two elements
    if length(numbers) < 2
        throw(ArgumentError("Input vector must have at least two elements."))
    end
    
    # Step 2: Initialize variables
    min_diff = Inf  # Start with infinity as the minimum difference
    closest_pair = (0.0, 0.0)  # Placeholder for the closest pair
    
    # Step 3: Sort the input vector
    sorted_numbers = sort(numbers)
    
    # Step 4: Iterate through the sorted list to find the closest pair
    for i in 1:length(sorted_numbers)-1
        current_diff = sorted_numbers[i+1] - sorted_numbers[i]
        if current_diff < min_diff
            # Step 5: Update min_diff and closest_pair
            min_diff = current_diff
            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])
        end
    end
    
    # Step 6: Return the closest pair
    return closest_pair
end
```

Let's test the function with the provided examples to ensure it works as expected:
```julia
println(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Should return (2.0, 2.2)
println(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Should return (2.