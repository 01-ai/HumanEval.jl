Here's the implementation of the `strange_sort_list` function in Julia:

```julia
function strange_sort_list(xs::Vector{Int})::Vector{Int}
    sorted_xs = sort(xs)
    result = Vector{Int}()
    while !isempty(sorted_xs)
        push!(result, popfirst!(sorted_xs))
        if !isempty(sorted_xs)
            push!(result, pop!(sorted_xs))
        end
    end
    return result
end
```

### Explanation:
1. **Sorting the Input List**: First, the input list `xs` is sorted in ascending order and stored in `sorted_xs`.
2. **Initializing the Result List**: An empty vector `result` is initialized to store the final strange sorted list.
3. **Strange Sorting Logic**:
   - A `while` loop runs as long as `sorted_xs` is not empty.
   - In each iteration, the first element (minimum) is removed from `sorted_xs` using `popfirst!` and added to `result`.
   - If `sorted_xs` is still not empty, the last element (maximum) is removed from `sorted_xs` using `pop!` and added to `result`.
4. **Returning the Result**: Finally, the `result` list is returned.

### Examples:
```julia
julia> strange_sort_list([1, 2, 3, 4])
4-element Vector{Int64}:
 1
 4
 2
 3

julia> strange_sort_list([5, 5, 5, 5])
4-element Vector{Int64}:
 5
 5
 5
 5

julia> strange_sort_list(Int[])
Int64[]
```

This implementation ensures that the list is sorted in the specified "strange" order.