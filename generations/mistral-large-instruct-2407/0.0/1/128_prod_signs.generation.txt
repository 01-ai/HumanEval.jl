 Certainly! Below is the implementation of the `prod_signs` function in Julia based on the given doc string:

```julia
"""
    prod_signs(xs::Vector{Int})::Union{Nothing,Int}

You are given an array `xs` of integers and you need to return sum of magnitudes
of integers multiplied by product of all signs of each number in the array,
represented by 1, -1 or 0. Note: return None for empty `xs`.

Example: julia> prod_signs([1, 2, 2, -4]) -9

julia> prod_signs([0, 1]) 0

julia> prod_signs([])
"""
function prod_signs(xs::Vector{Int})::Union{Nothing,Int}
    if isempty(xs)
        return nothing
    end

    # Calculate the product of signs
    sign_product = 1
    for x in xs
        if x == 0
            sign_product = 0
            break
        elseif x < 0
            sign_product *= -1
        else
            sign_product *= 1
        end
    end

    # Calculate the sum of magnitudes
    magnitude_sum = sum(abs.(xs))

    # Return the product of the sign product and the magnitude sum
    return sign_product * magnitude_sum
end

# Test cases
println(prod_signs([1, 2, 2, -4]))  # Output: -9
println(prod_signs([0, 1]))         # Output: 0
println(prod_signs([]))             # Output: nothing
```

This function first checks if the input vector `xs` is empty and returns `nothing` if it is. It then calculates the product of the signs of the numbers in the array, taking into account that the presence of a zero will make the product zero. Finally, it calculates the sum of the magnitudes of the numbers in the array and returns the product of the sign product and the magnitude sum.