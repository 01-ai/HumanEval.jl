To implement the function `f` as described, we will follow these steps:

1. Define the function `f` that takes an integer `n` as its parameter.
2. Initialize an empty vector `result` of integers with size `n`.
3. Loop through the numbers from 1 to `n` (inclusive).
4. For each number `i` in the loop:
   - If `i` is even, calculate the factorial of `i` and assign it to the `i`-th position in the `result` vector.
   - If `i` is odd, calculate the sum of numbers from 1 to `i` and assign it to the `i`-th position in the `result` vector.
5. Return the `result` vector.

Now, let's write the code for the function `f`:

```julia
function f(n::Int)::Vector{Int}
    # Step 2: Initialize the result vector
    result = Vector{Int}(undef, n)
    
    # Step 3: Loop through numbers from 1 to n
    for i in 1:n
        # Step 4: Check if i is even or odd
        if i % 2 == 0
            # Calculate factorial for even i
            factorial = 1
            for j in 2:i
                factorial *= j
            end
            result[i] = factorial
        else
            # Calculate sum for odd i
            sum = (i * (i + 1)) รท 2  # Using the arithmetic series sum formula
            result[i] = sum
        end
    end
    
    # Step 5: Return the result vector
    return result
end
```

Let's test the function with the example provided:

```julia
julia> f(5)
5-element Vector{Int64}:
  1
  2
  6
 24
 15
```

This should produce the expected output.