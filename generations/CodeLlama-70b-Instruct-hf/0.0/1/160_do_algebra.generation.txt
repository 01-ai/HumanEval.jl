

```julia
function do_algebra(operator::Vector{String}, operand::Vector{Int})
    # Check if the input is valid
    if length(operator) != length(operand) - 1
        error("The length of operator list must be equal to the length of operand list minus one.")
    end

    # Initialize the result with the first operand
    result = operand[1]

    # Iterate through the operator list
    for i in 1:length(operator)
        # Perform the operation based on the operator
        if operator[i] == "+"
            result += operand[i + 1]
        elseif operator[i] == "-"
            result -= operand[i + 1]
        elseif operator[i] == "*"
            result *= operand[i + 1]
        elseif operator[i] == "รท"
            result = div(result, operand[i + 1])
        elseif operator[i] == "^"
            result = result ^ operand[i + 1]
        else
            error("Invalid operator: $(operator[i])")
        end
    end

    return result
end
```

This function takes two lists, `operator` and `operand`, as input. It checks if the input is valid by ensuring that the length of `operator` is equal to the length of `operand` minus one. If the input is valid, it initializes the result with the first operand. Then, it iterates through the operator list and performs the operation based on the operator. If the operator is not valid, it throws an error. Finally, it returns the result.