To implement the `derivative` function, we will follow these steps:

1. Initialize an empty vector to store the coefficients of the derivative polynomial.
2. Iterate over the coefficients of the input polynomial, skipping the first coefficient (constant term) as its derivative is zero.
3. For each coefficient at index `i`, calculate the derivative coefficient as `i * xs[i]`.
4. Append the calculated derivative coefficient to the result vector.
5. Return the result vector.

Now, let's write the code for the `derivative` function:

```julia
function derivative(xs::Vector)::Vector
    # Step 1: Initialize an empty vector for the derivative coefficients
    derivative_coeffs = Vector{Int64}()
    
    # Step 2: Iterate over the coefficients, skipping the first one
    for i in 2:length(xs)
        # Step 3: Calculate the derivative coefficient
        coeff = (i - 1) * xs[i]
        
        # Step 4: Append the coefficient to the result vector
        push!(derivative_coeffs, coeff)
    end
    
    # Step 5: Return the result vector
    return derivative_coeffs
end
```

Let's test the function with the provided examples:

```julia
println(derivative([3, 1, 2, 4, 5])) # Should print [1, 4, 12, 20]
println(derivative([1, 2, 3]))       # Should print [2, 6]
```

This function assumes that the input vector `xs` contains integer coefficients. If the coefficients can be of other numeric types (e.g., `Float64`), the function and the result vector type should be adjusted accordingly.