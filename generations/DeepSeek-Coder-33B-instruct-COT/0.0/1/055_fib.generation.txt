Here is a step-by-step outline of how to implement the `fib` function:

1. Check if the input `n` is less than or equal to 0. If it is, return 0.
2. If `n` is 1, return 1.
3. Initialize two variables, `a` and `b`, to 0 and 1 respectively. These will hold the last two Fibonacci numbers.
4. Use a loop to calculate the next Fibonacci number. In each iteration, update `a` to be the current value of `b` and `b` to be the sum of `a` and `b`.
5. Return `b` after the loop finishes, which will hold the n-th Fibonacci number.

Here is the Julia code implementing the above steps:

```julia
function fib(n::Int)::Int
    if n <= 0
        return 0
    elseif n == 1
        return 1
    end

    a, b = 0, 1
    for _ in 2:n
        a, b = b, a + b
    end

    return b
end
```

This function works by iteratively updating `a` and `b` to hold the last two Fibonacci numbers, and then calculating the next Fibonacci number as the sum of the last two. The loop runs `n` times, so it calculates the `n`-th Fibonacci number.
