To implement the `string_xor` function in Julia, we can iterate through each character of the input strings `a` and `b`, perform the XOR operation on the corresponding characters, and then concatenate the result into a new string. Here's how you can do it:

```julia
function string_xor(a::String, b::String)::String
    # Ensure both strings are of the same length
    if length(a) != length(b)
        error("Input strings must be of the same length.")
    end

    # Initialize an empty string to store the result
    result = ""

    # Iterate through each character of the strings
    for i in 1:length(a)
        # Perform XOR operation on each pair of characters and append to result
        if a[i] == b[i]
            result *= "0"
        else
            result *= "1"
        end
    end

    return result
end
```

This function works by comparing each character of the input strings `a` and `b`. If the characters are the same, it appends `"0"` to the result string (since `1 XOR 1 = 0` and `0 XOR 0 = 0`). If the characters are different, it appends `"1"` to the result string (since `1 XOR 0 = 1` and `0 XOR 1 = 1`). Note that this implementation assumes both input strings are of the same length and consist only of `1`s and `0`s.