Here's the implementation of the `by_length` function in Julia:

```julia
function by_length(xs::Vector{Int})::Vector{String}
    # Define a dictionary to map numbers to their corresponding names
    num_to_name = Dict(
        1 => "One", 2 => "Two", 3 => "Three", 4 => "Four", 5 => "Five",
        6 => "Six", 7 => "Seven", 8 => "Eight", 9 => "Nine"
    )
    
    # Filter the array to include only numbers between 1 and 9 inclusive
    filtered_xs = filter(x -> 1 <= x <= 9, xs)
    
    # Sort the filtered array
    sorted_xs = sort(filtered_xs)
    
    # Reverse the sorted array
    reversed_xs = reverse(sorted_xs)
    
    # Replace each digit by its corresponding name
    result = [num_to_name[x] for x in reversed_xs]
    
    return result
end
```

This function follows the steps outlined in the docstring:
1. Filters the input array to include only numbers between 1 and 9.
2. Sorts the filtered array.
3. Reverses the sorted array.
4. Maps each number to its corresponding name using a dictionary.
5. Returns the resulting array of strings.