Sure, I can help with that. Here's a Julia function that should do what you're asking for. It first defines helper functions to check if a number is prime and to generate Fibonacci numbers, then uses these to find the n-th Fibonacci number that is also prime.

```julia
function isprime(n::Int)
    if n < 2
        return false
    elseif n < 4
        return true
    elseif n % 2 == 0
        return false
    else
        for d in 3:2:isqrt(n)
            if n % d == 0
                return false
            end
        end
        return true
    end
end

function fibonacci(n::Int)
    if n < 1
        error("Input must be positive integer")
    elseif n <= 2
        return 1
    else
        a, b = 1, 1
        for _ in 3:n
            a, b = b, a + b
        end
        return b
    end
end

function prime_fib(n::Int)
    count = 0
    i = 1
    while count < n
        fib = fibonacci(i)
        if isprime(fib)
            count += 1
        end
        i += 1
    end
    return fibonacci(i - 1)
end
```

This function should return the n-th Fibonacci number that is also prime. The `isprime` function checks if a number is prime, and the `fibonacci` function generates the n-th Fibonacci number. The `prime_fib` function uses these helper functions to find the desired number.