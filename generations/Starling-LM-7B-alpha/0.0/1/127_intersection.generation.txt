 function intersection(interval1::Vector{Int}, interval2::Vector{Int})::String
    # Check if the intervals intersect
    if max(interval1) < min(interval2) || max(interval2) < min(interval1)
        return "NO"
    end

    # Calculate the intersection
    start = max(min(interval1), min(interval2))
    end = min(max(interval1), max(interval2))
    length = end - start + 1

    # Check if the length is prime
    isprime(n::Integer) = n > 1 && all(x -> x^2 > n, 2:floor(Int, sqrt(n)))
    if isprime(length)
        return "YES"
    else
        return "NO"
    end
end

# Test cases
println(intersection([1, 2], [2, 3]))  # "NO"
println(intersection([-1, 1], [0, 4]))  # "NO"
println(intersection([-3, -1], [-5, 5]))  # "YES"
