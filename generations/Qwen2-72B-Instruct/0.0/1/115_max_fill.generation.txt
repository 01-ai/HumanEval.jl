```julia
function max_fill(grid::Vector{Vector{Int}}, capacity::Int)::Int
    # Transpose the grid to work with columns (wells) instead of rows
    wells = transpose(grid)
    total_drops = 0

    # Iterate over each well
    for well in wells
        # Calculate the number of drops needed for the current well
        drops = div(accumulate(+, well; init=0)[end], capacity)
        # If there's any water left that's not a full bucket, add one more drop
        drops += (accumulate(+, well; init=0)[end] % capacity > 0) ? 1 : 0
        total_drops += drops
    end

    return total_drops
end
```

This function takes a grid of wells and a bucket capacity as input and returns the total number of times buckets need to be lowered to empty all the wells. It works by transposing the grid to treat each column as a well, then calculating the number of drops needed for each well based on its total water units and the bucket capacity.