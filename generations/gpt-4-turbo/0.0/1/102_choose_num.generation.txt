```julia
function choose_num(x::Int, y::Int)::Int
    # Check if x is greater than y, if so, return -1 as no range exists
    if x > y
        return -1
    end

    # Start from y and go down to x to find the largest even number
    for num in y:-1:x
        if num % 2 == 0
            return num
        end
    end

    # If no even number is found in the range, return -1
    return -1
end
```

This function iterates from the upper bound `y` to the lower bound `x` and checks for the largest even number. If it finds an even number, it returns it immediately, ensuring that it's the largest even number in the range. If the loop completes without finding an even number, the function returns `-1`. This approach is efficient because it stops as soon as it finds the first even number, which is the largest due to the reverse order of the loop.