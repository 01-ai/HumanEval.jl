To implement the `find_closest_elements` function in Julia, we need to follow these steps:

1. Sort the input vector to make it easier to find the closest elements.
2. Iterate through the sorted vector to find the pair of adjacent elements with the smallest difference.
3. Return the pair of elements in the correct order (smaller number first).

Here is the implementation:

```julia
function find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}
    # Sort the numbers to make it easier to find the closest pair
    sorted_numbers = sort(numbers)
    
    # Initialize variables to store the closest pair and the smallest difference
    closest_pair = (sorted_numbers[1], sorted_numbers[2])
    smallest_diff = abs(sorted_numbers[2] - sorted_numbers[1])
    
    # Iterate through the sorted numbers to find the closest pair
    for i in 2:length(sorted_numbers)-1
        diff = abs(sorted_numbers[i+1] - sorted_numbers[i])
        if diff < smallest_diff
            smallest_diff = diff
            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])
        end
    end
    
    return closest_pair
end
```

### Explanation:

1. **Sorting the Vector**: We start by sorting the input vector `numbers`. This allows us to only compare adjacent elements to find the closest pair, which simplifies the problem.

2. **Initialization**: We initialize `closest_pair` with the first two elements of the sorted vector and calculate their difference as `smallest_diff`.

3. **Iteration**: We iterate through the sorted vector starting from the second element up to the second-to-last element. For each pair of adjacent elements, we calculate the difference. If this difference is smaller than the current `smallest_diff`, we update `smallest_diff` and `closest_pair`.

4. **Return the Result**: Finally, we return the `closest_pair`.

### Example Usage:

```julia
julia> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
(2.0, 2.2)

julia> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
(2.0, 2.0)
```

This implementation ensures that