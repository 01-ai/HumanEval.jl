

To solve this problem, we will first convert the input variables to a common type, in this case, `Float64`, to be able to compare them. Then, we will return the larger value in its original type. If the values are equal, we will return `nothing`.

Here is the step-by-step outline:

1. Define the function `compare_one` that takes two arguments, `a` and `b`.
2. Check if `a` and `b` are equal. If they are, return `nothing`.
3. Convert `a` and `b` to `Float64` and store them in variables `a_float` and `b_float`.
4. If `a_float` is greater than `b_float`, return `a`. Otherwise, return `b`.

And here is the Julia code:

```julia
function compare_one(a::Union{Integer, AbstractFloat, AbstractString}, b::Union{Integer, AbstractFloat, AbstractString})::Union{Integer, AbstractFloat, AbstractString, Nothing}
    # Check if a and b are equal
    if a == b
        return nothing
    end

    # Convert a and b to Float64
    a_float = convert(Float64, a)
    b_float = convert(Float64, b)

    # Return the larger value in its original type
    if a_float > b_float
        return a
    else
        return b
    end
end
```

This function should work for integers, floats, and strings representing real numbers. The comparison operator `>` will work for `Float64` values, and the function `convert` will be used to convert the input values to `Float64`. The return type of the function is `Union{Integer, AbstractFloat, AbstractString, Nothing}` to accommodate the different possible return types.