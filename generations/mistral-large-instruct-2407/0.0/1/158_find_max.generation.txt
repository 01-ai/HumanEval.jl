 Certainly! Below is the implementation of the `find_max` function in Julia based on the given doc string:

```julia
"""
    find_max(words::Vector{String})::String

Write a function that accepts a list of strings. The list contains different
words. Return the word with maximum number of unique characters. If multiple
strings have maximum number of unique characters, return the one which comes
first in lexicographical order.

# Examples

```jldoctest
julia> find_max(["name", "of", "string"])
"string"

julia> find_max(["name", "enam", "game"])
"enam"

julia> find_max(["aaaaaaa", "bb", "cc"])
"aaaaaaa"
```
"""
function find_max(words::Vector{String})::String
    max_unique_count = 0
    max_word = ""

    for word in words
        unique_chars = Set(word)
        unique_count = length(unique_chars)

        if unique_count > max_unique_count
            max_unique_count = unique_count
            max_word = word
        elseif unique_count == max_unique_count
            if word < max_word
                max_word = word
            end
        end
    end

    return max_word
end
```

### Explanation:
1. **Initialization**:
   - `max_unique_count` is initialized to 0 to keep track of the maximum number of unique characters found so far.
   - `max_word` is initialized to an empty string to store the word with the maximum number of unique characters.

2. **Iteration**:
   - The function iterates over each word in the input vector `words`.
   - For each word, it calculates the number of unique characters by converting the word to a `Set` and then taking its length.

3. **Comparison**:
   - If the current word has more unique characters than `max_unique_count`, it updates `max_unique_count` and sets `max_word` to the current word.
   - If the current word has the same number of unique characters as `max_unique_count`, it checks if the current word is lexicographically smaller than `max_word`. If so, it updates `max_word`.

4. **Return**:
   - After iterating through all words, the function returns `max_word`, which is the word with the maximum number of unique characters (or the lexicographically smallest one in case of a tie).

This implementation ensures that the function behaves as described in the doc string and handles the examples correctly.