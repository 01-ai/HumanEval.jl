 Certainly! Below is the implementation of the `starts_one_ends` function in Julia based on the given doc string:

```julia
"""
    starts_one_ends(n::Int)::Int

Given a positive integer `n`, return the count of the numbers of n-digit
positive integers that start or end with 1.
"""
function starts_one_ends(n::Int)::Int
    if n <= 0
        throw(DomainError(n, "n must be a positive integer"))
    end

    # Calculate the total number of n-digit numbers
    total_n_digit_numbers = 10^n - 10^(n-1)

    # Calculate the number of n-digit numbers that start with 1
    start_with_1 = 10^(n-1)

    # Calculate the number of n-digit numbers that end with 1
    end_with_1 = 10^(n-1)

    # Calculate the number of n-digit numbers that both start and end with 1
    start_and_end_with_1 = 10^(n-2)

    # Use the inclusion-exclusion principle to find the count
    count = start_with_1 + end_with_1 - start_and_end_with_1

    return count
end
```

### Explanation:
1. **Input Validation**: The function first checks if `n` is a positive integer. If not, it throws a `DomainError`.
2. **Total n-digit Numbers**: The total number of `n`-digit numbers is calculated as `10^n - 10^(n-1)`.
3. **Numbers Starting with 1**: The number of `n`-digit numbers that start with 1 is `10^(n-1)`.
4. **Numbers Ending with 1**: Similarly, the number of `n`-digit numbers that end with 1 is also `10^(n-1)`.
5. **Numbers Starting and Ending with 1**: The number of `n`-digit numbers that both start and end with 1 is `10^(n-2)`.
6. **Inclusion-Exclusion Principle**: To avoid double-counting the numbers that both start and end with 1, we use the inclusion-exclusion principle: `count = start_with_1 + end_with_1 - start_and_end_with_1`.

This function will correctly return the count of `n`-digit positive integers that start or end with 1.