```julia
function min_sub_array_sum(nums::Vector{Int})::Int
    # Base case: an empty array has a minimum sum of 0
    if length(nums) == 0
        return 0
    end

    # Initialize the minimum sum to the first element of the array
    min_sum = nums[1]

    # Iterate through the array and update the minimum sum
    for i in 2:length(nums)
        min_sum = min(min_sum + nums[i], nums[i])
    end

    return min_sum
end
```

This function works by iterating through the array and updating the minimum sum at each step. It starts with the first element of the array as the initial minimum sum and then, at each iteration, it updates the minimum sum by either adding the current element or by replacing it with the current element if that results in a smaller sum.