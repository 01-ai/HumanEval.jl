```julia
function numerical_letter_grade(grades::Vector{Float64})::Vector{String}
    letter_grades = String[]
    for grade in grades
        if grade > 4.0
            push!(letter_grades, "A+")
        elseif grade > 3.7
            push!(letter_grades, "A")
        elseif grade > 3.3
            push!(letter_grades, "A-")
        elseif grade > 3.0
            push!(letter_grades, "B+")
        elseif grade > 2.7
            push!(letter_grades, "B")
        elseif grade > 2.3
            push!(letter_grades, "B-")
        elseif grade > 2.0
            push!(letter_grades, "C+")
        elseif grade > 1.7
            push!(letter_grades, "C")
        elseif grade > 1.3
            push!(letter_grades, "C-")
        elseif grade > 1.0
            push!(letter_grades, "D+")
        elseif grade > 0.7
            push!(letter_grades, "D")
        elseif grade > 0.0
            push!(letter_grades, "D-")
        else
            push!(letter_grades, "E")
        end
    end
    return letter_grades
end
```

This function takes a vector of numerical grades as input and returns a vector of corresponding letter grades based on the grading scale provided in the docstring. It iterates through each numerical grade, checks it against the thresholds, and appends the appropriate letter grade to the `letter_grades` array.