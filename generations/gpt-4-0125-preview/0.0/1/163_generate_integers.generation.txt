To implement the `generate_integers` function as described, we need to ensure that it works correctly regardless of whether `a` is less than `b` or vice versa. The function should return a vector of even integers between `a` and `b` (inclusive), in ascending order. If `a` is greater than `b`, we should swap them to make the iteration easier. Here's how you can implement this function in Julia:

```julia
function generate_integers(a::Int, b::Int)::Vector{Int}
    # Ensure a is less than or equal to b
    if a > b
        a, b = b, a
    end

    # Initialize an empty vector to store the even integers
    even_integers = Int[]

    # Adjust a to the next even number if it's odd
    a += a % 2

    # Iterate from a to b, stepping by 2 to get only even numbers
    for i = a:2:b
        push!(even_integers, i)
    end

    return even_integers
end
```

This function starts by checking if `a` is greater than `b` and swaps their values if necessary. It then initializes an empty vector to store the even integers. Before iterating from `a` to `b`, it adjusts `a` to be even if it's not already (this is done by adding `a % 2` to `a`, which has no effect if `a` is already even). Finally, it iterates through the range from `a` to `b`, stepping by 2 to ensure only even numbers are considered, and adds these numbers to the vector. The vector is returned at the end.