 Here's a Julia function that removes all duplicate elements from a vector of integers while maintaining the order of the remaining elements:

```julia
function remove_duplicates(numbers::Vector{Int})::Vector{Int}
    unique_numbers = unique(numbers)
    result = []
    for number in unique_numbers
        index = findfirst(==(number), numbers)
        push!(result, index)
    end
    return result
end
```

This function first creates a vector of unique numbers using the `unique()` function. Then, it iterates through the unique numbers and finds the index of each number in the original vector using the `findfirst()` function. The indices of the unique numbers are stored in the `result` vector, which is returned at the end.

Here's an example usage of the function:

```julia
julia> remove_duplicates([1, 2, 3, 2, 4])
3-element Vector{Int64}:
 1
 3
 4
```

This output matches the expected result from the provided example.