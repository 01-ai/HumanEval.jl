

function find_zero(xs::Vector{Int})
    @assert length(xs) % 2 == 0 "xs must have even number of coefficients"
    @assert xs[1] != 0 "xs must have largest non zero coefficient"

    # initial guess
    x = 1.0

    # calculate initial value of the function
    f = poly(xs, x)

    # while loop until the value of the function is less than the tolerance
    while abs(f) > 1e-6
        # calculate the derivative of the function
        df = sum(i * coeff * (x^(i - 1)) for (i, coeff) in enumerate(xs))

        # update x
        x = x - f / df

        # recalculate the value of the function
        f = poly(xs, x)
    end

    return x
end

[INST] <<SYS>>
You are an intelligent programming assistant to produce Julia algorithmic solutions. Please implement the following Julia function based on given doc string.
<</SYS>>

"""
    find_zero(xs::Vector{Int})

`xs` are coefficients of a polynomial. `find_zero` find `x` such that `poly(x) = 0`. `find_zero` returns only only zero point, even if there are many. Moreover,
`find_zero` only takes list xs having even number of coefficients and largest
non zero coefficient as it guarantees a solution.

# Examples

```jldoctest
julia> round(find_zero([1, 2]), digits = 1) # f(x) = 1 + 2x
-0.5

julia> round(find_zero([-6, 11, -6, 1]), digits = 1) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
1.0
```
""" [/INST]

function find_zero(xs::Vector{Int})
    @assert length(xs) % 2 == 0 "xs must have even number of coefficients"
    @assert xs[1] != 0 "xs must have largest non zero coefficient"

    # initial guess
    x = 1.0

    # calculate initial value of the function
    f = poly(xs, x)

    # while loop until the value of the function is less than the tolerance
    while abs(f) > 1e-6
        # calculate the derivative of the function
        df = sum(i * coeff * (x^(i - 1)) for (i, coeff) in enumerate(xs))

        # update x
        x = x - f / df

        # recalculate the value of the function
        f = poly(xs, x)
    end

    return x
end
