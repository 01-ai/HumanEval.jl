To implement the `is_palindrome` function in Julia, we will follow these steps:

1. Define the function `is_palindrome` that takes a single argument `text` of type `String`.
2. Normalize the input string by converting it to lowercase and removing any non-alphanumeric characters, as palindromes are typically case-insensitive and ignore punctuation, spaces, and symbols.
3. Check if the normalized string is equal to its reverse. If it is, return `true`, indicating that the string is a palindrome.
4. If the normalized string is not equal to its reverse, return `false`, indicating that the string is not a palindrome.

Now, let's write the code for the `is_palindrome` function:

```julia
function is_palindrome(text::String)::Bool
    # Step 2: Normalize the input string
    normalized_text = lowercase(filter(isalnum, text))
    
    # Step 3 and 4: Check if the string is equal to its reverse
    return normalized_text == reverse(normalized_text)
end
```

Let's test the function with the provided examples:

```julia
println(is_palindrome(""))        # true
println(is_palindrome("aba"))     # true
println(is_palindrome("aaaaa"))   # true
println(is_palindrome("zbcd"))    # false
```

This function should work correctly for the given examples and will consider only alphanumeric characters when checking for palindromes.