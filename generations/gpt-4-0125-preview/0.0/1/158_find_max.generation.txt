To implement the `find_max` function as described, we can follow these steps:

1. Iterate through each word in the list.
2. For each word, calculate the number of unique characters.
3. Keep track of the word with the maximum number of unique characters found so far.
4. If a word has the same number of unique characters as the current maximum, compare them lexicographically to decide which one should be considered the maximum.
5. Return the word that has the maximum number of unique characters, with lexicographical order as a tiebreaker.

Here's how you can implement this in Julia:

```julia
function find_max(words::Vector{String})::String
    # Initialize variables to keep track of the word with the maximum number of unique characters
    max_unique_chars = 0
    max_word = ""
    
    for word in words
        # Calculate the number of unique characters in the current word
        unique_chars = length(unique(word))
        
        # Update the max_word if the current word has more unique characters,
        # or if it has the same number but is lexicographically smaller
        if unique_chars > max_unique_chars || (unique_chars == max_unique_chars && word < max_word)
            max_unique_chars = unique_chars
            max_word = word
        end
    end
    
    return max_word
end
```

This function iterates through each word, calculates the number of unique characters using `unique(word)` and `length()`, and updates the `max_word` accordingly. It ensures that if multiple words have the same number of unique characters, the one that comes first lexicographically is chosen.