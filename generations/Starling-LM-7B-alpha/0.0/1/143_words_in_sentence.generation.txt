 Here's a Julia function that implements the described functionality:

```julia
function words_in_sentence(sentence::String)::String
    words = split(sentence, " ")
    primes = collect(1:length(words)) .|> x -> all(x -> x % y != 0, primes(x))
    filter!(x -> primes[x], words)
    return join(words, " ")
end
```

This function first splits the input sentence into a vector of words using the `split` function. Then, it creates a boolean array `primes` of the same length as the number of words, where each element is `true` if the corresponding word length is prime and `false` otherwise. The `primes` function is used to generate a range of prime numbers up to the maximum length of the words. The `filter!` function is then used to remove the words whose lengths are not prime from the `words` vector. Finally, the filtered words are joined back into a string using the `join` function, with spaces between them.

Here are some examples of the function in action:

```julia
julia> words_in_sentence("This is a test")
"is"

julia> words_in_sentence("lets go for swimming")
"go for"
```