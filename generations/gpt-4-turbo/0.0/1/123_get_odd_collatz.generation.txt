```julia
function get_odd_collatz(n::Int)::Vector{BigInt}
    # Initialize the current value with n and prepare a list to store odd numbers
    current = BigInt(n)
    odd_numbers = BigInt[]

    # Continue the sequence until it reaches 1
    while current != 1
        # If current is odd, add to the list
        if current % 2 != 0
            push!(odd_numbers, current)
        end
        
        # Apply the Collatz rule
        if current % 2 == 0
            current รท= 2
        else
            current = 3 * current + 1
        end
    end

    # Add the final 1 to the list if not already included
    push!(odd_numbers, BigInt(1))

    # Sort the list of odd numbers
    sort!(odd_numbers)
    return odd_numbers
end
```

This function implements the Collatz sequence generation and collects all odd numbers encountered during the sequence. It uses `BigInt` to handle large numbers that might result from the sequence operations. The list of odd numbers is then sorted before being returned.