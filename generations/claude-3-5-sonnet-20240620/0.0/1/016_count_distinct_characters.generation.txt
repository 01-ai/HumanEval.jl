Here's a Julia function that counts the number of distinct characters in a given string, regardless of case:

```julia
function count_distinct_characters(s::String)::Int
    # Convert the string to lowercase to make it case-insensitive
    s_lower = lowercase(s)
    
    # Use a Set to count unique characters
    unique_chars = Set(s_lower)
    
    # Return the count of unique characters
    return length(unique_chars)
end
```

This function works as follows:

1. We first convert the input string `s` to lowercase using the `lowercase()` function. This ensures that our character counting is case-insensitive.

2. We then create a `Set` from the lowercase string. A `Set` in Julia automatically keeps only unique elements, so this effectively gives us all the distinct characters.

3. Finally, we return the length of this Set, which represents the count of distinct characters.

You can use this function as follows:

```julia
julia> count_distinct_characters("xyzXYZ")
3

julia> count_distinct_characters("Jerry")
4
```

This function will correctly handle Unicode characters as well:

```julia
julia> count_distinct_characters("Hello, 世界!")
9
```

Note that this function considers lowercase and uppercase versions of the same letter as the same character, which is why "xyzXYZ" returns 3 (for x, y, and z) instead of 6.