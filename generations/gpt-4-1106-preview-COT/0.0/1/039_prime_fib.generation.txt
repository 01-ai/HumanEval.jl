To implement the `prime_fib` function, we will follow these steps:

1. Define a helper function to check if a number is prime.
2. Define a function to generate Fibonacci numbers.
3. Iterate through the Fibonacci sequence, checking if each number is prime.
4. Keep a count of how many prime Fibonacci numbers we have found.
5. When we reach the n-th prime Fibonacci number, return it.

Now, let's write the code for the `prime_fib` function and the helper functions:

```julia
# Step 1: Define a helper function to check if a number is prime
function is_prime(num::Int)::Bool
    if num <= 1
        return false
    end
    for i in 2:sqrt(num)
        if num % i == 0
            return false
        end
    end
    return true
end

# Step 2: Define a function to generate Fibonacci numbers
function fib_generator()
    a, b = 0, 1
    while true
        a, b = b, a + b
        yield(a)
    end
end

# Step 3: Define the main function to find the n-th prime Fibonacci number
function prime_fib(n::Int)::Int
    count = 0
    for fib in fib_generator()
        if is_prime(fib)
            count += 1
            if count == n
                return fib
            end
        end
    end
end

# Example usage:
println(prime_fib(1)) # Should print 2
println(prime_fib(2)) # Should print 3
println(prime_fib(3)) # Should print 5
println(prime_fib(4)) # Should print 13
println(prime_fib(5)) # Should print 89
```

Please note that Julia does not have a built-in `yield` function like Python. We can simulate the behavior using a closure or a generator. However, for simplicity, I will modify the `fib_generator` function to be a simple function that returns the next Fibonacci number in the sequence each time it is called. Here is the modified version:

```julia
# Step 2: Define a function to generate Fibonacci numbers
function fib_generator()
    a, b = 0, 1
    return () -> begin
        a, b = b, a + b
        a
    end
end