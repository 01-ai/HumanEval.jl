 To implement the `words_in_sentence` function in Julia, we need to follow these steps:

1. Split the input sentence into words.
2. Check the length of each word to determine if it is a prime number.
3. Collect the words whose lengths are prime numbers.
4. Join these words into a single string, maintaining the original order.

Here's the implementation:

```julia
function is_prime(n::Int)::Bool
    if n <= 1
        return false
    elseif n <= 3
        return true
    elseif n % 2 == 0 || n % 3 == 0
        return false
    end
    i = 5
    while i * i <= n
        if n % i == 0 || n % (i + 2) == 0
            return false
        end
        i += 6
    end
    return true
end

function words_in_sentence(sentence::String)::String
    words = split(sentence)
    prime_length_words = filter(word -> is_prime(length(word)), words)
    return join(prime_length_words, " ")
end
```

### Explanation:

1. **is_prime function**:
   - This helper function checks if a given number is prime.
   - It handles edge cases for numbers less than or equal to 1.
   - It uses a loop to check divisibility up to the square root of the number, which is an efficient way to determine primality.

2. **words_in_sentence function**:
   - It splits the input sentence into words using the `split` function.
   - It filters the words to keep only those whose lengths are prime using the `filter` function and the `is_prime` helper function.
   - It joins the filtered words back into a single string with spaces in between using the `join` function.

### Example Usage:

```julia
println(words_in_sentence("This is a test"))  # Output: "is"
println(words_in_sentence("lets go for swimming"))  # Output: "go for"
```

This implementation ensures that the words with prime lengths are correctly identified and returned in the same order as they appear in the original sentence.