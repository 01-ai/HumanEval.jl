Sure, here's a simple implementation of the `largest_prime_factor` function in Julia. This function uses a helper function `isprime` to check if a number is prime.

```julia
function isprime(n::Int)
    if n <= 1
        return false
    elseif n <= 3
        return true
    elseif n % 2 == 0
        return false
    else
        for i in 3:2:isqrt(n)
            if n % i == 0
                return false
            end
        end
        return true
    end
end

function largest_prime_factor(n::Int)::Int
    for i in n-1:-1:2
        if n % i == 0 && isprime(i)
            return i
        end
    end
    error("Input is not valid")
end
```

This function starts by checking if `n` is divisible by any number less than `n` and greater than 1. If it is, it checks if that number is prime using the `isprime` function. If it is prime, it returns that number as the largest prime factor. If no such number is found, it throws an error indicating that the input is not valid.