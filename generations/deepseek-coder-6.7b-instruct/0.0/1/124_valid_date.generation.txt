Here is a Julia function that validates a date string according to the rules you provided:

```julia
function valid_date(date::String)::Bool
    if date == "" || length(date) != 10 || date[3] != '-' || date[6] != '-'
        return false
    end

    month, day, year = parse(Int, date[1:2]), parse(Int, date[4:5]), parse(Int, date[7:end])

    if month < 1 || month > 12 || day < 1 || year < 1
        return false
    end

    if month âˆˆ [4, 6, 9, 11]
        return day <= 30
    elseif month == 2
        if year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)
            return day <= 29
        else
            return day <= 28
        end
    else
        return day <= 31
    end
end
```

This function first checks if the date string is not empty and has the correct format. Then it extracts the month, day, and year from the date string. It checks if the month and year are valid, and then checks if the day is valid for the given month and year. If all checks pass, the function returns `true`; otherwise, it returns `false`.
