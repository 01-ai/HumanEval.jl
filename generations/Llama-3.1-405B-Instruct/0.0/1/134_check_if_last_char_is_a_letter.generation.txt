Here is the Julia function that meets the requirements:
```julia
"""
    check_if_last_char_is_a_letter(s::String)::Bool

Create a function that returns `true` if the last character
of a given string is an alphabetical character and is not
a part of a word, and `false` otherwise.

Note: "word" is a group of characters separated by space.

# Examples

```jldoctest
julia> check_if_last_char_is_a_letter("apple pie")
false

julia> check_if_last_char_is_a_letter("apple pi e")
false

julia> check_if_last_char_is_a_letter("apple pi e ")
false

julia> check_if_last_char_is_a_letter("")
false
```
"""
function check_if_last_char_is_a_letter(s::String)::Bool
    # Remove trailing whitespace
    s = rstrip(s)
    
    # If string is empty, return false
    if isempty(s)
        return false
    end
    
    # Get the last character
    last_char = s[end]
    
    # Check if last character is a letter
    if !isletter(last_char)
        return false
    end
    
    # Split the string into words
    words = split(s, ' ')
    
    # If the last character is part of a word, return false
    if last_char == words[end][end]
        return false
    end
    
    # If all conditions are met, return true
    return true
end
```
Here's an explanation of the code:

1. We first remove any trailing whitespace from the input string using `rstrip`.
2. We then check if the string is empty, in which case we return `false`.
3. We get the last character of the string using `s[end]`.
4. We check if the last character is a letter using `isletter`. If it's not, we return `false`.
5. We split the string into words using `split`.
6. We check if the last character is part of a word by comparing it to the last character of the last word. If it is, we return `false`.
7. If all conditions are met, we return `true`.

Note that this implementation assumes that the input string only contains ASCII characters. If you need to support non-ASCII characters, you may need to modify the implementation accordingly.