Here's an implementation of the `fib` function in Julia that returns the n-th Fibonacci number:

```julia
function fib(n::Int)::Int
    if n <= 0
        return 0
    elseif n == 1 || n == 2
        return 1
    else
        return fib(n - 1) + fib(n - 2)
    end
end
```

Explanation:
- The function `fib` takes an integer `n` as input and returns an integer.
- If `n` is less than or equal to 0, the function returns 0 since the Fibonacci sequence is defined for positive integers.
- If `n` is equal to 1 or 2, the function returns 1 since the first two Fibonacci numbers are both 1.
- For `n` greater than 2, the function recursively calls itself with `n - 1` and `n - 2` and returns the sum of the results. This is based on the definition of the Fibonacci sequence, where each number is the sum of the two preceding numbers.

The function satisfies the given examples:

```jldoctest
julia> fib(10)
55

julia> fib(1)
1

julia> fib(8)
21
```

Note that this implementation uses a recursive approach, which is simple and intuitive but can be inefficient for large values of `n` due to the redundant calculations. For more efficient implementations, you can consider using dynamic programming techniques such as memoization or iterative approaches.