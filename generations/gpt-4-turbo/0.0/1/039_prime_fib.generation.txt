To implement the `prime_fib` function, we need to generate Fibonacci numbers and check if they are prime. We will continue this process until we find the `n`-th Fibonacci number that is also prime.

Here's a step-by-step breakdown of the approach:

1. **Generate Fibonacci Numbers**: Use a generator or a loop to produce Fibonacci numbers.
2. **Prime Checking**: Implement a function to check if a number is prime.
3. **Counting Primes**: Keep a count of how many Fibonacci numbers that are prime have been found.
4. **Return the Result**: Once the `n`-th prime Fibonacci number is found, return it.

Let's start by implementing the helper function to check if a number is prime:

```julia
function is_prime(x::Int)
    if x <= 1
        return false
    elseif x <= 3
        return true
    elseif x % 2 == 0 || x % 3 == 0
        return false
    end
    i = 5
    while i * i <= x
        if x % i == 0 || x % (i + 2) == 0
            return false
        end
        i += 6
    end
    return true
end
```

Now, let's implement the `prime_fib` function:

```julia
function prime_fib(n::Int)::Int
    count = 0
    a, b = 0, 1
    while true
        # Generate the next Fibonacci number
        a, b = b, a + b
        # Check if the Fibonacci number is prime
        if is_prime(b)
            count += 1
            if count == n
                return b
            end
        end
    end
end
```

This function uses a simple loop to generate Fibonacci numbers and checks each one for primality. When the `n`-th prime Fibonacci number is found, it returns that number.