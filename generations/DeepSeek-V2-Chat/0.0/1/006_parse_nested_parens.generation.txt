Here's the implementation of the `parse_nested_parens` function in Julia:

```julia
function parse_nested_parens(paren_string::String)::Vector{Int}
    # Split the input string into groups of parentheses
    groups = split(paren_string)
    
    # Initialize an empty vector to store the results
    results = Vector{Int}(undef, length(groups))
    
    # Iterate over each group
    for (i, group) in enumerate(groups)
        max_depth = 0
        current_depth = 0
        
        # Iterate over each character in the group
        for char in group
            if char == '('
                current_depth += 1
                max_depth = max(max_depth, current_depth)
            elseif char == ')'
                current_depth -= 1
            end
        end
        
        # Store the maximum depth for the current group
        results[i] = max_depth
    end
    
    return results
end
```

This function works by splitting the input string into groups of parentheses, then iterating over each group to calculate the maximum depth of nesting for each group. The depths are stored in a vector and returned as the result.