 Certainly! Below is the implementation of the `odd_count` function in Julia based on the provided docstring:

```julia
"""
    odd_count(xs::Vector{String})::Vector{String}

Given a list of strings, where each string consists of only digits, return a
list. Each element `i` of the output should be "the number of odd elements in
the string i of the input." where all the i"s should be replaced by the number
of odd digits in the i"th string of the input.

# Example

```jldoctest
julia> odd_count(["1234567"])
1-element Vector{String}:
 "the number of odd elements 4n the str4ng 4 of the 4nput."

julia> odd_count(["3", "11111111"])
2-element Vector{String}:
 "the number of odd elements 1n the str1ng 1 of the 1nput."
 "the number of odd elements 8n the str8ng 8 of the 8nput."
```
"""
function odd_count(xs::Vector{String})::Vector{String}
    result = Vector{String}()

    for x in xs
        odd_digits_count = count(c -> isodd(parse(Int, c)), x)
        output_string = "the number of odd elements $(odd_digits_count)n the str$(odd_digits_count)ng $(odd_digits_count) of the $(odd_digits_count)nput."
        push!(result, output_string)
    end

    return result
end
```

### Explanation:
1. **Function Definition**: The function `odd_count` takes a vector of strings `xs` as input and returns a vector of strings.
2. **Result Initialization**: An empty vector `result` is initialized to store the output strings.
3. **Loop Through Input Strings**: For each string `x` in the input vector `xs`:
   - **Count Odd Digits**: The number of odd digits in the string `x` is counted using the `count` function combined with a lambda function that checks if a character is an odd digit.
   - **Construct Output String**: The output string is constructed by replacing all occurrences of `i` with the count of odd digits.
   - **Push to Result**: The constructed string is pushed to the `result` vector.
4. **Return Result**: The `result` vector is returned.

This implementation should work as expected based on the provided examples.