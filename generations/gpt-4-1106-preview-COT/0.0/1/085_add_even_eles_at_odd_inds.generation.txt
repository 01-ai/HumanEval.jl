To implement the function `add_even_eles_at_odd_inds`, we will follow these steps:

1. Initialize a variable `sum` to 0. This will hold the sum of even elements at odd indices.
2. Iterate over the elements of the vector `xs` with their indices.
3. Check if the index is odd and the element is even.
4. If both conditions are met, add the element to `sum`.
5. After the loop, return the `sum`.

Now, let's write the code for the function:

```julia
function add_even_eles_at_odd_inds(xs::Vector{Int})::Int
    sum = 0
    for (index, value) in enumerate(xs)
        if index % 2 == 1 && value % 2 == 0
            sum += value
        end
    end
    return sum
end
```

Let's test the function with the provided example:

```julia
println(add_even_eles_at_odd_inds([4, 2, 6, 7]))  # Should output 10
```

Note that in Julia, array indices start at 1, so an "odd index" in Julia is actually what we would consider an even index in 0-based indexing languages. The above code assumes that "odd indices" refers to the 1-based index used in Julia. If the intention was to use 0-based indexing, we would need to adjust the condition to `if (index + 1) % 2 == 0 && value % 2 == 0`.