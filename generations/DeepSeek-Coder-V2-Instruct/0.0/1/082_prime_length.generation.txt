 To implement the `prime_length` function in Julia, we need to check if the length of the input string `s` is a prime number. Here's a step-by-step approach to achieve this:

1. **Calculate the length of the string**: This is straightforward using the `length` function.
2. **Check if the length is a prime number**: We need a helper function to determine if a given number is prime.

A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. To check if a number `n` is prime, we can iterate from 2 to the square root of `n` and check if `n` is divisible by any of these numbers. If it is, then `n` is not prime.

Here's the complete implementation:

```julia
function is_prime(n::Int)::Bool
    if n <= 1
        return false
    elseif n == 2
        return true
    elseif n % 2 == 0
        return false
    end
    for i in 3:2:sqrt(n)
        if n % i == 0
            return false
        end
    end
    return true
end

function prime_length(s::String)::Bool
    return is_prime(length(s))
end
```

### Explanation:

1. **`is_prime` function**:
   - If `n` is less than or equal to 1, it's not prime.
   - If `n` is 2, it's prime.
   - If `n` is even and greater than 2, it's not prime.
   - For odd `n` greater than 2, we check divisibility from 3 up to the square root of `n`, incrementing by 2 (to skip even numbers).

2. **`prime_length` function**:
   - Simply calls `is_prime` with the length of the input string `s`.

### Example Usage:

```julia
println(prime_length("Hello"))    # true
println(prime_length("abcdcba"))  # true
println(prime_length("kittens"))  # true
println(prime_length("orange"))   # false
```

This implementation ensures that the function correctly identifies whether the length of the input string is a prime number.