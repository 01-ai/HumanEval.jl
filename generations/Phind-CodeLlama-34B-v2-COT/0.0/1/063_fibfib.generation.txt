

# Step-by-step outline:
# 1. Define the function fibfib(n::Int)::Int with the docstring provided.
# 2. Check the base cases: if n is 0, 1, or 2, return the correct value.
# 3. If n is greater than 2, use a loop to calculate the n-th element of the sequence.
# 4. Store the last three elements of the sequence in variables to avoid redundant calculations.
# 5. Return the n-th element of the sequence.

# Code:

```julia
function fibfib(n::Int)::Int
    # Base cases
    if n == 0
        return 0
    elseif n == 1
        return 0
    elseif n == 2
        return 1
    end

    # Initialize the last three elements of the sequence
    a, b, c = 0, 0, 1

    # Calculate the n-th element
    for _ in 3:n
        a, b, c = b, c, a + b + c
    end

    return c
end
```

This function uses a loop and a constant amount of space to compute the n-th element of the fibfib sequence, making it efficient for large n.