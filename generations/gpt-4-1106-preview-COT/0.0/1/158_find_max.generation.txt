To implement the `find_max` function, we will follow these steps:

1. Initialize a variable to keep track of the word with the maximum number of unique characters found so far. Let's call it `max_word`.
2. Initialize a variable to keep track of the maximum number of unique characters found so far. Let's call it `max_unique_chars`.
3. Loop through each word in the input vector `words`.
4. For each word, calculate the number of unique characters by converting the word into a set and then getting the length of the set.
5. If the number of unique characters is greater than `max_unique_chars`, update `max_word` with the current word and `max_unique_chars` with the current number of unique characters.
6. If the number of unique characters is equal to `max_unique_chars`, compare the current word with `max_word` lexicographically. If the current word comes before `max_word`, update `max_word` with the current word.
7. After the loop, return `max_word`.

Now, let's write the code for the function `find_max`:

```julia
function find_max(words::Vector{String})::String
    max_word = ""
    max_unique_chars = 0

    for word in words
        unique_chars = length(Set(word))
        if unique_chars > max_unique_chars
            max_unique_chars = unique_chars
            max_word = word
        elseif unique_chars == max_unique_chars
            if word < max_word
                max_word = word
            end
        end
    end

    return max_word
end
```

Let's test the function with the provided examples:

```julia
println(find_max(["name", "of", "string"]))  # Should return "string"
println(find_max(["name", "enam", "game"]))  # Should return "enam"
println(find_max(["aaaaaaa", "bb", "cc"]))   # Should return "aaaaaaa"
```

This function should work correctly according to the specifications in the doc string.