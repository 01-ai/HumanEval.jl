  Here's one way to implement the `is_simple_power` function in Julia:
```
function is_simple_power(x::Number, n::Number)::Bool
    return x == n^Int(x)
end
```
Explanation:

* The function takes two arguments, `x` and `n`, both of type `Number`.
* The function returns a boolean value indicating whether `x` is a simple power of `n`.
* The function checks if `x` is equal to `n` raised to the power of `Int(x)`. If it is, then `x` is a simple power of `n`, and the function returns `true`. Otherwise, the function returns `false`.

Here are some examples of how the function works:

* `is_simple_power(1, 4)` returns `true` because 1 is a simple power of 4 (1 = 4^0).
* `is_simple_power(2, 2)` returns `true` because 2 is a simple power of 2 (2 = 2^1).
* `is_simple_power(8, 2)` returns `true` because 8 is a simple power of 2 (8 = 2^3).
* `is_simple_power(3, 2)` returns `false` because 3 is not a simple power of 2 (3 is not equal to 2^0, 2^1, or 2^2).
* `is_simple_power(3, 1)` returns `false` because 3 is not a simple power of 1 (3 is not equal to 1^0 or 1^1).
* `is_simple_power(5, 3)` returns `false` because 5 is not a simple power of 3 (5 is not equal to 3^0, 3^1, or 3^2).